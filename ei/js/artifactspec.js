// source: ei.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.ei.ArtifactSpec');
goog.provide('proto.ei.ArtifactSpec.Level');
goog.provide('proto.ei.ArtifactSpec.Name');
goog.provide('proto.ei.ArtifactSpec.Rarity');
goog.provide('proto.ei.ArtifactSpec.Type');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

goog.forwardDeclare('proto.ei.Egg');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ei.ArtifactSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ei.ArtifactSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ei.ArtifactSpec.displayName = 'proto.ei.ArtifactSpec';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ei.ArtifactSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.ei.ArtifactSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ei.ArtifactSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ArtifactSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    level: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rarity: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    egg: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ei.ArtifactSpec}
 */
proto.ei.ArtifactSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ei.ArtifactSpec;
  return proto.ei.ArtifactSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ei.ArtifactSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ei.ArtifactSpec}
 */
proto.ei.ArtifactSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ei.ArtifactSpec.Name} */ (reader.readEnum());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.ei.ArtifactSpec.Level} */ (reader.readEnum());
      msg.setLevel(value);
      break;
    case 3:
      var value = /** @type {!proto.ei.ArtifactSpec.Rarity} */ (reader.readEnum());
      msg.setRarity(value);
      break;
    case 4:
      var value = /** @type {!proto.ei.Egg} */ (reader.readEnum());
      msg.setEgg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ei.ArtifactSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ei.ArtifactSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ei.ArtifactSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ArtifactSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ei.ArtifactSpec.Name} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!proto.ei.ArtifactSpec.Level} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.ei.ArtifactSpec.Rarity} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {!proto.ei.Egg} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ei.ArtifactSpec.Name = {
  LUNAR_TOTEM: 0,
  NEODYMIUM_MEDALLION: 3,
  BEAK_OF_MIDAS: 4,
  LIGHT_OF_EGGENDIL: 5,
  DEMETERS_NECKLACE: 6,
  VIAL_MARTIAN_DUST: 7,
  ORNATE_GUSSET: 8,
  THE_CHALICE: 9,
  BOOK_OF_BASAN: 10,
  PHOENIX_FEATHER: 11,
  TUNGSTEN_ANKH: 12,
  AURELIAN_BROOCH: 21,
  CARVED_RAINSTICK: 22,
  PUZZLE_CUBE: 23,
  QUANTUM_METRONOME: 24,
  SHIP_IN_A_BOTTLE: 25,
  TACHYON_DEFLECTOR: 26,
  INTERSTELLAR_COMPASS: 27,
  DILITHIUM_MONOCLE: 28,
  TITANIUM_ACTUATOR: 29,
  MERCURYS_LENS: 30,
  TACHYON_STONE: 1,
  DILITHIUM_STONE: 31,
  SHELL_STONE: 32,
  LUNAR_STONE: 33,
  SOUL_STONE: 34,
  PROPHECY_STONE: 39,
  QUANTUM_STONE: 36,
  TERRA_STONE: 37,
  LIFE_STONE: 38,
  CLARITY_STONE: 40,
  EXTRATERRESTRIAL_ALUMINUM: 13,
  ANCIENT_TUNGSTEN: 14,
  SPACE_ROCKS: 15,
  ALIEN_WOOD: 16,
  GOLD_METEORITE: 17,
  TAU_CETI_GEODE: 18,
  CENTAURIAN_STEEL: 19,
  ERIDANI_FEATHER: 20,
  DRONE_PARTS: 35,
  CELESTIAL_BRONZE: 41,
  LALANDE_HIDE: 42,
  SOLAR_TITANIUM: 43,
  TACHYON_STONE_FRAGMENT: 2,
  DILITHIUM_STONE_FRAGMENT: 44,
  SHELL_STONE_FRAGMENT: 45,
  LUNAR_STONE_FRAGMENT: 46,
  SOUL_STONE_FRAGMENT: 47,
  PROPHECY_STONE_FRAGMENT: 48,
  QUANTUM_STONE_FRAGMENT: 49,
  TERRA_STONE_FRAGMENT: 50,
  LIFE_STONE_FRAGMENT: 51,
  CLARITY_STONE_FRAGMENT: 52,
  UNKNOWN: 10000
};

/**
 * @enum {number}
 */
proto.ei.ArtifactSpec.Level = {
  INFERIOR: 0,
  LESSER: 1,
  NORMAL: 2,
  GREATER: 3,
  SUPERIOR: 4
};

/**
 * @enum {number}
 */
proto.ei.ArtifactSpec.Rarity = {
  COMMON: 0,
  RARE: 1,
  EPIC: 2,
  LEGENDARY: 3
};

/**
 * @enum {number}
 */
proto.ei.ArtifactSpec.Type = {
  ARTIFACT: 0,
  STONE: 1,
  INGREDIENT: 2,
  STONE_INGREDIENT: 3
};

/**
 * optional Name name = 1;
 * @return {!proto.ei.ArtifactSpec.Name}
 */
proto.ei.ArtifactSpec.prototype.getName = function() {
  return /** @type {!proto.ei.ArtifactSpec.Name} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ei.ArtifactSpec.Name} value
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ArtifactSpec.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Level level = 2;
 * @return {!proto.ei.ArtifactSpec.Level}
 */
proto.ei.ArtifactSpec.prototype.getLevel = function() {
  return /** @type {!proto.ei.ArtifactSpec.Level} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ei.ArtifactSpec.Level} value
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.setLevel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.clearLevel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ArtifactSpec.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Rarity rarity = 3;
 * @return {!proto.ei.ArtifactSpec.Rarity}
 */
proto.ei.ArtifactSpec.prototype.getRarity = function() {
  return /** @type {!proto.ei.ArtifactSpec.Rarity} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ei.ArtifactSpec.Rarity} value
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.setRarity = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.clearRarity = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ArtifactSpec.prototype.hasRarity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Egg egg = 4;
 * @return {!proto.ei.Egg}
 */
proto.ei.ArtifactSpec.prototype.getEgg = function() {
  return /** @type {!proto.ei.Egg} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/**
 * @param {!proto.ei.Egg} value
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.setEgg = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ArtifactSpec} returns this
 */
proto.ei.ArtifactSpec.prototype.clearEgg = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ArtifactSpec.prototype.hasEgg = function() {
  return jspb.Message.getField(this, 4) != null;
};


