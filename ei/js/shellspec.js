// source: ei.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.ei.ShellSpec');
goog.provide('proto.ei.ShellSpec.AssetType');
goog.provide('proto.ei.ShellSpec.ShellPiece');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.ei.DLCItem');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ei.ShellSpec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ei.ShellSpec.repeatedFields_, null);
};
goog.inherits(proto.ei.ShellSpec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ei.ShellSpec.displayName = 'proto.ei.ShellSpec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ei.ShellSpec.ShellPiece = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ei.ShellSpec.ShellPiece, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ei.ShellSpec.ShellPiece.displayName = 'proto.ei.ShellSpec.ShellPiece';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ei.ShellSpec.repeatedFields_ = [11,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ei.ShellSpec.prototype.toObject = function(opt_includeInstance) {
  return proto.ei.ShellSpec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ei.ShellSpec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ShellSpec.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    primaryPiece: (f = msg.getPrimaryPiece()) && proto.ei.ShellSpec.ShellPiece.toObject(includeInstance, f),
    piecesList: jspb.Message.toObjectList(msg.getPiecesList(),
    proto.ei.ShellSpec.ShellPiece.toObject, includeInstance),
    altAssetsList: jspb.Message.toObjectList(msg.getAltAssetsList(),
    proto.ei.DLCItem.toObject, includeInstance),
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    setIdentifier: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    modifiedGeometry: (f = jspb.Message.getBooleanField(msg, 19)) == null ? undefined : f,
    price: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    requiredEop: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    requiredSoulEggs: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    requiredParentShell: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    isNew: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    expires: (f = jspb.Message.getBooleanField(msg, 15)) == null ? undefined : f,
    secondsUntilAvailable: (f = jspb.Message.getOptionalFloatingPointField(msg, 17)) == null ? undefined : f,
    secondsRemaining: (f = jspb.Message.getOptionalFloatingPointField(msg, 16)) == null ? undefined : f,
    popularity: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    defaultAppearance: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ei.ShellSpec}
 */
proto.ei.ShellSpec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ei.ShellSpec;
  return proto.ei.ShellSpec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ei.ShellSpec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ei.ShellSpec}
 */
proto.ei.ShellSpec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 12:
      var value = new proto.ei.ShellSpec.ShellPiece;
      reader.readMessage(value,proto.ei.ShellSpec.ShellPiece.deserializeBinaryFromReader);
      msg.setPrimaryPiece(value);
      break;
    case 11:
      var value = new proto.ei.ShellSpec.ShellPiece;
      reader.readMessage(value,proto.ei.ShellSpec.ShellPiece.deserializeBinaryFromReader);
      msg.addPieces(value);
      break;
    case 18:
      var value = new proto.ei.DLCItem;
      reader.readMessage(value,proto.ei.DLCItem.deserializeBinaryFromReader);
      msg.addAltAssets(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetIdentifier(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setModifiedGeometry(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequiredEop(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRequiredSoulEggs(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequiredParentShell(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNew(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExpires(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSecondsUntilAvailable(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSecondsRemaining(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPopularity(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDefaultAppearance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ei.ShellSpec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ei.ShellSpec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ei.ShellSpec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ShellSpec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrimaryPiece();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.ei.ShellSpec.ShellPiece.serializeBinaryToWriter
    );
  }
  f = message.getPiecesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.ei.ShellSpec.ShellPiece.serializeBinaryToWriter
    );
  }
  f = message.getAltAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.ei.DLCItem.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeBool(
      19,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeUint64(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ei.ShellSpec.AssetType = {
  COOP: 1,
  SHACK: 2,
  SUPER_SHACK: 3,
  SHORT_HOUSE: 4,
  THE_STANDARD: 5,
  LONG_HOUSE: 6,
  DOUBLE_DECKER: 7,
  WAREHOUSE: 8,
  CENTER: 9,
  BUNKER: 10,
  EGGKEA: 11,
  HAB_1K: 12,
  HANGAR: 13,
  TOWER: 14,
  HAB_10K: 15,
  EGGTOPIA: 16,
  MONOLITH: 17,
  PLANET_PORTAL: 18,
  CHICKEN_UNIVERSE: 19,
  SILO_0_SMALL: 50,
  SILO_0_MED: 51,
  SILO_0_LARGE: 52,
  SILO_1_SMALL: 53,
  SILO_1_MED: 54,
  SILO_1_LARGE: 55,
  SILO_ALL: 59,
  MAILBOX: 70,
  TROPHY_CASE: 71,
  GROUND: 72,
  HARDSCAPE: 73,
  HYPERLOOP: 74,
  DEPOT_1: 100,
  DEPOT_2: 101,
  DEPOT_3: 102,
  DEPOT_4: 103,
  DEPOT_5: 104,
  DEPOT_6: 105,
  DEPOT_7: 106,
  LAB_1: 110,
  LAB_2: 111,
  LAB_3: 112,
  LAB_4: 113,
  LAB_5: 114,
  LAB_6: 115,
  HATCHERY_EDIBLE: 120,
  HATCHERY_SUPERFOOD: 121,
  HATCHERY_MEDICAL: 122,
  HATCHERY_ROCKET_FUEL: 123,
  HATCHERY_SUPERMATERIAL: 124,
  HATCHERY_FUSION: 125,
  HATCHERY_QUANTUM: 126,
  HATCHERY_IMMORTALITY: 127,
  HATCHERY_TACHYON: 128,
  HATCHERY_GRAVITON: 129,
  HATCHERY_DILITHIUM: 130,
  HATCHERY_PRODIGY: 131,
  HATCHERY_TERRAFORM: 132,
  HATCHERY_ANTIMATTER: 133,
  HATCHERY_DARK_MATTER: 134,
  HATCHERY_AI: 135,
  HATCHERY_NEBULA: 136,
  HATCHERY_UNIVERSE: 137,
  HATCHERY_ENLIGHTENMENT: 138,
  HATCHERY_CHOCOLATE: 139,
  HATCHERY_EASTER: 140,
  HATCHERY_WATERBALLOON: 141,
  HATCHERY_FIREWORK: 142,
  HATCHERY_PUMPKIN: 143,
  HATCHERY_CUSTOM: 150,
  HOA_1: 170,
  HOA_2: 171,
  HOA_3: 172,
  MISSION_CONTROL_1: 180,
  MISSION_CONTROL_2: 181,
  MISSION_CONTROL_3: 182,
  FUEL_TANK_1: 200,
  FUEL_TANK_2: 201,
  FUEL_TANK_3: 202,
  FUEL_TANK_4: 203,
  HATCHERY_GRAVITON_TOP: 500,
  HATCHERY_NEBULA_MIDDLE: 501,
  HATCHERY_NEBULA_TOP: 502,
  HATCHERY_DARK_MATTER_RING_1: 505,
  HATCHERY_DARK_MATTER_RING_2: 506,
  HATCHERY_DARK_MATTER_RING_3: 507,
  HATCHERY_AI_TOP_1: 510,
  HATCHERY_AI_TOP_2: 511,
  HATCHERY_AI_TOP_3: 512,
  HATCHERY_AI_TOP_4: 513,
  HATCHERY_UNIVERSE_PROBE: 515,
  HATCHERY_UNIVERSE_BOLT: 516,
  HATCHERY_ENLIGHTENMENT_ORB: 520,
  HYPERLOOP_TRACK: 570,
  MAILBOX_FULL: 600,
  CHICKEN: 1000,
  HAT: 1010,
  UNKNOWN: 9999
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ei.ShellSpec.ShellPiece.prototype.toObject = function(opt_includeInstance) {
  return proto.ei.ShellSpec.ShellPiece.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ei.ShellSpec.ShellPiece} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ShellSpec.ShellPiece.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetType: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    dlc: (f = msg.getDlc()) && proto.ei.DLCItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ei.ShellSpec.ShellPiece}
 */
proto.ei.ShellSpec.ShellPiece.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ei.ShellSpec.ShellPiece;
  return proto.ei.ShellSpec.ShellPiece.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ei.ShellSpec.ShellPiece} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ei.ShellSpec.ShellPiece}
 */
proto.ei.ShellSpec.ShellPiece.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ei.ShellSpec.AssetType} */ (reader.readEnum());
      msg.setAssetType(value);
      break;
    case 2:
      var value = new proto.ei.DLCItem;
      reader.readMessage(value,proto.ei.DLCItem.deserializeBinaryFromReader);
      msg.setDlc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ei.ShellSpec.ShellPiece.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ei.ShellSpec.ShellPiece.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ei.ShellSpec.ShellPiece} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ShellSpec.ShellPiece.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ei.ShellSpec.AssetType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDlc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ei.DLCItem.serializeBinaryToWriter
    );
  }
};


/**
 * optional AssetType asset_type = 1;
 * @return {!proto.ei.ShellSpec.AssetType}
 */
proto.ei.ShellSpec.ShellPiece.prototype.getAssetType = function() {
  return /** @type {!proto.ei.ShellSpec.AssetType} */ (jspb.Message.getFieldWithDefault(this, 1, 1));
};


/**
 * @param {!proto.ei.ShellSpec.AssetType} value
 * @return {!proto.ei.ShellSpec.ShellPiece} returns this
 */
proto.ei.ShellSpec.ShellPiece.prototype.setAssetType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec.ShellPiece} returns this
 */
proto.ei.ShellSpec.ShellPiece.prototype.clearAssetType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.ShellPiece.prototype.hasAssetType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DLCItem dlc = 2;
 * @return {?proto.ei.DLCItem}
 */
proto.ei.ShellSpec.ShellPiece.prototype.getDlc = function() {
  return /** @type{?proto.ei.DLCItem} */ (
    jspb.Message.getWrapperField(this, proto.ei.DLCItem, 2));
};


/**
 * @param {?proto.ei.DLCItem|undefined} value
 * @return {!proto.ei.ShellSpec.ShellPiece} returns this
*/
proto.ei.ShellSpec.ShellPiece.prototype.setDlc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ei.ShellSpec.ShellPiece} returns this
 */
proto.ei.ShellSpec.ShellPiece.prototype.clearDlc = function() {
  return this.setDlc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.ShellPiece.prototype.hasDlc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.ei.ShellSpec.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setIdentifier = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearIdentifier = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasIdentifier = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShellPiece primary_piece = 12;
 * @return {?proto.ei.ShellSpec.ShellPiece}
 */
proto.ei.ShellSpec.prototype.getPrimaryPiece = function() {
  return /** @type{?proto.ei.ShellSpec.ShellPiece} */ (
    jspb.Message.getWrapperField(this, proto.ei.ShellSpec.ShellPiece, 12));
};


/**
 * @param {?proto.ei.ShellSpec.ShellPiece|undefined} value
 * @return {!proto.ei.ShellSpec} returns this
*/
proto.ei.ShellSpec.prototype.setPrimaryPiece = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearPrimaryPiece = function() {
  return this.setPrimaryPiece(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasPrimaryPiece = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated ShellPiece pieces = 11;
 * @return {!Array<!proto.ei.ShellSpec.ShellPiece>}
 */
proto.ei.ShellSpec.prototype.getPiecesList = function() {
  return /** @type{!Array<!proto.ei.ShellSpec.ShellPiece>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ei.ShellSpec.ShellPiece, 11));
};


/**
 * @param {!Array<!proto.ei.ShellSpec.ShellPiece>} value
 * @return {!proto.ei.ShellSpec} returns this
*/
proto.ei.ShellSpec.prototype.setPiecesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ei.ShellSpec.ShellPiece=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ei.ShellSpec.ShellPiece}
 */
proto.ei.ShellSpec.prototype.addPieces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ei.ShellSpec.ShellPiece, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearPiecesList = function() {
  return this.setPiecesList([]);
};


/**
 * repeated DLCItem alt_assets = 18;
 * @return {!Array<!proto.ei.DLCItem>}
 */
proto.ei.ShellSpec.prototype.getAltAssetsList = function() {
  return /** @type{!Array<!proto.ei.DLCItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ei.DLCItem, 18));
};


/**
 * @param {!Array<!proto.ei.DLCItem>} value
 * @return {!proto.ei.ShellSpec} returns this
*/
proto.ei.ShellSpec.prototype.setAltAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.ei.DLCItem=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ei.DLCItem}
 */
proto.ei.ShellSpec.prototype.addAltAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.ei.DLCItem, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearAltAssetsList = function() {
  return this.setAltAssetsList([]);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ei.ShellSpec.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string set_identifier = 13;
 * @return {string}
 */
proto.ei.ShellSpec.prototype.getSetIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setSetIdentifier = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearSetIdentifier = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasSetIdentifier = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool modified_geometry = 19;
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.getModifiedGeometry = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setModifiedGeometry = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearModifiedGeometry = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasModifiedGeometry = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional uint32 price = 4;
 * @return {number}
 */
proto.ei.ShellSpec.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setPrice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearPrice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasPrice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 required_eop = 5;
 * @return {number}
 */
proto.ei.ShellSpec.prototype.getRequiredEop = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setRequiredEop = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearRequiredEop = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasRequiredEop = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double required_soul_eggs = 6;
 * @return {number}
 */
proto.ei.ShellSpec.prototype.getRequiredSoulEggs = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setRequiredSoulEggs = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearRequiredSoulEggs = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasRequiredSoulEggs = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string required_parent_shell = 20;
 * @return {string}
 */
proto.ei.ShellSpec.prototype.getRequiredParentShell = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setRequiredParentShell = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearRequiredParentShell = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasRequiredParentShell = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bool is_new = 14;
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.getIsNew = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setIsNew = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearIsNew = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasIsNew = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool expires = 15;
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.getExpires = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setExpires = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearExpires = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasExpires = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional double seconds_until_available = 17;
 * @return {number}
 */
proto.ei.ShellSpec.prototype.getSecondsUntilAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setSecondsUntilAvailable = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearSecondsUntilAvailable = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasSecondsUntilAvailable = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional double seconds_remaining = 16;
 * @return {number}
 */
proto.ei.ShellSpec.prototype.getSecondsRemaining = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setSecondsRemaining = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearSecondsRemaining = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasSecondsRemaining = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint64 popularity = 21;
 * @return {number}
 */
proto.ei.ShellSpec.prototype.getPopularity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setPopularity = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearPopularity = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasPopularity = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool default_appearance = 8;
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.getDefaultAppearance = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.setDefaultAppearance = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ShellSpec} returns this
 */
proto.ei.ShellSpec.prototype.clearDefaultAppearance = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ShellSpec.prototype.hasDefaultAppearance = function() {
  return jspb.Message.getField(this, 8) != null;
};


