// source: ei.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.ei.ContractPlayerInfo');
goog.provide('proto.ei.ContractPlayerInfo.SeasonProgress');
goog.provide('proto.ei.ContractPlayerInfo.Status');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.ei.ContractEvaluation');

goog.forwardDeclare('proto.ei.Contract.PlayerGrade');
goog.forwardDeclare('proto.ei.ContractEvaluation.PoorBehavior');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ei.ContractPlayerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ei.ContractPlayerInfo.repeatedFields_, null);
};
goog.inherits(proto.ei.ContractPlayerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ei.ContractPlayerInfo.displayName = 'proto.ei.ContractPlayerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ei.ContractPlayerInfo.SeasonProgress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ei.ContractPlayerInfo.SeasonProgress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ei.ContractPlayerInfo.SeasonProgress.displayName = 'proto.ei.ContractPlayerInfo.SeasonProgress';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ei.ContractPlayerInfo.repeatedFields_ = [11,6,15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ei.ContractPlayerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ei.ContractPlayerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ei.ContractPlayerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ContractPlayerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
grade: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
totalCxp: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
seasonCxp: (f = jspb.Message.getOptionalFloatingPointField(msg, 13)) == null ? undefined : f,
gradeScore: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
targetGradeScore: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
soulPower: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
targetSoulPower: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
gradeProgress: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
issuesList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
issueScore: (f = jspb.Message.getOptionalFloatingPointField(msg, 14)) == null ? undefined : f,
status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
lastEvaluationTime: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
lastEvaluationVersion: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
unreadEvaluationsList: jspb.Message.toObjectList(msg.getUnreadEvaluationsList(),
    proto.ei.ContractEvaluation.toObject, includeInstance),
seasonProgressList: jspb.Message.toObjectList(msg.getSeasonProgressList(),
    proto.ei.ContractPlayerInfo.SeasonProgress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ei.ContractPlayerInfo}
 */
proto.ei.ContractPlayerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ei.ContractPlayerInfo;
  return proto.ei.ContractPlayerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ei.ContractPlayerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ei.ContractPlayerInfo}
 */
proto.ei.ContractPlayerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ei.Contract.PlayerGrade} */ (reader.readEnum());
      msg.setGrade(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalCxp(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSeasonCxp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGradeScore(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTargetGradeScore(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSoulPower(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTargetSoulPower(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGradeProgress(value);
      break;
    case 11:
      var values = /** @type {!Array<!proto.ei.ContractEvaluation.PoorBehavior>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addIssues(values[i]);
      }
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIssueScore(value);
      break;
    case 3:
      var value = /** @type {!proto.ei.ContractPlayerInfo.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLastEvaluationTime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastEvaluationVersion(value);
      break;
    case 6:
      var value = new proto.ei.ContractEvaluation;
      reader.readMessage(value,proto.ei.ContractEvaluation.deserializeBinaryFromReader);
      msg.addUnreadEvaluations(value);
      break;
    case 15:
      var value = new proto.ei.ContractPlayerInfo.SeasonProgress;
      reader.readMessage(value,proto.ei.ContractPlayerInfo.SeasonProgress.deserializeBinaryFromReader);
      msg.addSeasonProgress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ei.ContractPlayerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ei.ContractPlayerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ei.ContractPlayerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ContractPlayerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.ei.Contract.PlayerGrade} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getIssuesList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = /** @type {!proto.ei.ContractPlayerInfo.Status} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUnreadEvaluationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ei.ContractEvaluation.serializeBinaryToWriter
    );
  }
  f = message.getSeasonProgressList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.ei.ContractPlayerInfo.SeasonProgress.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ei.ContractPlayerInfo.Status = {
  UNKNOWN: 0,
  CALCULATING: 1,
  OUT_OF_DATE: 2,
  INCOMPLETE: 4,
  COMPLETE: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.toObject = function(opt_includeInstance) {
  return proto.ei.ContractPlayerInfo.SeasonProgress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ei.ContractPlayerInfo.SeasonProgress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ContractPlayerInfo.SeasonProgress.toObject = function(includeInstance, msg) {
  var f, obj = {
seasonId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
activeDep: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
startingGrade: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
totalCxp: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
cxpLastRewardGiven: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ei.ContractPlayerInfo.SeasonProgress;
  return proto.ei.ContractPlayerInfo.SeasonProgress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ei.ContractPlayerInfo.SeasonProgress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSeasonId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActiveDep(value);
      break;
    case 3:
      var value = /** @type {!proto.ei.Contract.PlayerGrade} */ (reader.readEnum());
      msg.setStartingGrade(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalCxp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCxpLastRewardGiven(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ei.ContractPlayerInfo.SeasonProgress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ei.ContractPlayerInfo.SeasonProgress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.ContractPlayerInfo.SeasonProgress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!proto.ei.Contract.PlayerGrade} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string season_id = 1;
 * @return {string}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.getSeasonId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.setSeasonId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.clearSeasonId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.hasSeasonId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool active_DEP = 2;
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.getActiveDep = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.setActiveDep = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.clearActiveDep = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.hasActiveDep = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Contract.PlayerGrade starting_grade = 3;
 * @return {!proto.ei.Contract.PlayerGrade}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.getStartingGrade = function() {
  return /** @type {!proto.ei.Contract.PlayerGrade} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ei.Contract.PlayerGrade} value
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.setStartingGrade = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.clearStartingGrade = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.hasStartingGrade = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double total_cxp = 4;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.getTotalCxp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.setTotalCxp = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.clearTotalCxp = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.hasTotalCxp = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional double cxp_last_reward_given = 5;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.getCxpLastRewardGiven = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.setCxpLastRewardGiven = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress} returns this
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.clearCxpLastRewardGiven = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.SeasonProgress.prototype.hasCxpLastRewardGiven = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Contract.PlayerGrade grade = 1;
 * @return {!proto.ei.Contract.PlayerGrade}
 */
proto.ei.ContractPlayerInfo.prototype.getGrade = function() {
  return /** @type {!proto.ei.Contract.PlayerGrade} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ei.Contract.PlayerGrade} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setGrade = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearGrade = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasGrade = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double total_cxp = 2;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getTotalCxp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setTotalCxp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearTotalCxp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasTotalCxp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double season_cxp = 13;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getSeasonCxp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setSeasonCxp = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearSeasonCxp = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasSeasonCxp = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional double grade_score = 7;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getGradeScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setGradeScore = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearGradeScore = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasGradeScore = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional double target_grade_score = 9;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getTargetGradeScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setTargetGradeScore = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearTargetGradeScore = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasTargetGradeScore = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional double soul_power = 10;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getSoulPower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setSoulPower = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearSoulPower = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasSoulPower = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional double target_soul_power = 8;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getTargetSoulPower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setTargetSoulPower = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearTargetSoulPower = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasTargetSoulPower = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional double grade_progress = 12;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getGradeProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setGradeProgress = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearGradeProgress = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasGradeProgress = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * repeated ContractEvaluation.PoorBehavior issues = 11;
 * @return {!Array<!proto.ei.ContractEvaluation.PoorBehavior>}
 */
proto.ei.ContractPlayerInfo.prototype.getIssuesList = function() {
  return /** @type {!Array<!proto.ei.ContractEvaluation.PoorBehavior>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<!proto.ei.ContractEvaluation.PoorBehavior>} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setIssuesList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {!proto.ei.ContractEvaluation.PoorBehavior} value
 * @param {number=} opt_index
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.addIssues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearIssuesList = function() {
  return this.setIssuesList([]);
};


/**
 * optional double issue_score = 14;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getIssueScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setIssueScore = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearIssueScore = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasIssueScore = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional Status status = 3;
 * @return {!proto.ei.ContractPlayerInfo.Status}
 */
proto.ei.ContractPlayerInfo.prototype.getStatus = function() {
  return /** @type {!proto.ei.ContractPlayerInfo.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ei.ContractPlayerInfo.Status} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double last_evaluation_time = 4;
 * @return {number}
 */
proto.ei.ContractPlayerInfo.prototype.getLastEvaluationTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setLastEvaluationTime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearLastEvaluationTime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasLastEvaluationTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string last_evaluation_version = 5;
 * @return {string}
 */
proto.ei.ContractPlayerInfo.prototype.getLastEvaluationVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.setLastEvaluationVersion = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearLastEvaluationVersion = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.ContractPlayerInfo.prototype.hasLastEvaluationVersion = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated ContractEvaluation unread_evaluations = 6;
 * @return {!Array<!proto.ei.ContractEvaluation>}
 */
proto.ei.ContractPlayerInfo.prototype.getUnreadEvaluationsList = function() {
  return /** @type{!Array<!proto.ei.ContractEvaluation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ei.ContractEvaluation, 6));
};


/**
 * @param {!Array<!proto.ei.ContractEvaluation>} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
*/
proto.ei.ContractPlayerInfo.prototype.setUnreadEvaluationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ei.ContractEvaluation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ei.ContractEvaluation}
 */
proto.ei.ContractPlayerInfo.prototype.addUnreadEvaluations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ei.ContractEvaluation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearUnreadEvaluationsList = function() {
  return this.setUnreadEvaluationsList([]);
};


/**
 * repeated SeasonProgress season_progress = 15;
 * @return {!Array<!proto.ei.ContractPlayerInfo.SeasonProgress>}
 */
proto.ei.ContractPlayerInfo.prototype.getSeasonProgressList = function() {
  return /** @type{!Array<!proto.ei.ContractPlayerInfo.SeasonProgress>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ei.ContractPlayerInfo.SeasonProgress, 15));
};


/**
 * @param {!Array<!proto.ei.ContractPlayerInfo.SeasonProgress>} value
 * @return {!proto.ei.ContractPlayerInfo} returns this
*/
proto.ei.ContractPlayerInfo.prototype.setSeasonProgressList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.ei.ContractPlayerInfo.SeasonProgress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ei.ContractPlayerInfo.SeasonProgress}
 */
proto.ei.ContractPlayerInfo.prototype.addSeasonProgress = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.ei.ContractPlayerInfo.SeasonProgress, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ei.ContractPlayerInfo} returns this
 */
proto.ei.ContractPlayerInfo.prototype.clearSeasonProgressList = function() {
  return this.setSeasonProgressList([]);
};


