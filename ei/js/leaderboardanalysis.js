// source: ei.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.ei.LeaderboardAnalysis');
goog.provide('proto.ei.LeaderboardAnalysis.Chunk');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ei.LeaderboardAnalysis = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ei.LeaderboardAnalysis.repeatedFields_, null);
};
goog.inherits(proto.ei.LeaderboardAnalysis, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ei.LeaderboardAnalysis.displayName = 'proto.ei.LeaderboardAnalysis';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ei.LeaderboardAnalysis.Chunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ei.LeaderboardAnalysis.Chunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ei.LeaderboardAnalysis.Chunk.displayName = 'proto.ei.LeaderboardAnalysis.Chunk';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ei.LeaderboardAnalysis.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ei.LeaderboardAnalysis.prototype.toObject = function(opt_includeInstance) {
  return proto.ei.LeaderboardAnalysis.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ei.LeaderboardAnalysis} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.LeaderboardAnalysis.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunksList: jspb.Message.toObjectList(msg.getChunksList(),
    proto.ei.LeaderboardAnalysis.Chunk.toObject, includeInstance),
    count: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    highScore: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    lowScore: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    cursor: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ei.LeaderboardAnalysis}
 */
proto.ei.LeaderboardAnalysis.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ei.LeaderboardAnalysis;
  return proto.ei.LeaderboardAnalysis.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ei.LeaderboardAnalysis} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ei.LeaderboardAnalysis}
 */
proto.ei.LeaderboardAnalysis.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ei.LeaderboardAnalysis.Chunk;
      reader.readMessage(value,proto.ei.LeaderboardAnalysis.Chunk.deserializeBinaryFromReader);
      msg.addChunks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHighScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowScore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ei.LeaderboardAnalysis.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ei.LeaderboardAnalysis.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ei.LeaderboardAnalysis} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.LeaderboardAnalysis.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ei.LeaderboardAnalysis.Chunk.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.toObject = function(opt_includeInstance) {
  return proto.ei.LeaderboardAnalysis.Chunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ei.LeaderboardAnalysis.Chunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.LeaderboardAnalysis.Chunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    startIndex: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    endIndex: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    highScore: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    lowScore: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    startCursor: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    endCursor: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk}
 */
proto.ei.LeaderboardAnalysis.Chunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ei.LeaderboardAnalysis.Chunk;
  return proto.ei.LeaderboardAnalysis.Chunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ei.LeaderboardAnalysis.Chunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk}
 */
proto.ei.LeaderboardAnalysis.Chunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStartIndex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEndIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHighScore(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLowScore(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartCursor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndCursor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ei.LeaderboardAnalysis.Chunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ei.LeaderboardAnalysis.Chunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ei.LeaderboardAnalysis.Chunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 start_index = 1;
 * @return {number}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.getStartIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.setStartIndex = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.clearStartIndex = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.hasStartIndex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 end_index = 2;
 * @return {number}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.getEndIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.setEndIndex = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.clearEndIndex = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.hasEndIndex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double high_score = 3;
 * @return {number}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.getHighScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.setHighScore = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.clearHighScore = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.hasHighScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double low_score = 4;
 * @return {number}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.getLowScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.setLowScore = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.clearLowScore = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.hasLowScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string start_cursor = 5;
 * @return {string}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.getStartCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.setStartCursor = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.clearStartCursor = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.hasStartCursor = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string end_cursor = 6;
 * @return {string}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.getEndCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.setEndCursor = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis.Chunk} returns this
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.clearEndCursor = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.Chunk.prototype.hasEndCursor = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated Chunk chunks = 1;
 * @return {!Array<!proto.ei.LeaderboardAnalysis.Chunk>}
 */
proto.ei.LeaderboardAnalysis.prototype.getChunksList = function() {
  return /** @type{!Array<!proto.ei.LeaderboardAnalysis.Chunk>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ei.LeaderboardAnalysis.Chunk, 1));
};


/**
 * @param {!Array<!proto.ei.LeaderboardAnalysis.Chunk>} value
 * @return {!proto.ei.LeaderboardAnalysis} returns this
*/
proto.ei.LeaderboardAnalysis.prototype.setChunksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ei.LeaderboardAnalysis.Chunk=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ei.LeaderboardAnalysis.Chunk}
 */
proto.ei.LeaderboardAnalysis.prototype.addChunks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ei.LeaderboardAnalysis.Chunk, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.clearChunksList = function() {
  return this.setChunksList([]);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.ei.LeaderboardAnalysis.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.setCount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.clearCount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.prototype.hasCount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double high_score = 3;
 * @return {number}
 */
proto.ei.LeaderboardAnalysis.prototype.getHighScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.setHighScore = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.clearHighScore = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.prototype.hasHighScore = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double low_score = 4;
 * @return {number}
 */
proto.ei.LeaderboardAnalysis.prototype.getLowScore = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.setLowScore = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.clearLowScore = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.prototype.hasLowScore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string cursor = 5;
 * @return {string}
 */
proto.ei.LeaderboardAnalysis.prototype.getCursor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.setCursor = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ei.LeaderboardAnalysis} returns this
 */
proto.ei.LeaderboardAnalysis.prototype.clearCursor = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ei.LeaderboardAnalysis.prototype.hasCursor = function() {
  return jspb.Message.getField(this, 5) != null;
};


