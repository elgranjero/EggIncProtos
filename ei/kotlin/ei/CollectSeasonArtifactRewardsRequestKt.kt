// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ei.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ei;

@kotlin.jvm.JvmName("-initializecollectSeasonArtifactRewardsRequest")
public inline fun collectSeasonArtifactRewardsRequest(block: ei.CollectSeasonArtifactRewardsRequestKt.Dsl.() -> kotlin.Unit): ei.Ei.CollectSeasonArtifactRewardsRequest =
  ei.CollectSeasonArtifactRewardsRequestKt.Dsl._create(ei.Ei.CollectSeasonArtifactRewardsRequest.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ei.CollectSeasonArtifactRewardsRequest`
 */
public object CollectSeasonArtifactRewardsRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.CollectSeasonArtifactRewardsRequest.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.CollectSeasonArtifactRewardsRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ei.Ei.CollectSeasonArtifactRewardsRequest = _builder.build()

    /**
     * `optional .ei.BasicRequestInfo rinfo = 1;`
     */
    public var rinfo: ei.Ei.BasicRequestInfo
      @JvmName("getRinfo")
      get() = _builder.rinfo
      @JvmName("setRinfo")
      set(value) {
        _builder.rinfo = value
      }
    /**
     * `optional .ei.BasicRequestInfo rinfo = 1;`
     */
    public fun clearRinfo() {
      _builder.clearRinfo()
    }
    /**
     * `optional .ei.BasicRequestInfo rinfo = 1;`
     * @return Whether the rinfo field is set.
     */
    public fun hasRinfo(): kotlin.Boolean {
      return _builder.hasRinfo()
    }

    public val CollectSeasonArtifactRewardsRequestKt.Dsl.rinfoOrNull: ei.Ei.BasicRequestInfo?
      get() = _builder.rinfoOrNull

    /**
     * `optional string season_identifier = 2;`
     */
    public var seasonIdentifier: kotlin.String
      @JvmName("getSeasonIdentifier")
      get() = _builder.seasonIdentifier
      @JvmName("setSeasonIdentifier")
      set(value) {
        _builder.seasonIdentifier = value
      }
    /**
     * `optional string season_identifier = 2;`
     */
    public fun clearSeasonIdentifier() {
      _builder.clearSeasonIdentifier()
    }
    /**
     * `optional string season_identifier = 2;`
     * @return Whether the seasonIdentifier field is set.
     */
    public fun hasSeasonIdentifier(): kotlin.Boolean {
      return _builder.hasSeasonIdentifier()
    }

    /**
     * `optional double cxp = 3;`
     */
    public var cxp: kotlin.Double
      @JvmName("getCxp")
      get() = _builder.cxp
      @JvmName("setCxp")
      set(value) {
        _builder.cxp = value
      }
    /**
     * `optional double cxp = 3;`
     */
    public fun clearCxp() {
      _builder.clearCxp()
    }
    /**
     * `optional double cxp = 3;`
     * @return Whether the cxp field is set.
     */
    public fun hasCxp(): kotlin.Boolean {
      return _builder.hasCxp()
    }

    /**
     * `optional .ei.MissionInfo.Spaceship best_ship = 4;`
     */
    public var bestShip: ei.Ei.MissionInfo.Spaceship
      @JvmName("getBestShip")
      get() = _builder.bestShip
      @JvmName("setBestShip")
      set(value) {
        _builder.bestShip = value
      }
    /**
     * `optional .ei.MissionInfo.Spaceship best_ship = 4;`
     */
    public fun clearBestShip() {
      _builder.clearBestShip()
    }
    /**
     * `optional .ei.MissionInfo.Spaceship best_ship = 4;`
     * @return Whether the bestShip field is set.
     */
    public fun hasBestShip(): kotlin.Boolean {
      return _builder.hasBestShip()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.CollectSeasonArtifactRewardsRequest.copy(block: `ei`.CollectSeasonArtifactRewardsRequestKt.Dsl.() -> kotlin.Unit): ei.Ei.CollectSeasonArtifactRewardsRequest =
  `ei`.CollectSeasonArtifactRewardsRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val ei.Ei.CollectSeasonArtifactRewardsRequestOrBuilder.rinfoOrNull: ei.Ei.BasicRequestInfo?
  get() = if (hasRinfo()) getRinfo() else null

