// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ei.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ei;

@kotlin.jvm.JvmName("-initializeaccountTransferPayload")
public inline fun accountTransferPayload(block: ei.AccountTransferPayloadKt.Dsl.() -> kotlin.Unit): ei.Ei.AccountTransferPayload =
  ei.AccountTransferPayloadKt.Dsl._create(ei.Ei.AccountTransferPayload.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ei.AccountTransferPayload`
 */
public object AccountTransferPayloadKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.AccountTransferPayload.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.AccountTransferPayload.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ei.Ei.AccountTransferPayload = _builder.build()

    /**
     * `optional string from_id = 1;`
     */
    public var fromId: kotlin.String
      @kotlin.jvm.JvmName("getFromId")
        get() = _builder.fromId
      @kotlin.jvm.JvmName("setFromId")
        set(value) {
        _builder.fromId = value
      }
    /**
     * <code>optional string from_id = 1;</code>
     * @return This builder for chaining.
     */
    public fun clearFromId() {
      _builder.clearFromId()
    }
    /**
     * <code>optional string from_id = 1;</code>
     * @return Whether the fromId field is set.
     * @return This builder for chaining.
     */
    public fun hasFromId(): kotlin.Boolean {
      return _builder.hasFromId()
    }

    /**
     * `optional string to_ei_user_id = 2;`
     */
    public var toEiUserId: kotlin.String
      @kotlin.jvm.JvmName("getToEiUserId")
        get() = _builder.toEiUserId
      @kotlin.jvm.JvmName("setToEiUserId")
        set(value) {
        _builder.toEiUserId = value
      }
    /**
     * <code>optional string to_ei_user_id = 2;</code>
     * @return This builder for chaining.
     */
    public fun clearToEiUserId() {
      _builder.clearToEiUserId()
    }
    /**
     * <code>optional string to_ei_user_id = 2;</code>
     * @return Whether the toEiUserId field is set.
     * @return This builder for chaining.
     */
    public fun hasToEiUserId(): kotlin.Boolean {
      return _builder.hasToEiUserId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.AccountTransferPayload.copy(block: `ei`.AccountTransferPayloadKt.Dsl.() -> kotlin.Unit): ei.Ei.AccountTransferPayload =
  `ei`.AccountTransferPayloadKt.Dsl._create(this.toBuilder()).apply { block() }._build()

