// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ei.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ei;

@kotlin.jvm.JvmName("-initializecontractSimPollResponse")
public inline fun contractSimPollResponse(block: ei.ContractSimPollResponseKt.Dsl.() -> kotlin.Unit): ei.Ei.ContractSimPollResponse =
  ei.ContractSimPollResponseKt.Dsl._create(ei.Ei.ContractSimPollResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ei.ContractSimPollResponse`
 */
public object ContractSimPollResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.ContractSimPollResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.ContractSimPollResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ei.Ei.ContractSimPollResponse = _builder.build()

    /**
     * `optional .ei.Contract contract_to_simulate = 1;`
     */
    public var contractToSimulate: ei.Ei.Contract
      @JvmName("getContractToSimulate")
      get() = _builder.contractToSimulate
      @JvmName("setContractToSimulate")
      set(value) {
        _builder.contractToSimulate = value
      }
    /**
     * `optional .ei.Contract contract_to_simulate = 1;`
     */
    public fun clearContractToSimulate() {
      _builder.clearContractToSimulate()
    }
    /**
     * `optional .ei.Contract contract_to_simulate = 1;`
     * @return Whether the contractToSimulate field is set.
     */
    public fun hasContractToSimulate(): kotlin.Boolean {
      return _builder.hasContractToSimulate()
    }

    public val ContractSimPollResponseKt.Dsl.contractToSimulateOrNull: ei.Ei.Contract?
      get() = _builder.contractToSimulateOrNull

    /**
     * `optional .ei.ContractSimConfig sim_config = 2;`
     */
    public var simConfig: ei.Ei.ContractSimConfig
      @JvmName("getSimConfig")
      get() = _builder.simConfig
      @JvmName("setSimConfig")
      set(value) {
        _builder.simConfig = value
      }
    /**
     * `optional .ei.ContractSimConfig sim_config = 2;`
     */
    public fun clearSimConfig() {
      _builder.clearSimConfig()
    }
    /**
     * `optional .ei.ContractSimConfig sim_config = 2;`
     * @return Whether the simConfig field is set.
     */
    public fun hasSimConfig(): kotlin.Boolean {
      return _builder.hasSimConfig()
    }

    public val ContractSimPollResponseKt.Dsl.simConfigOrNull: ei.Ei.ContractSimConfig?
      get() = _builder.simConfigOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.ContractSimPollResponse.copy(block: `ei`.ContractSimPollResponseKt.Dsl.() -> kotlin.Unit): ei.Ei.ContractSimPollResponse =
  `ei`.ContractSimPollResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val ei.Ei.ContractSimPollResponseOrBuilder.contractToSimulateOrNull: ei.Ei.Contract?
  get() = if (hasContractToSimulate()) getContractToSimulate() else null

public val ei.Ei.ContractSimPollResponseOrBuilder.simConfigOrNull: ei.Ei.ContractSimConfig?
  get() = if (hasSimConfig()) getSimConfig() else null

