// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ei.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ei;

@kotlin.jvm.JvmName("-initializesaveBackupResponse")
public inline fun saveBackupResponse(block: ei.SaveBackupResponseKt.Dsl.() -> kotlin.Unit): ei.Ei.SaveBackupResponse =
  ei.SaveBackupResponseKt.Dsl._create(ei.Ei.SaveBackupResponse.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ei.SaveBackupResponse`
 */
public object SaveBackupResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.SaveBackupResponse.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.SaveBackupResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ei.Ei.SaveBackupResponse = _builder.build()

    /**
     * `optional bool success = 1;`
     */
    public var success: kotlin.Boolean
      @kotlin.jvm.JvmName("getSuccess")
        get() = _builder.success
      @kotlin.jvm.JvmName("setSuccess")
        set(value) {
        _builder.success = value
      }
    /**
     * <code>optional bool success = 1;</code>
     * @return This builder for chaining.
     */
    public fun clearSuccess() {
      _builder.clearSuccess()
    }
    /**
     * <code>optional bool success = 1;</code>
     * @return Whether the success field is set.
     * @return This builder for chaining.
     */
    public fun hasSuccess(): kotlin.Boolean {
      return _builder.hasSuccess()
    }

    /**
     * `optional uint32 error_code = 2;`
     */
    public var errorCode: kotlin.Int
      @kotlin.jvm.JvmName("getErrorCode")
        get() = _builder.errorCode
      @kotlin.jvm.JvmName("setErrorCode")
        set(value) {
        _builder.errorCode = value
      }
    /**
     * <code>optional uint32 error_code = 2;</code>
     * @return This builder for chaining.
     */
    public fun clearErrorCode() {
      _builder.clearErrorCode()
    }
    /**
     * <code>optional uint32 error_code = 2;</code>
     * @return Whether the errorCode field is set.
     * @return This builder for chaining.
     */
    public fun hasErrorCode(): kotlin.Boolean {
      return _builder.hasErrorCode()
    }

    /**
     * `optional string message = 3;`
     */
    public var message: kotlin.String
      @kotlin.jvm.JvmName("getMessage")
        get() = _builder.message
      @kotlin.jvm.JvmName("setMessage")
        set(value) {
        _builder.message = value
      }
    /**
     * <code>optional string message = 3;</code>
     * @return This builder for chaining.
     */
    public fun clearMessage() {
      _builder.clearMessage()
    }
    /**
     * <code>optional string message = 3;</code>
     * @return Whether the message field is set.
     * @return This builder for chaining.
     */
    public fun hasMessage(): kotlin.Boolean {
      return _builder.hasMessage()
    }

    /**
     * `optional .ei.Backup existing_backup = 4;`
     */
    public var existingBackup: ei.Ei.Backup
      @kotlin.jvm.JvmName("getExistingBackup")
        get() = _builder.existingBackup
      @kotlin.jvm.JvmName("setExistingBackup")
        set(value) {
        _builder.existingBackup = value
      }
    /**
     * <code>optional .ei.Backup existing_backup = 4;</code>
     * @return This builder for chaining.
     */
    public fun clearExistingBackup() {
      _builder.clearExistingBackup()
    }
    /**
     * <code>optional .ei.Backup existing_backup = 4;</code>
     * @return Whether the existingBackup field is set.
     * @return This builder for chaining.
     */
    public fun hasExistingBackup(): kotlin.Boolean {
      return _builder.hasExistingBackup()
    }

    public val SaveBackupResponseKt.Dsl.existingBackupOrNull: ei.Ei.Backup?
      get() = _builder.existingBackupOrNull
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.SaveBackupResponse.copy(block: `ei`.SaveBackupResponseKt.Dsl.() -> kotlin.Unit): ei.Ei.SaveBackupResponse =
  `ei`.SaveBackupResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

public val ei.Ei.SaveBackupResponseOrBuilder.existingBackupOrNull: ei.Ei.Backup?
  get() = if (hasExistingBackup()) getExistingBackup() else null

