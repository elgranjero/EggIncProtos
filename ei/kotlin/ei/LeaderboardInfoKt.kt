// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ei.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ei;

@kotlin.jvm.JvmName("-initializeleaderboardInfo")
public inline fun leaderboardInfo(block: ei.LeaderboardInfoKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardInfo =
  ei.LeaderboardInfoKt.Dsl._create(ei.Ei.LeaderboardInfo.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ei.LeaderboardInfo`
 */
public object LeaderboardInfoKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.LeaderboardInfo.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.LeaderboardInfo.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ei.Ei.LeaderboardInfo = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class SeasonsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .ei.LeaderboardInfo.Season seasons = 1;`
     */
     public val seasons: com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardInfo.Season, SeasonsProxy>
      @kotlin.jvm.JvmSynthetic
  get() = com.google.protobuf.kotlin.DslList(
        _builder.seasonsList
      )
    /**
     * <code>repeated .ei.LeaderboardInfo.Season seasons = 1;</code>
     * @param value The seasons to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addSeasons")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardInfo.Season, SeasonsProxy>.add(value: ei.Ei.LeaderboardInfo.Season) {
      _builder.addSeasons(value)
    }
    /**
     * <code>repeated .ei.LeaderboardInfo.Season seasons = 1;</code>
     * @param value The seasons to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignSeasons")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardInfo.Season, SeasonsProxy>.plusAssign(value: ei.Ei.LeaderboardInfo.Season) {
      add(value)
    }
    /**
     * <code>repeated .ei.LeaderboardInfo.Season seasons = 1;</code>
     * @param values The seasons to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllSeasons")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardInfo.Season, SeasonsProxy>.addAll(values: kotlin.collections.Iterable<ei.Ei.LeaderboardInfo.Season>) {
      _builder.addAllSeasons(values)
    }
    /**
     * <code>repeated .ei.LeaderboardInfo.Season seasons = 1;</code>
     * @param values The seasons to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllSeasons")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardInfo.Season, SeasonsProxy>.plusAssign(values: kotlin.collections.Iterable<ei.Ei.LeaderboardInfo.Season>) {
      addAll(values)
    }
    /**
     * <code>repeated .ei.LeaderboardInfo.Season seasons = 1;</code>
     * @param index The index to set the value at.
     * @param value The seasons to set.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setSeasons")
    public operator fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardInfo.Season, SeasonsProxy>.set(index: kotlin.Int, value: ei.Ei.LeaderboardInfo.Season) {
      _builder.setSeasons(index, value)
    }
    /**
     * <code>repeated .ei.LeaderboardInfo.Season seasons = 1;</code>
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("clearSeasons")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardInfo.Season, SeasonsProxy>.clear() {
      _builder.clearSeasons()
    }

    /**
     * `optional string all_time_scope = 2;`
     */
    public var allTimeScope: kotlin.String
      @kotlin.jvm.JvmName("getAllTimeScope")
        get() = _builder.allTimeScope
      @kotlin.jvm.JvmName("setAllTimeScope")
        set(value) {
        _builder.allTimeScope = value
      }
    /**
     * <code>optional string all_time_scope = 2;</code>
     * @return This builder for chaining.
     */
    public fun clearAllTimeScope() {
      _builder.clearAllTimeScope()
    }
    /**
     * <code>optional string all_time_scope = 2;</code>
     * @return Whether the allTimeScope field is set.
     * @return This builder for chaining.
     */
    public fun hasAllTimeScope(): kotlin.Boolean {
      return _builder.hasAllTimeScope()
    }
  }
  @kotlin.jvm.JvmName("-initializeseason")
  public inline fun season(block: ei.LeaderboardInfoKt.SeasonKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardInfo.Season =
    ei.LeaderboardInfoKt.SeasonKt.Dsl._create(ei.Ei.LeaderboardInfo.Season.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `ei.LeaderboardInfo.Season`
   */
  public object SeasonKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: ei.Ei.LeaderboardInfo.Season.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: ei.Ei.LeaderboardInfo.Season.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): ei.Ei.LeaderboardInfo.Season = _builder.build()

      /**
       * `optional string scope = 1;`
       */
      public var scope: kotlin.String
        @kotlin.jvm.JvmName("getScope")
          get() = _builder.scope
        @kotlin.jvm.JvmName("setScope")
          set(value) {
          _builder.scope = value
        }
      /**
       * <code>optional string scope = 1;</code>
       * @return This builder for chaining.
       */
      public fun clearScope() {
        _builder.clearScope()
      }
      /**
       * <code>optional string scope = 1;</code>
       * @return Whether the scope field is set.
       * @return This builder for chaining.
       */
      public fun hasScope(): kotlin.Boolean {
        return _builder.hasScope()
      }

      /**
       * `optional string name = 2;`
       */
      public var name: kotlin.String
        @kotlin.jvm.JvmName("getName")
          get() = _builder.name
        @kotlin.jvm.JvmName("setName")
          set(value) {
          _builder.name = value
        }
      /**
       * <code>optional string name = 2;</code>
       * @return This builder for chaining.
       */
      public fun clearName() {
        _builder.clearName()
      }
      /**
       * <code>optional string name = 2;</code>
       * @return Whether the name field is set.
       * @return This builder for chaining.
       */
      public fun hasName(): kotlin.Boolean {
        return _builder.hasName()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.LeaderboardInfo.copy(block: `ei`.LeaderboardInfoKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardInfo =
  `ei`.LeaderboardInfoKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.LeaderboardInfo.Season.copy(block: `ei`.LeaderboardInfoKt.SeasonKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardInfo.Season =
  `ei`.LeaderboardInfoKt.SeasonKt.Dsl._create(this.toBuilder()).apply { block() }._build()

