// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ei.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ei;

@kotlin.jvm.JvmName("-initializecontractSeasonInfos")
public inline fun contractSeasonInfos(block: ei.ContractSeasonInfosKt.Dsl.() -> kotlin.Unit): ei.Ei.ContractSeasonInfos =
  ei.ContractSeasonInfosKt.Dsl._create(ei.Ei.ContractSeasonInfos.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ei.ContractSeasonInfos`
 */
public object ContractSeasonInfosKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.ContractSeasonInfos.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.ContractSeasonInfos.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ei.Ei.ContractSeasonInfos = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class InfosProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .ei.ContractSeasonInfo infos = 1;`
     */
     public val infos: com.google.protobuf.kotlin.DslList<ei.Ei.ContractSeasonInfo, InfosProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.infosList
      )
    /**
     * `repeated .ei.ContractSeasonInfo infos = 1;`
     * @param value The infos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addInfos")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.ContractSeasonInfo, InfosProxy>.add(value: ei.Ei.ContractSeasonInfo) {
      _builder.addInfos(value)
    }
    /**
     * `repeated .ei.ContractSeasonInfo infos = 1;`
     * @param value The infos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignInfos")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.ContractSeasonInfo, InfosProxy>.plusAssign(value: ei.Ei.ContractSeasonInfo) {
      add(value)
    }
    /**
     * `repeated .ei.ContractSeasonInfo infos = 1;`
     * @param values The infos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllInfos")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.ContractSeasonInfo, InfosProxy>.addAll(values: kotlin.collections.Iterable<ei.Ei.ContractSeasonInfo>) {
      _builder.addAllInfos(values)
    }
    /**
     * `repeated .ei.ContractSeasonInfo infos = 1;`
     * @param values The infos to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllInfos")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.ContractSeasonInfo, InfosProxy>.plusAssign(values: kotlin.collections.Iterable<ei.Ei.ContractSeasonInfo>) {
      addAll(values)
    }
    /**
     * `repeated .ei.ContractSeasonInfo infos = 1;`
     * @param index The index to set the value at.
     * @param value The infos to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setInfos")
    public operator fun com.google.protobuf.kotlin.DslList<ei.Ei.ContractSeasonInfo, InfosProxy>.set(index: kotlin.Int, value: ei.Ei.ContractSeasonInfo) {
      _builder.setInfos(index, value)
    }
    /**
     * `repeated .ei.ContractSeasonInfo infos = 1;`
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearInfos")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.ContractSeasonInfo, InfosProxy>.clear() {
      _builder.clearInfos()
    }

  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.ContractSeasonInfos.copy(block: `ei`.ContractSeasonInfosKt.Dsl.() -> kotlin.Unit): ei.Ei.ContractSeasonInfos =
  `ei`.ContractSeasonInfosKt.Dsl._create(this.toBuilder()).apply { block() }._build()

