// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: ei.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package ei;

@kotlin.jvm.JvmName("-initializeleaderboardAnalysis")
public inline fun leaderboardAnalysis(block: ei.LeaderboardAnalysisKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardAnalysis =
  ei.LeaderboardAnalysisKt.Dsl._create(ei.Ei.LeaderboardAnalysis.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `ei.LeaderboardAnalysis`
 */
public object LeaderboardAnalysisKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: ei.Ei.LeaderboardAnalysis.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
      internal fun _create(builder: ei.Ei.LeaderboardAnalysis.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
    internal fun _build(): ei.Ei.LeaderboardAnalysis = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    public class ChunksProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * `repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;`
     */
     public val chunks: com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardAnalysis.Chunk, ChunksProxy>
      @kotlin.jvm.JvmSynthetic
  get() = com.google.protobuf.kotlin.DslList(
        _builder.chunksList
      )
    /**
     * <code>repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;</code>
     * @param value The chunks to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addChunks")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardAnalysis.Chunk, ChunksProxy>.add(value: ei.Ei.LeaderboardAnalysis.Chunk) {
      _builder.addChunks(value)
    }
    /**
     * <code>repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;</code>
     * @param value The chunks to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignChunks")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardAnalysis.Chunk, ChunksProxy>.plusAssign(value: ei.Ei.LeaderboardAnalysis.Chunk) {
      add(value)
    }
    /**
     * <code>repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;</code>
     * @param values The chunks to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("addAllChunks")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardAnalysis.Chunk, ChunksProxy>.addAll(values: kotlin.collections.Iterable<ei.Ei.LeaderboardAnalysis.Chunk>) {
      _builder.addAllChunks(values)
    }
    /**
     * <code>repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;</code>
     * @param values The chunks to add.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("plusAssignAllChunks")
    @Suppress("NOTHING_TO_INLINE")
    public inline operator fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardAnalysis.Chunk, ChunksProxy>.plusAssign(values: kotlin.collections.Iterable<ei.Ei.LeaderboardAnalysis.Chunk>) {
      addAll(values)
    }
    /**
     * <code>repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;</code>
     * @param index The index to set the value at.
     * @param value The chunks to set.
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("setChunks")
    public operator fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardAnalysis.Chunk, ChunksProxy>.set(index: kotlin.Int, value: ei.Ei.LeaderboardAnalysis.Chunk) {
      _builder.setChunks(index, value)
    }
    /**
     * <code>repeated .ei.LeaderboardAnalysis.Chunk chunks = 1;</code>
     * @return This builder for chaining.
     */
    @kotlin.jvm.JvmSynthetic
@kotlin.jvm.JvmName("clearChunks")
    public fun com.google.protobuf.kotlin.DslList<ei.Ei.LeaderboardAnalysis.Chunk, ChunksProxy>.clear() {
      _builder.clearChunks()
    }

    /**
     * `optional uint32 count = 2;`
     */
    public var count: kotlin.Int
      @kotlin.jvm.JvmName("getCount")
        get() = _builder.count
      @kotlin.jvm.JvmName("setCount")
        set(value) {
        _builder.count = value
      }
    /**
     * <code>optional uint32 count = 2;</code>
     * @return This builder for chaining.
     */
    public fun clearCount() {
      _builder.clearCount()
    }
    /**
     * <code>optional uint32 count = 2;</code>
     * @return Whether the count field is set.
     * @return This builder for chaining.
     */
    public fun hasCount(): kotlin.Boolean {
      return _builder.hasCount()
    }

    /**
     * `optional double high_score = 3;`
     */
    public var highScore: kotlin.Double
      @kotlin.jvm.JvmName("getHighScore")
        get() = _builder.highScore
      @kotlin.jvm.JvmName("setHighScore")
        set(value) {
        _builder.highScore = value
      }
    /**
     * <code>optional double high_score = 3;</code>
     * @return This builder for chaining.
     */
    public fun clearHighScore() {
      _builder.clearHighScore()
    }
    /**
     * <code>optional double high_score = 3;</code>
     * @return Whether the highScore field is set.
     * @return This builder for chaining.
     */
    public fun hasHighScore(): kotlin.Boolean {
      return _builder.hasHighScore()
    }

    /**
     * `optional double low_score = 4;`
     */
    public var lowScore: kotlin.Double
      @kotlin.jvm.JvmName("getLowScore")
        get() = _builder.lowScore
      @kotlin.jvm.JvmName("setLowScore")
        set(value) {
        _builder.lowScore = value
      }
    /**
     * <code>optional double low_score = 4;</code>
     * @return This builder for chaining.
     */
    public fun clearLowScore() {
      _builder.clearLowScore()
    }
    /**
     * <code>optional double low_score = 4;</code>
     * @return Whether the lowScore field is set.
     * @return This builder for chaining.
     */
    public fun hasLowScore(): kotlin.Boolean {
      return _builder.hasLowScore()
    }

    /**
     * `optional string cursor = 5;`
     */
    public var cursor: kotlin.String
      @kotlin.jvm.JvmName("getCursor")
        get() = _builder.cursor
      @kotlin.jvm.JvmName("setCursor")
        set(value) {
        _builder.cursor = value
      }
    /**
     * <code>optional string cursor = 5;</code>
     * @return This builder for chaining.
     */
    public fun clearCursor() {
      _builder.clearCursor()
    }
    /**
     * <code>optional string cursor = 5;</code>
     * @return Whether the cursor field is set.
     * @return This builder for chaining.
     */
    public fun hasCursor(): kotlin.Boolean {
      return _builder.hasCursor()
    }
  }
  @kotlin.jvm.JvmName("-initializechunk")
  public inline fun chunk(block: ei.LeaderboardAnalysisKt.ChunkKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardAnalysis.Chunk =
    ei.LeaderboardAnalysisKt.ChunkKt.Dsl._create(ei.Ei.LeaderboardAnalysis.Chunk.newBuilder()).apply { block() }._build()
  /**
   * Protobuf type `ei.LeaderboardAnalysis.Chunk`
   */
  public object ChunkKt {
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    @com.google.protobuf.kotlin.ProtoDslMarker
    public class Dsl private constructor(
      private val _builder: ei.Ei.LeaderboardAnalysis.Chunk.Builder
    ) {
      public companion object {
        @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
        internal fun _create(builder: ei.Ei.LeaderboardAnalysis.Chunk.Builder): Dsl = Dsl(builder)
      }

      @kotlin.jvm.JvmSynthetic
  @kotlin.PublishedApi
      internal fun _build(): ei.Ei.LeaderboardAnalysis.Chunk = _builder.build()

      /**
       * `optional uint32 start_index = 1;`
       */
      public var startIndex: kotlin.Int
        @kotlin.jvm.JvmName("getStartIndex")
          get() = _builder.startIndex
        @kotlin.jvm.JvmName("setStartIndex")
          set(value) {
          _builder.startIndex = value
        }
      /**
       * <code>optional uint32 start_index = 1;</code>
       * @return This builder for chaining.
       */
      public fun clearStartIndex() {
        _builder.clearStartIndex()
      }
      /**
       * <code>optional uint32 start_index = 1;</code>
       * @return Whether the startIndex field is set.
       * @return This builder for chaining.
       */
      public fun hasStartIndex(): kotlin.Boolean {
        return _builder.hasStartIndex()
      }

      /**
       * `optional uint32 end_index = 2;`
       */
      public var endIndex: kotlin.Int
        @kotlin.jvm.JvmName("getEndIndex")
          get() = _builder.endIndex
        @kotlin.jvm.JvmName("setEndIndex")
          set(value) {
          _builder.endIndex = value
        }
      /**
       * <code>optional uint32 end_index = 2;</code>
       * @return This builder for chaining.
       */
      public fun clearEndIndex() {
        _builder.clearEndIndex()
      }
      /**
       * <code>optional uint32 end_index = 2;</code>
       * @return Whether the endIndex field is set.
       * @return This builder for chaining.
       */
      public fun hasEndIndex(): kotlin.Boolean {
        return _builder.hasEndIndex()
      }

      /**
       * `optional double high_score = 3;`
       */
      public var highScore: kotlin.Double
        @kotlin.jvm.JvmName("getHighScore")
          get() = _builder.highScore
        @kotlin.jvm.JvmName("setHighScore")
          set(value) {
          _builder.highScore = value
        }
      /**
       * <code>optional double high_score = 3;</code>
       * @return This builder for chaining.
       */
      public fun clearHighScore() {
        _builder.clearHighScore()
      }
      /**
       * <code>optional double high_score = 3;</code>
       * @return Whether the highScore field is set.
       * @return This builder for chaining.
       */
      public fun hasHighScore(): kotlin.Boolean {
        return _builder.hasHighScore()
      }

      /**
       * `optional double low_score = 4;`
       */
      public var lowScore: kotlin.Double
        @kotlin.jvm.JvmName("getLowScore")
          get() = _builder.lowScore
        @kotlin.jvm.JvmName("setLowScore")
          set(value) {
          _builder.lowScore = value
        }
      /**
       * <code>optional double low_score = 4;</code>
       * @return This builder for chaining.
       */
      public fun clearLowScore() {
        _builder.clearLowScore()
      }
      /**
       * <code>optional double low_score = 4;</code>
       * @return Whether the lowScore field is set.
       * @return This builder for chaining.
       */
      public fun hasLowScore(): kotlin.Boolean {
        return _builder.hasLowScore()
      }

      /**
       * `optional string start_cursor = 5;`
       */
      public var startCursor: kotlin.String
        @kotlin.jvm.JvmName("getStartCursor")
          get() = _builder.startCursor
        @kotlin.jvm.JvmName("setStartCursor")
          set(value) {
          _builder.startCursor = value
        }
      /**
       * <code>optional string start_cursor = 5;</code>
       * @return This builder for chaining.
       */
      public fun clearStartCursor() {
        _builder.clearStartCursor()
      }
      /**
       * <code>optional string start_cursor = 5;</code>
       * @return Whether the startCursor field is set.
       * @return This builder for chaining.
       */
      public fun hasStartCursor(): kotlin.Boolean {
        return _builder.hasStartCursor()
      }

      /**
       * `optional string end_cursor = 6;`
       */
      public var endCursor: kotlin.String
        @kotlin.jvm.JvmName("getEndCursor")
          get() = _builder.endCursor
        @kotlin.jvm.JvmName("setEndCursor")
          set(value) {
          _builder.endCursor = value
        }
      /**
       * <code>optional string end_cursor = 6;</code>
       * @return This builder for chaining.
       */
      public fun clearEndCursor() {
        _builder.clearEndCursor()
      }
      /**
       * <code>optional string end_cursor = 6;</code>
       * @return Whether the endCursor field is set.
       * @return This builder for chaining.
       */
      public fun hasEndCursor(): kotlin.Boolean {
        return _builder.hasEndCursor()
      }
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.LeaderboardAnalysis.copy(block: `ei`.LeaderboardAnalysisKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardAnalysis =
  `ei`.LeaderboardAnalysisKt.Dsl._create(this.toBuilder()).apply { block() }._build()

@kotlin.jvm.JvmSynthetic
public inline fun ei.Ei.LeaderboardAnalysis.Chunk.copy(block: `ei`.LeaderboardAnalysisKt.ChunkKt.Dsl.() -> kotlin.Unit): ei.Ei.LeaderboardAnalysis.Chunk =
  `ei`.LeaderboardAnalysisKt.ChunkKt.Dsl._create(this.toBuilder()).apply { block() }._build()

