// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.28.3
// source: go/ei.proto

package ei

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Platform int32

const (
	Platform_UNKNOWN_PLATFORM Platform = 0
	Platform_IOS              Platform = 1
	Platform_DROID            Platform = 2
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "UNKNOWN_PLATFORM",
		1: "IOS",
		2: "DROID",
	}
	Platform_value = map[string]int32{
		"UNKNOWN_PLATFORM": 0,
		"IOS":              1,
		"DROID":            2,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[0].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[0]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Platform) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Platform(num)
	return nil
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{0}
}

type DeviceFormFactor int32

const (
	DeviceFormFactor_UNKNOWN_DEVICE DeviceFormFactor = 0
	DeviceFormFactor_PHONE          DeviceFormFactor = 1
	DeviceFormFactor_TABLET         DeviceFormFactor = 2
)

// Enum value maps for DeviceFormFactor.
var (
	DeviceFormFactor_name = map[int32]string{
		0: "UNKNOWN_DEVICE",
		1: "PHONE",
		2: "TABLET",
	}
	DeviceFormFactor_value = map[string]int32{
		"UNKNOWN_DEVICE": 0,
		"PHONE":          1,
		"TABLET":         2,
	}
)

func (x DeviceFormFactor) Enum() *DeviceFormFactor {
	p := new(DeviceFormFactor)
	*p = x
	return p
}

func (x DeviceFormFactor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceFormFactor) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[1].Descriptor()
}

func (DeviceFormFactor) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[1]
}

func (x DeviceFormFactor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DeviceFormFactor) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DeviceFormFactor(num)
	return nil
}

// Deprecated: Use DeviceFormFactor.Descriptor instead.
func (DeviceFormFactor) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{1}
}

type AdNetwork int32

const (
	AdNetwork_VUNGLE     AdNetwork = 0
	AdNetwork_CHARTBOOST AdNetwork = 1
	AdNetwork_AD_COLONY  AdNetwork = 2
	AdNetwork_HYPER_MX   AdNetwork = 3
	AdNetwork_UNITY      AdNetwork = 4
	AdNetwork_FACEBOOK   AdNetwork = 5
	AdNetwork_APPLOVIN   AdNetwork = 6
)

// Enum value maps for AdNetwork.
var (
	AdNetwork_name = map[int32]string{
		0: "VUNGLE",
		1: "CHARTBOOST",
		2: "AD_COLONY",
		3: "HYPER_MX",
		4: "UNITY",
		5: "FACEBOOK",
		6: "APPLOVIN",
	}
	AdNetwork_value = map[string]int32{
		"VUNGLE":     0,
		"CHARTBOOST": 1,
		"AD_COLONY":  2,
		"HYPER_MX":   3,
		"UNITY":      4,
		"FACEBOOK":   5,
		"APPLOVIN":   6,
	}
)

func (x AdNetwork) Enum() *AdNetwork {
	p := new(AdNetwork)
	*p = x
	return p
}

func (x AdNetwork) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdNetwork) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[2].Descriptor()
}

func (AdNetwork) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[2]
}

func (x AdNetwork) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *AdNetwork) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = AdNetwork(num)
	return nil
}

// Deprecated: Use AdNetwork.Descriptor instead.
func (AdNetwork) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2}
}

type Egg int32

const (
	Egg_EDIBLE         Egg = 1
	Egg_SUPERFOOD      Egg = 2
	Egg_MEDICAL        Egg = 3
	Egg_ROCKET_FUEL    Egg = 4
	Egg_SUPER_MATERIAL Egg = 5
	Egg_FUSION         Egg = 6
	Egg_QUANTUM        Egg = 7
	Egg_IMMORTALITY    Egg = 8
	Egg_TACHYON        Egg = 9
	Egg_GRAVITON       Egg = 10
	Egg_DILITHIUM      Egg = 11
	Egg_PRODIGY        Egg = 12
	Egg_TERRAFORM      Egg = 13
	Egg_ANTIMATTER     Egg = 14
	Egg_DARK_MATTER    Egg = 15
	Egg_AI             Egg = 16
	Egg_NEBULA         Egg = 17
	Egg_UNIVERSE       Egg = 18
	Egg_ENLIGHTENMENT  Egg = 19
	Egg_CHOCOLATE      Egg = 100
	Egg_EASTER         Egg = 101
	Egg_WATERBALLOON   Egg = 102
	Egg_FIREWORK       Egg = 103
	Egg_PUMPKIN        Egg = 104
	Egg_CUSTOM_EGG     Egg = 200
	Egg_UNKNOWN        Egg = 1000
)

// Enum value maps for Egg.
var (
	Egg_name = map[int32]string{
		1:    "EDIBLE",
		2:    "SUPERFOOD",
		3:    "MEDICAL",
		4:    "ROCKET_FUEL",
		5:    "SUPER_MATERIAL",
		6:    "FUSION",
		7:    "QUANTUM",
		8:    "IMMORTALITY",
		9:    "TACHYON",
		10:   "GRAVITON",
		11:   "DILITHIUM",
		12:   "PRODIGY",
		13:   "TERRAFORM",
		14:   "ANTIMATTER",
		15:   "DARK_MATTER",
		16:   "AI",
		17:   "NEBULA",
		18:   "UNIVERSE",
		19:   "ENLIGHTENMENT",
		100:  "CHOCOLATE",
		101:  "EASTER",
		102:  "WATERBALLOON",
		103:  "FIREWORK",
		104:  "PUMPKIN",
		200:  "CUSTOM_EGG",
		1000: "UNKNOWN",
	}
	Egg_value = map[string]int32{
		"EDIBLE":         1,
		"SUPERFOOD":      2,
		"MEDICAL":        3,
		"ROCKET_FUEL":    4,
		"SUPER_MATERIAL": 5,
		"FUSION":         6,
		"QUANTUM":        7,
		"IMMORTALITY":    8,
		"TACHYON":        9,
		"GRAVITON":       10,
		"DILITHIUM":      11,
		"PRODIGY":        12,
		"TERRAFORM":      13,
		"ANTIMATTER":     14,
		"DARK_MATTER":    15,
		"AI":             16,
		"NEBULA":         17,
		"UNIVERSE":       18,
		"ENLIGHTENMENT":  19,
		"CHOCOLATE":      100,
		"EASTER":         101,
		"WATERBALLOON":   102,
		"FIREWORK":       103,
		"PUMPKIN":        104,
		"CUSTOM_EGG":     200,
		"UNKNOWN":        1000,
	}
)

func (x Egg) Enum() *Egg {
	p := new(Egg)
	*p = x
	return p
}

func (x Egg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Egg) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[3].Descriptor()
}

func (Egg) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[3]
}

func (x Egg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Egg) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Egg(num)
	return nil
}

// Deprecated: Use Egg.Descriptor instead.
func (Egg) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{3}
}

type FarmType int32

const (
	FarmType_EMPTY    FarmType = 1
	FarmType_HOME     FarmType = 2
	FarmType_CONTRACT FarmType = 3
)

// Enum value maps for FarmType.
var (
	FarmType_name = map[int32]string{
		1: "EMPTY",
		2: "HOME",
		3: "CONTRACT",
	}
	FarmType_value = map[string]int32{
		"EMPTY":    1,
		"HOME":     2,
		"CONTRACT": 3,
	}
)

func (x FarmType) Enum() *FarmType {
	p := new(FarmType)
	*p = x
	return p
}

func (x FarmType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FarmType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[4].Descriptor()
}

func (FarmType) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[4]
}

func (x FarmType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FarmType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FarmType(num)
	return nil
}

// Deprecated: Use FarmType.Descriptor instead.
func (FarmType) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{4}
}

type GoalType int32

const (
	GoalType_EGGS_LAID    GoalType = 1
	GoalType_UNKNOWN_GOAL GoalType = 100
)

// Enum value maps for GoalType.
var (
	GoalType_name = map[int32]string{
		1:   "EGGS_LAID",
		100: "UNKNOWN_GOAL",
	}
	GoalType_value = map[string]int32{
		"EGGS_LAID":    1,
		"UNKNOWN_GOAL": 100,
	}
)

func (x GoalType) Enum() *GoalType {
	p := new(GoalType)
	*p = x
	return p
}

func (x GoalType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[5].Descriptor()
}

func (GoalType) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[5]
}

func (x GoalType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GoalType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GoalType(num)
	return nil
}

// Deprecated: Use GoalType.Descriptor instead.
func (GoalType) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{5}
}

type RewardType int32

const (
	RewardType_CASH               RewardType = 1
	RewardType_GOLD               RewardType = 2
	RewardType_SOUL_EGGS          RewardType = 3
	RewardType_EGGS_OF_PROPHECY   RewardType = 4
	RewardType_EPIC_RESEARCH_ITEM RewardType = 5
	RewardType_PIGGY_FILL         RewardType = 6
	RewardType_PIGGY_MULTIPLIER   RewardType = 7
	RewardType_PIGGY_LEVEL_BUMP   RewardType = 8
	RewardType_BOOST              RewardType = 9
	RewardType_BOOST_TOKEN        RewardType = 10
	RewardType_ARTIFACT           RewardType = 11
	RewardType_ARTIFACT_CASE      RewardType = 12
	RewardType_CHICKEN            RewardType = 13
	RewardType_SHELL_SCRIPT       RewardType = 14
	RewardType_UNKNOWN_REWARD     RewardType = 100
)

// Enum value maps for RewardType.
var (
	RewardType_name = map[int32]string{
		1:   "CASH",
		2:   "GOLD",
		3:   "SOUL_EGGS",
		4:   "EGGS_OF_PROPHECY",
		5:   "EPIC_RESEARCH_ITEM",
		6:   "PIGGY_FILL",
		7:   "PIGGY_MULTIPLIER",
		8:   "PIGGY_LEVEL_BUMP",
		9:   "BOOST",
		10:  "BOOST_TOKEN",
		11:  "ARTIFACT",
		12:  "ARTIFACT_CASE",
		13:  "CHICKEN",
		14:  "SHELL_SCRIPT",
		100: "UNKNOWN_REWARD",
	}
	RewardType_value = map[string]int32{
		"CASH":               1,
		"GOLD":               2,
		"SOUL_EGGS":          3,
		"EGGS_OF_PROPHECY":   4,
		"EPIC_RESEARCH_ITEM": 5,
		"PIGGY_FILL":         6,
		"PIGGY_MULTIPLIER":   7,
		"PIGGY_LEVEL_BUMP":   8,
		"BOOST":              9,
		"BOOST_TOKEN":        10,
		"ARTIFACT":           11,
		"ARTIFACT_CASE":      12,
		"CHICKEN":            13,
		"SHELL_SCRIPT":       14,
		"UNKNOWN_REWARD":     100,
	}
)

func (x RewardType) Enum() *RewardType {
	p := new(RewardType)
	*p = x
	return p
}

func (x RewardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[6].Descriptor()
}

func (RewardType) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[6]
}

func (x RewardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RewardType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RewardType(num)
	return nil
}

// Deprecated: Use RewardType.Descriptor instead.
func (RewardType) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{6}
}

type UILocation int32

const (
	UILocation_NONE            UILocation = 0
	UILocation_SHOP            UILocation = 1
	UILocation_BOOST_SHOP      UILocation = 2
	UILocation_PIGGY           UILocation = 3
	UILocation_PRO_PERMIT      UILocation = 4
	UILocation_ULTRA_SHOP      UILocation = 10
	UILocation_SHELLS          UILocation = 5
	UILocation_SHELL_SETS      UILocation = 6
	UILocation_SHELLS_SHOWCASE UILocation = 12
	UILocation_CHICKENS        UILocation = 7
	UILocation_CHICKEN_HATS    UILocation = 11
	UILocation_EPIC_RESEARCH   UILocation = 8
	UILocation_SETTINGS        UILocation = 9
	UILocation_HELP            UILocation = 13
	UILocation_UNIVERSITY      UILocation = 14
)

// Enum value maps for UILocation.
var (
	UILocation_name = map[int32]string{
		0:  "NONE",
		1:  "SHOP",
		2:  "BOOST_SHOP",
		3:  "PIGGY",
		4:  "PRO_PERMIT",
		10: "ULTRA_SHOP",
		5:  "SHELLS",
		6:  "SHELL_SETS",
		12: "SHELLS_SHOWCASE",
		7:  "CHICKENS",
		11: "CHICKEN_HATS",
		8:  "EPIC_RESEARCH",
		9:  "SETTINGS",
		13: "HELP",
		14: "UNIVERSITY",
	}
	UILocation_value = map[string]int32{
		"NONE":            0,
		"SHOP":            1,
		"BOOST_SHOP":      2,
		"PIGGY":           3,
		"PRO_PERMIT":      4,
		"ULTRA_SHOP":      10,
		"SHELLS":          5,
		"SHELL_SETS":      6,
		"SHELLS_SHOWCASE": 12,
		"CHICKENS":        7,
		"CHICKEN_HATS":    11,
		"EPIC_RESEARCH":   8,
		"SETTINGS":        9,
		"HELP":            13,
		"UNIVERSITY":      14,
	}
)

func (x UILocation) Enum() *UILocation {
	p := new(UILocation)
	*p = x
	return p
}

func (x UILocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UILocation) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[7].Descriptor()
}

func (UILocation) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[7]
}

func (x UILocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UILocation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UILocation(num)
	return nil
}

// Deprecated: Use UILocation.Descriptor instead.
func (UILocation) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{7}
}

type UserType int32

const (
	UserType_ALL_USERS          UserType = 0
	UserType_EGGED_UP           UserType = 15
	UserType_CONTRACTS_UNLOCKED UserType = 1
	UserType_ARTIFACTS_UNLOCKED UserType = 3
	UserType_FUEL_TANK_UNLOCKED UserType = 4
	UserType_PRO_PERMIT_ACTIVE  UserType = 5
	UserType_ULTRA_ACTIVE       UserType = 6
	UserType_NO_PRO_PERMIT      UserType = 7
	UserType_NO_ULTRA           UserType = 8
	UserType_CONTRACTS_INACTIVE UserType = 9
	UserType_CONTRACTS_ACTIVE   UserType = 10
	UserType_PLAYING_CONTRACT   UserType = 11
	UserType_ARTIFACTS_INACTIVE UserType = 12
	UserType_ARTIFACTS_ACTIVE   UserType = 13
	UserType_PRESTIGE_READY     UserType = 14
	UserType_PIGGY_HESITANT     UserType = 16
)

// Enum value maps for UserType.
var (
	UserType_name = map[int32]string{
		0:  "ALL_USERS",
		15: "EGGED_UP",
		1:  "CONTRACTS_UNLOCKED",
		3:  "ARTIFACTS_UNLOCKED",
		4:  "FUEL_TANK_UNLOCKED",
		5:  "PRO_PERMIT_ACTIVE",
		6:  "ULTRA_ACTIVE",
		7:  "NO_PRO_PERMIT",
		8:  "NO_ULTRA",
		9:  "CONTRACTS_INACTIVE",
		10: "CONTRACTS_ACTIVE",
		11: "PLAYING_CONTRACT",
		12: "ARTIFACTS_INACTIVE",
		13: "ARTIFACTS_ACTIVE",
		14: "PRESTIGE_READY",
		16: "PIGGY_HESITANT",
	}
	UserType_value = map[string]int32{
		"ALL_USERS":          0,
		"EGGED_UP":           15,
		"CONTRACTS_UNLOCKED": 1,
		"ARTIFACTS_UNLOCKED": 3,
		"FUEL_TANK_UNLOCKED": 4,
		"PRO_PERMIT_ACTIVE":  5,
		"ULTRA_ACTIVE":       6,
		"NO_PRO_PERMIT":      7,
		"NO_ULTRA":           8,
		"CONTRACTS_INACTIVE": 9,
		"CONTRACTS_ACTIVE":   10,
		"PLAYING_CONTRACT":   11,
		"ARTIFACTS_INACTIVE": 12,
		"ARTIFACTS_ACTIVE":   13,
		"PRESTIGE_READY":     14,
		"PIGGY_HESITANT":     16,
	}
)

func (x UserType) Enum() *UserType {
	p := new(UserType)
	*p = x
	return p
}

func (x UserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[8].Descriptor()
}

func (UserType) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[8]
}

func (x UserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserType(num)
	return nil
}

// Deprecated: Use UserType.Descriptor instead.
func (UserType) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{8}
}

type LeaderboardScope int32

const (
	LeaderboardScope_ALL_TIME       LeaderboardScope = 0
	LeaderboardScope_CURRENT_SEASON LeaderboardScope = 1
)

// Enum value maps for LeaderboardScope.
var (
	LeaderboardScope_name = map[int32]string{
		0: "ALL_TIME",
		1: "CURRENT_SEASON",
	}
	LeaderboardScope_value = map[string]int32{
		"ALL_TIME":       0,
		"CURRENT_SEASON": 1,
	}
)

func (x LeaderboardScope) Enum() *LeaderboardScope {
	p := new(LeaderboardScope)
	*p = x
	return p
}

func (x LeaderboardScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaderboardScope) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[9].Descriptor()
}

func (LeaderboardScope) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[9]
}

func (x LeaderboardScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LeaderboardScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LeaderboardScope(num)
	return nil
}

// Deprecated: Use LeaderboardScope.Descriptor instead.
func (LeaderboardScope) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{9}
}

type EggIncFirstContactResponse_ErrorCodes int32

const (
	EggIncFirstContactResponse_NO_ERROR                 EggIncFirstContactResponse_ErrorCodes = 0
	EggIncFirstContactResponse_EXISTING_USER_W_GAMER_ID EggIncFirstContactResponse_ErrorCodes = 1
	EggIncFirstContactResponse_USER_NOT_FOUND           EggIncFirstContactResponse_ErrorCodes = 2
	EggIncFirstContactResponse_BACKUP_CONFLICT          EggIncFirstContactResponse_ErrorCodes = 3
)

// Enum value maps for EggIncFirstContactResponse_ErrorCodes.
var (
	EggIncFirstContactResponse_ErrorCodes_name = map[int32]string{
		0: "NO_ERROR",
		1: "EXISTING_USER_W_GAMER_ID",
		2: "USER_NOT_FOUND",
		3: "BACKUP_CONFLICT",
	}
	EggIncFirstContactResponse_ErrorCodes_value = map[string]int32{
		"NO_ERROR":                 0,
		"EXISTING_USER_W_GAMER_ID": 1,
		"USER_NOT_FOUND":           2,
		"BACKUP_CONFLICT":          3,
	}
)

func (x EggIncFirstContactResponse_ErrorCodes) Enum() *EggIncFirstContactResponse_ErrorCodes {
	p := new(EggIncFirstContactResponse_ErrorCodes)
	*p = x
	return p
}

func (x EggIncFirstContactResponse_ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EggIncFirstContactResponse_ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[10].Descriptor()
}

func (EggIncFirstContactResponse_ErrorCodes) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[10]
}

func (x EggIncFirstContactResponse_ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EggIncFirstContactResponse_ErrorCodes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EggIncFirstContactResponse_ErrorCodes(num)
	return nil
}

// Deprecated: Use EggIncFirstContactResponse_ErrorCodes.Descriptor instead.
func (EggIncFirstContactResponse_ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{4, 0}
}

type GameModifier_GameDimension int32

const (
	GameModifier_INVALID                GameModifier_GameDimension = 0
	GameModifier_EARNINGS               GameModifier_GameDimension = 1
	GameModifier_AWAY_EARNINGS          GameModifier_GameDimension = 2
	GameModifier_INTERNAL_HATCHERY_RATE GameModifier_GameDimension = 3
	GameModifier_EGG_LAYING_RATE        GameModifier_GameDimension = 4
	GameModifier_SHIPPING_CAPACITY      GameModifier_GameDimension = 5
	GameModifier_HAB_CAPACITY           GameModifier_GameDimension = 6
	GameModifier_VEHICLE_COST           GameModifier_GameDimension = 7
	GameModifier_HAB_COST               GameModifier_GameDimension = 8
	GameModifier_RESEARCH_COST          GameModifier_GameDimension = 9
)

// Enum value maps for GameModifier_GameDimension.
var (
	GameModifier_GameDimension_name = map[int32]string{
		0: "INVALID",
		1: "EARNINGS",
		2: "AWAY_EARNINGS",
		3: "INTERNAL_HATCHERY_RATE",
		4: "EGG_LAYING_RATE",
		5: "SHIPPING_CAPACITY",
		6: "HAB_CAPACITY",
		7: "VEHICLE_COST",
		8: "HAB_COST",
		9: "RESEARCH_COST",
	}
	GameModifier_GameDimension_value = map[string]int32{
		"INVALID":                0,
		"EARNINGS":               1,
		"AWAY_EARNINGS":          2,
		"INTERNAL_HATCHERY_RATE": 3,
		"EGG_LAYING_RATE":        4,
		"SHIPPING_CAPACITY":      5,
		"HAB_CAPACITY":           6,
		"VEHICLE_COST":           7,
		"HAB_COST":               8,
		"RESEARCH_COST":          9,
	}
)

func (x GameModifier_GameDimension) Enum() *GameModifier_GameDimension {
	p := new(GameModifier_GameDimension)
	*p = x
	return p
}

func (x GameModifier_GameDimension) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameModifier_GameDimension) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[11].Descriptor()
}

func (GameModifier_GameDimension) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[11]
}

func (x GameModifier_GameDimension) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GameModifier_GameDimension) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GameModifier_GameDimension(num)
	return nil
}

// Deprecated: Use GameModifier_GameDimension.Descriptor instead.
func (GameModifier_GameDimension) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{22, 0}
}

type Contract_PlayerGrade int32

const (
	Contract_GRADE_UNSET Contract_PlayerGrade = 0
	Contract_GRADE_C     Contract_PlayerGrade = 1
	Contract_GRADE_B     Contract_PlayerGrade = 2
	Contract_GRADE_A     Contract_PlayerGrade = 3
	Contract_GRADE_AA    Contract_PlayerGrade = 4
	Contract_GRADE_AAA   Contract_PlayerGrade = 5
)

// Enum value maps for Contract_PlayerGrade.
var (
	Contract_PlayerGrade_name = map[int32]string{
		0: "GRADE_UNSET",
		1: "GRADE_C",
		2: "GRADE_B",
		3: "GRADE_A",
		4: "GRADE_AA",
		5: "GRADE_AAA",
	}
	Contract_PlayerGrade_value = map[string]int32{
		"GRADE_UNSET": 0,
		"GRADE_C":     1,
		"GRADE_B":     2,
		"GRADE_A":     3,
		"GRADE_AA":    4,
		"GRADE_AAA":   5,
	}
)

func (x Contract_PlayerGrade) Enum() *Contract_PlayerGrade {
	p := new(Contract_PlayerGrade)
	*p = x
	return p
}

func (x Contract_PlayerGrade) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Contract_PlayerGrade) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[12].Descriptor()
}

func (Contract_PlayerGrade) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[12]
}

func (x Contract_PlayerGrade) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Contract_PlayerGrade) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Contract_PlayerGrade(num)
	return nil
}

// Deprecated: Use Contract_PlayerGrade.Descriptor instead.
func (Contract_PlayerGrade) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{24, 0}
}

type ContractPlayerInfo_Status int32

const (
	ContractPlayerInfo_UNKNOWN     ContractPlayerInfo_Status = 0
	ContractPlayerInfo_CALCULATING ContractPlayerInfo_Status = 1
	ContractPlayerInfo_OUT_OF_DATE ContractPlayerInfo_Status = 2
	ContractPlayerInfo_INCOMPLETE  ContractPlayerInfo_Status = 4
	ContractPlayerInfo_COMPLETE    ContractPlayerInfo_Status = 3
)

// Enum value maps for ContractPlayerInfo_Status.
var (
	ContractPlayerInfo_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "CALCULATING",
		2: "OUT_OF_DATE",
		4: "INCOMPLETE",
		3: "COMPLETE",
	}
	ContractPlayerInfo_Status_value = map[string]int32{
		"UNKNOWN":     0,
		"CALCULATING": 1,
		"OUT_OF_DATE": 2,
		"INCOMPLETE":  4,
		"COMPLETE":    3,
	}
)

func (x ContractPlayerInfo_Status) Enum() *ContractPlayerInfo_Status {
	p := new(ContractPlayerInfo_Status)
	*p = x
	return p
}

func (x ContractPlayerInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractPlayerInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[13].Descriptor()
}

func (ContractPlayerInfo_Status) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[13]
}

func (x ContractPlayerInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContractPlayerInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContractPlayerInfo_Status(num)
	return nil
}

// Deprecated: Use ContractPlayerInfo_Status.Descriptor instead.
func (ContractPlayerInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{29, 0}
}

type ContractEvaluation_PoorBehavior int32

const (
	ContractEvaluation_NONE                    ContractEvaluation_PoorBehavior = 0
	ContractEvaluation_LOW_CONTRIBUTION        ContractEvaluation_PoorBehavior = 1
	ContractEvaluation_BAD_CONTRIBUTION        ContractEvaluation_PoorBehavior = 2
	ContractEvaluation_DISHONORABLY_DISCHARGED ContractEvaluation_PoorBehavior = 3
	ContractEvaluation_POOR_TEAMWORK           ContractEvaluation_PoorBehavior = 4
	ContractEvaluation_ABANDONED_COOP          ContractEvaluation_PoorBehavior = 5
	ContractEvaluation_TIME_CHEAT              ContractEvaluation_PoorBehavior = 6
)

// Enum value maps for ContractEvaluation_PoorBehavior.
var (
	ContractEvaluation_PoorBehavior_name = map[int32]string{
		0: "NONE",
		1: "LOW_CONTRIBUTION",
		2: "BAD_CONTRIBUTION",
		3: "DISHONORABLY_DISCHARGED",
		4: "POOR_TEAMWORK",
		5: "ABANDONED_COOP",
		6: "TIME_CHEAT",
	}
	ContractEvaluation_PoorBehavior_value = map[string]int32{
		"NONE":                    0,
		"LOW_CONTRIBUTION":        1,
		"BAD_CONTRIBUTION":        2,
		"DISHONORABLY_DISCHARGED": 3,
		"POOR_TEAMWORK":           4,
		"ABANDONED_COOP":          5,
		"TIME_CHEAT":              6,
	}
)

func (x ContractEvaluation_PoorBehavior) Enum() *ContractEvaluation_PoorBehavior {
	p := new(ContractEvaluation_PoorBehavior)
	*p = x
	return p
}

func (x ContractEvaluation_PoorBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractEvaluation_PoorBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[14].Descriptor()
}

func (ContractEvaluation_PoorBehavior) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[14]
}

func (x ContractEvaluation_PoorBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContractEvaluation_PoorBehavior) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContractEvaluation_PoorBehavior(num)
	return nil
}

// Deprecated: Use ContractEvaluation_PoorBehavior.Descriptor instead.
func (ContractEvaluation_PoorBehavior) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{30, 0}
}

type ContractEvaluation_Status int32

const (
	ContractEvaluation_UNKNOWN    ContractEvaluation_Status = 0
	ContractEvaluation_PENDING    ContractEvaluation_Status = 1
	ContractEvaluation_EVALUATING ContractEvaluation_Status = 2
	ContractEvaluation_COMPLETE   ContractEvaluation_Status = 3
)

// Enum value maps for ContractEvaluation_Status.
var (
	ContractEvaluation_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PENDING",
		2: "EVALUATING",
		3: "COMPLETE",
	}
	ContractEvaluation_Status_value = map[string]int32{
		"UNKNOWN":    0,
		"PENDING":    1,
		"EVALUATING": 2,
		"COMPLETE":   3,
	}
)

func (x ContractEvaluation_Status) Enum() *ContractEvaluation_Status {
	p := new(ContractEvaluation_Status)
	*p = x
	return p
}

func (x ContractEvaluation_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractEvaluation_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[15].Descriptor()
}

func (ContractEvaluation_Status) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[15]
}

func (x ContractEvaluation_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContractEvaluation_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContractEvaluation_Status(num)
	return nil
}

// Deprecated: Use ContractEvaluation_Status.Descriptor instead.
func (ContractEvaluation_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{30, 1}
}

type ContractCoopStatusResponse_ResponseStatus int32

const (
	ContractCoopStatusResponse_NO_ERROR             ContractCoopStatusResponse_ResponseStatus = 0
	ContractCoopStatusResponse_MISSING_USER         ContractCoopStatusResponse_ResponseStatus = 1
	ContractCoopStatusResponse_MISSING_COOP_ID      ContractCoopStatusResponse_ResponseStatus = 2
	ContractCoopStatusResponse_MISSING_CONTRACT_ID  ContractCoopStatusResponse_ResponseStatus = 3
	ContractCoopStatusResponse_MEMBERSHIP_NOT_FOUND ContractCoopStatusResponse_ResponseStatus = 4
	ContractCoopStatusResponse_COOP_NOT_FOUND       ContractCoopStatusResponse_ResponseStatus = 5
	ContractCoopStatusResponse_CONTRACT_NOT_FOUND   ContractCoopStatusResponse_ResponseStatus = 6
	ContractCoopStatusResponse_INVALID_MEMBERSHIP   ContractCoopStatusResponse_ResponseStatus = 7
	ContractCoopStatusResponse_NO_HTTP_RESPONSE     ContractCoopStatusResponse_ResponseStatus = 500
)

// Enum value maps for ContractCoopStatusResponse_ResponseStatus.
var (
	ContractCoopStatusResponse_ResponseStatus_name = map[int32]string{
		0:   "NO_ERROR",
		1:   "MISSING_USER",
		2:   "MISSING_COOP_ID",
		3:   "MISSING_CONTRACT_ID",
		4:   "MEMBERSHIP_NOT_FOUND",
		5:   "COOP_NOT_FOUND",
		6:   "CONTRACT_NOT_FOUND",
		7:   "INVALID_MEMBERSHIP",
		500: "NO_HTTP_RESPONSE",
	}
	ContractCoopStatusResponse_ResponseStatus_value = map[string]int32{
		"NO_ERROR":             0,
		"MISSING_USER":         1,
		"MISSING_COOP_ID":      2,
		"MISSING_CONTRACT_ID":  3,
		"MEMBERSHIP_NOT_FOUND": 4,
		"COOP_NOT_FOUND":       5,
		"CONTRACT_NOT_FOUND":   6,
		"INVALID_MEMBERSHIP":   7,
		"NO_HTTP_RESPONSE":     500,
	}
)

func (x ContractCoopStatusResponse_ResponseStatus) Enum() *ContractCoopStatusResponse_ResponseStatus {
	p := new(ContractCoopStatusResponse_ResponseStatus)
	*p = x
	return p
}

func (x ContractCoopStatusResponse_ResponseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractCoopStatusResponse_ResponseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[16].Descriptor()
}

func (ContractCoopStatusResponse_ResponseStatus) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[16]
}

func (x ContractCoopStatusResponse_ResponseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContractCoopStatusResponse_ResponseStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContractCoopStatusResponse_ResponseStatus(num)
	return nil
}

// Deprecated: Use ContractCoopStatusResponse_ResponseStatus.Descriptor instead.
func (ContractCoopStatusResponse_ResponseStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{44, 0}
}

type ContractCoopStatusResponse_MemberStatus int32

const (
	ContractCoopStatusResponse_VALID           ContractCoopStatusResponse_MemberStatus = 0
	ContractCoopStatusResponse_KICKED_INACTIVE ContractCoopStatusResponse_MemberStatus = 1
	ContractCoopStatusResponse_KICKED_PRIVATE  ContractCoopStatusResponse_MemberStatus = 2
	ContractCoopStatusResponse_KICKED_CHEATS   ContractCoopStatusResponse_MemberStatus = 3
	ContractCoopStatusResponse_KICKED_LEECH    ContractCoopStatusResponse_MemberStatus = 4
)

// Enum value maps for ContractCoopStatusResponse_MemberStatus.
var (
	ContractCoopStatusResponse_MemberStatus_name = map[int32]string{
		0: "VALID",
		1: "KICKED_INACTIVE",
		2: "KICKED_PRIVATE",
		3: "KICKED_CHEATS",
		4: "KICKED_LEECH",
	}
	ContractCoopStatusResponse_MemberStatus_value = map[string]int32{
		"VALID":           0,
		"KICKED_INACTIVE": 1,
		"KICKED_PRIVATE":  2,
		"KICKED_CHEATS":   3,
		"KICKED_LEECH":    4,
	}
)

func (x ContractCoopStatusResponse_MemberStatus) Enum() *ContractCoopStatusResponse_MemberStatus {
	p := new(ContractCoopStatusResponse_MemberStatus)
	*p = x
	return p
}

func (x ContractCoopStatusResponse_MemberStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractCoopStatusResponse_MemberStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[17].Descriptor()
}

func (ContractCoopStatusResponse_MemberStatus) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[17]
}

func (x ContractCoopStatusResponse_MemberStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContractCoopStatusResponse_MemberStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContractCoopStatusResponse_MemberStatus(num)
	return nil
}

// Deprecated: Use ContractCoopStatusResponse_MemberStatus.Descriptor instead.
func (ContractCoopStatusResponse_MemberStatus) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{44, 1}
}

type ContractCoopStatusResponse_Status int32

const (
	ContractCoopStatusResponse_UNKNOWN   ContractCoopStatusResponse_Status = 0
	ContractCoopStatusResponse_LOBBY     ContractCoopStatusResponse_Status = 1
	ContractCoopStatusResponse_ACTIVE    ContractCoopStatusResponse_Status = 2
	ContractCoopStatusResponse_COMPLETE  ContractCoopStatusResponse_Status = 3
	ContractCoopStatusResponse_FINALIZED ContractCoopStatusResponse_Status = 4
)

// Enum value maps for ContractCoopStatusResponse_Status.
var (
	ContractCoopStatusResponse_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "LOBBY",
		2: "ACTIVE",
		3: "COMPLETE",
		4: "FINALIZED",
	}
	ContractCoopStatusResponse_Status_value = map[string]int32{
		"UNKNOWN":   0,
		"LOBBY":     1,
		"ACTIVE":    2,
		"COMPLETE":  3,
		"FINALIZED": 4,
	}
)

func (x ContractCoopStatusResponse_Status) Enum() *ContractCoopStatusResponse_Status {
	p := new(ContractCoopStatusResponse_Status)
	*p = x
	return p
}

func (x ContractCoopStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractCoopStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[18].Descriptor()
}

func (ContractCoopStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[18]
}

func (x ContractCoopStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContractCoopStatusResponse_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContractCoopStatusResponse_Status(num)
	return nil
}

// Deprecated: Use ContractCoopStatusResponse_Status.Descriptor instead.
func (ContractCoopStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{44, 2}
}

type ReportPlayerCoopRequest_Reason int32

const (
	ReportPlayerCoopRequest_UNKNOWN        ReportPlayerCoopRequest_Reason = 0
	ReportPlayerCoopRequest_OFFENSIVE_NAME ReportPlayerCoopRequest_Reason = 1
	ReportPlayerCoopRequest_CHEATING       ReportPlayerCoopRequest_Reason = 2
	ReportPlayerCoopRequest_LEECHING       ReportPlayerCoopRequest_Reason = 3
)

// Enum value maps for ReportPlayerCoopRequest_Reason.
var (
	ReportPlayerCoopRequest_Reason_name = map[int32]string{
		0: "UNKNOWN",
		1: "OFFENSIVE_NAME",
		2: "CHEATING",
		3: "LEECHING",
	}
	ReportPlayerCoopRequest_Reason_value = map[string]int32{
		"UNKNOWN":        0,
		"OFFENSIVE_NAME": 1,
		"CHEATING":       2,
		"LEECHING":       3,
	}
)

func (x ReportPlayerCoopRequest_Reason) Enum() *ReportPlayerCoopRequest_Reason {
	p := new(ReportPlayerCoopRequest_Reason)
	*p = x
	return p
}

func (x ReportPlayerCoopRequest_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportPlayerCoopRequest_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[19].Descriptor()
}

func (ReportPlayerCoopRequest_Reason) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[19]
}

func (x ReportPlayerCoopRequest_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ReportPlayerCoopRequest_Reason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ReportPlayerCoopRequest_Reason(num)
	return nil
}

// Deprecated: Use ReportPlayerCoopRequest_Reason.Descriptor instead.
func (ReportPlayerCoopRequest_Reason) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{59, 0}
}

type KickPlayerCoopRequest_Reason int32

const (
	KickPlayerCoopRequest_INVALID KickPlayerCoopRequest_Reason = 0
	KickPlayerCoopRequest_CHEATER KickPlayerCoopRequest_Reason = 1
	KickPlayerCoopRequest_IDLE    KickPlayerCoopRequest_Reason = 2
	KickPlayerCoopRequest_LEECH   KickPlayerCoopRequest_Reason = 3
	KickPlayerCoopRequest_PRIVATE KickPlayerCoopRequest_Reason = 4
)

// Enum value maps for KickPlayerCoopRequest_Reason.
var (
	KickPlayerCoopRequest_Reason_name = map[int32]string{
		0: "INVALID",
		1: "CHEATER",
		2: "IDLE",
		3: "LEECH",
		4: "PRIVATE",
	}
	KickPlayerCoopRequest_Reason_value = map[string]int32{
		"INVALID": 0,
		"CHEATER": 1,
		"IDLE":    2,
		"LEECH":   3,
		"PRIVATE": 4,
	}
)

func (x KickPlayerCoopRequest_Reason) Enum() *KickPlayerCoopRequest_Reason {
	p := new(KickPlayerCoopRequest_Reason)
	*p = x
	return p
}

func (x KickPlayerCoopRequest_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KickPlayerCoopRequest_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[20].Descriptor()
}

func (KickPlayerCoopRequest_Reason) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[20]
}

func (x KickPlayerCoopRequest_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KickPlayerCoopRequest_Reason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KickPlayerCoopRequest_Reason(num)
	return nil
}

// Deprecated: Use KickPlayerCoopRequest_Reason.Descriptor instead.
func (KickPlayerCoopRequest_Reason) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{60, 0}
}

type LiveConfig_HelpConfig_HowToVideoInfo_Type int32

const (
	LiveConfig_HelpConfig_HowToVideoInfo_VIDEO   LiveConfig_HelpConfig_HowToVideoInfo_Type = 0
	LiveConfig_HelpConfig_HowToVideoInfo_ARTICLE LiveConfig_HelpConfig_HowToVideoInfo_Type = 1
)

// Enum value maps for LiveConfig_HelpConfig_HowToVideoInfo_Type.
var (
	LiveConfig_HelpConfig_HowToVideoInfo_Type_name = map[int32]string{
		0: "VIDEO",
		1: "ARTICLE",
	}
	LiveConfig_HelpConfig_HowToVideoInfo_Type_value = map[string]int32{
		"VIDEO":   0,
		"ARTICLE": 1,
	}
)

func (x LiveConfig_HelpConfig_HowToVideoInfo_Type) Enum() *LiveConfig_HelpConfig_HowToVideoInfo_Type {
	p := new(LiveConfig_HelpConfig_HowToVideoInfo_Type)
	*p = x
	return p
}

func (x LiveConfig_HelpConfig_HowToVideoInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveConfig_HelpConfig_HowToVideoInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[21].Descriptor()
}

func (LiveConfig_HelpConfig_HowToVideoInfo_Type) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[21]
}

func (x LiveConfig_HelpConfig_HowToVideoInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *LiveConfig_HelpConfig_HowToVideoInfo_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = LiveConfig_HelpConfig_HowToVideoInfo_Type(num)
	return nil
}

// Deprecated: Use LiveConfig_HelpConfig_HowToVideoInfo_Type.Descriptor instead.
func (LiveConfig_HelpConfig_HowToVideoInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 3, 0, 0}
}

type MissionInfo_Spaceship int32

const (
	MissionInfo_CHICKEN_ONE         MissionInfo_Spaceship = 0
	MissionInfo_CHICKEN_NINE        MissionInfo_Spaceship = 1
	MissionInfo_CHICKEN_HEAVY       MissionInfo_Spaceship = 2
	MissionInfo_BCR                 MissionInfo_Spaceship = 3
	MissionInfo_MILLENIUM_CHICKEN   MissionInfo_Spaceship = 4
	MissionInfo_CORELLIHEN_CORVETTE MissionInfo_Spaceship = 5
	MissionInfo_GALEGGTICA          MissionInfo_Spaceship = 6
	MissionInfo_CHICKFIANT          MissionInfo_Spaceship = 7
	MissionInfo_VOYEGGER            MissionInfo_Spaceship = 8
	MissionInfo_HENERPRISE          MissionInfo_Spaceship = 9
	MissionInfo_ATREGGIES           MissionInfo_Spaceship = 10
)

// Enum value maps for MissionInfo_Spaceship.
var (
	MissionInfo_Spaceship_name = map[int32]string{
		0:  "CHICKEN_ONE",
		1:  "CHICKEN_NINE",
		2:  "CHICKEN_HEAVY",
		3:  "BCR",
		4:  "MILLENIUM_CHICKEN",
		5:  "CORELLIHEN_CORVETTE",
		6:  "GALEGGTICA",
		7:  "CHICKFIANT",
		8:  "VOYEGGER",
		9:  "HENERPRISE",
		10: "ATREGGIES",
	}
	MissionInfo_Spaceship_value = map[string]int32{
		"CHICKEN_ONE":         0,
		"CHICKEN_NINE":        1,
		"CHICKEN_HEAVY":       2,
		"BCR":                 3,
		"MILLENIUM_CHICKEN":   4,
		"CORELLIHEN_CORVETTE": 5,
		"GALEGGTICA":          6,
		"CHICKFIANT":          7,
		"VOYEGGER":            8,
		"HENERPRISE":          9,
		"ATREGGIES":           10,
	}
)

func (x MissionInfo_Spaceship) Enum() *MissionInfo_Spaceship {
	p := new(MissionInfo_Spaceship)
	*p = x
	return p
}

func (x MissionInfo_Spaceship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_Spaceship) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[22].Descriptor()
}

func (MissionInfo_Spaceship) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[22]
}

func (x MissionInfo_Spaceship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissionInfo_Spaceship) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissionInfo_Spaceship(num)
	return nil
}

// Deprecated: Use MissionInfo_Spaceship.Descriptor instead.
func (MissionInfo_Spaceship) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{91, 0}
}

type MissionInfo_Status int32

const (
	MissionInfo_FUELING           MissionInfo_Status = 0
	MissionInfo_PREPARE_TO_LAUNCH MissionInfo_Status = 5
	MissionInfo_EXPLORING         MissionInfo_Status = 10
	MissionInfo_RETURNED          MissionInfo_Status = 15
	MissionInfo_ANALYZING         MissionInfo_Status = 16
	MissionInfo_COMPLETE          MissionInfo_Status = 20
	MissionInfo_ARCHIVED          MissionInfo_Status = 25
)

// Enum value maps for MissionInfo_Status.
var (
	MissionInfo_Status_name = map[int32]string{
		0:  "FUELING",
		5:  "PREPARE_TO_LAUNCH",
		10: "EXPLORING",
		15: "RETURNED",
		16: "ANALYZING",
		20: "COMPLETE",
		25: "ARCHIVED",
	}
	MissionInfo_Status_value = map[string]int32{
		"FUELING":           0,
		"PREPARE_TO_LAUNCH": 5,
		"EXPLORING":         10,
		"RETURNED":          15,
		"ANALYZING":         16,
		"COMPLETE":          20,
		"ARCHIVED":          25,
	}
)

func (x MissionInfo_Status) Enum() *MissionInfo_Status {
	p := new(MissionInfo_Status)
	*p = x
	return p
}

func (x MissionInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[23].Descriptor()
}

func (MissionInfo_Status) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[23]
}

func (x MissionInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissionInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissionInfo_Status(num)
	return nil
}

// Deprecated: Use MissionInfo_Status.Descriptor instead.
func (MissionInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{91, 1}
}

type MissionInfo_DurationType int32

const (
	MissionInfo_SHORT    MissionInfo_DurationType = 0
	MissionInfo_LONG     MissionInfo_DurationType = 1
	MissionInfo_EPIC     MissionInfo_DurationType = 2
	MissionInfo_TUTORIAL MissionInfo_DurationType = 3
)

// Enum value maps for MissionInfo_DurationType.
var (
	MissionInfo_DurationType_name = map[int32]string{
		0: "SHORT",
		1: "LONG",
		2: "EPIC",
		3: "TUTORIAL",
	}
	MissionInfo_DurationType_value = map[string]int32{
		"SHORT":    0,
		"LONG":     1,
		"EPIC":     2,
		"TUTORIAL": 3,
	}
)

func (x MissionInfo_DurationType) Enum() *MissionInfo_DurationType {
	p := new(MissionInfo_DurationType)
	*p = x
	return p
}

func (x MissionInfo_DurationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissionInfo_DurationType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[24].Descriptor()
}

func (MissionInfo_DurationType) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[24]
}

func (x MissionInfo_DurationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MissionInfo_DurationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MissionInfo_DurationType(num)
	return nil
}

// Deprecated: Use MissionInfo_DurationType.Descriptor instead.
func (MissionInfo_DurationType) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{91, 2}
}

type ArtifactSpec_Name int32

const (
	ArtifactSpec_LUNAR_TOTEM               ArtifactSpec_Name = 0
	ArtifactSpec_NEODYMIUM_MEDALLION       ArtifactSpec_Name = 3
	ArtifactSpec_BEAK_OF_MIDAS             ArtifactSpec_Name = 4
	ArtifactSpec_LIGHT_OF_EGGENDIL         ArtifactSpec_Name = 5
	ArtifactSpec_DEMETERS_NECKLACE         ArtifactSpec_Name = 6
	ArtifactSpec_VIAL_MARTIAN_DUST         ArtifactSpec_Name = 7
	ArtifactSpec_ORNATE_GUSSET             ArtifactSpec_Name = 8
	ArtifactSpec_THE_CHALICE               ArtifactSpec_Name = 9
	ArtifactSpec_BOOK_OF_BASAN             ArtifactSpec_Name = 10
	ArtifactSpec_PHOENIX_FEATHER           ArtifactSpec_Name = 11
	ArtifactSpec_TUNGSTEN_ANKH             ArtifactSpec_Name = 12
	ArtifactSpec_AURELIAN_BROOCH           ArtifactSpec_Name = 21
	ArtifactSpec_CARVED_RAINSTICK          ArtifactSpec_Name = 22
	ArtifactSpec_PUZZLE_CUBE               ArtifactSpec_Name = 23
	ArtifactSpec_QUANTUM_METRONOME         ArtifactSpec_Name = 24
	ArtifactSpec_SHIP_IN_A_BOTTLE          ArtifactSpec_Name = 25
	ArtifactSpec_TACHYON_DEFLECTOR         ArtifactSpec_Name = 26
	ArtifactSpec_INTERSTELLAR_COMPASS      ArtifactSpec_Name = 27
	ArtifactSpec_DILITHIUM_MONOCLE         ArtifactSpec_Name = 28
	ArtifactSpec_TITANIUM_ACTUATOR         ArtifactSpec_Name = 29
	ArtifactSpec_MERCURYS_LENS             ArtifactSpec_Name = 30
	ArtifactSpec_TACHYON_STONE             ArtifactSpec_Name = 1
	ArtifactSpec_DILITHIUM_STONE           ArtifactSpec_Name = 31
	ArtifactSpec_SHELL_STONE               ArtifactSpec_Name = 32
	ArtifactSpec_LUNAR_STONE               ArtifactSpec_Name = 33
	ArtifactSpec_SOUL_STONE                ArtifactSpec_Name = 34
	ArtifactSpec_PROPHECY_STONE            ArtifactSpec_Name = 39
	ArtifactSpec_QUANTUM_STONE             ArtifactSpec_Name = 36
	ArtifactSpec_TERRA_STONE               ArtifactSpec_Name = 37
	ArtifactSpec_LIFE_STONE                ArtifactSpec_Name = 38
	ArtifactSpec_CLARITY_STONE             ArtifactSpec_Name = 40
	ArtifactSpec_EXTRATERRESTRIAL_ALUMINUM ArtifactSpec_Name = 13
	ArtifactSpec_ANCIENT_TUNGSTEN          ArtifactSpec_Name = 14
	ArtifactSpec_SPACE_ROCKS               ArtifactSpec_Name = 15
	ArtifactSpec_ALIEN_WOOD                ArtifactSpec_Name = 16
	ArtifactSpec_GOLD_METEORITE            ArtifactSpec_Name = 17
	ArtifactSpec_TAU_CETI_GEODE            ArtifactSpec_Name = 18
	ArtifactSpec_CENTAURIAN_STEEL          ArtifactSpec_Name = 19
	ArtifactSpec_ERIDANI_FEATHER           ArtifactSpec_Name = 20
	ArtifactSpec_DRONE_PARTS               ArtifactSpec_Name = 35
	ArtifactSpec_CELESTIAL_BRONZE          ArtifactSpec_Name = 41
	ArtifactSpec_LALANDE_HIDE              ArtifactSpec_Name = 42
	ArtifactSpec_SOLAR_TITANIUM            ArtifactSpec_Name = 43
	ArtifactSpec_TACHYON_STONE_FRAGMENT    ArtifactSpec_Name = 2
	ArtifactSpec_DILITHIUM_STONE_FRAGMENT  ArtifactSpec_Name = 44
	ArtifactSpec_SHELL_STONE_FRAGMENT      ArtifactSpec_Name = 45
	ArtifactSpec_LUNAR_STONE_FRAGMENT      ArtifactSpec_Name = 46
	ArtifactSpec_SOUL_STONE_FRAGMENT       ArtifactSpec_Name = 47
	ArtifactSpec_PROPHECY_STONE_FRAGMENT   ArtifactSpec_Name = 48
	ArtifactSpec_QUANTUM_STONE_FRAGMENT    ArtifactSpec_Name = 49
	ArtifactSpec_TERRA_STONE_FRAGMENT      ArtifactSpec_Name = 50
	ArtifactSpec_LIFE_STONE_FRAGMENT       ArtifactSpec_Name = 51
	ArtifactSpec_CLARITY_STONE_FRAGMENT    ArtifactSpec_Name = 52
	ArtifactSpec_UNKNOWN                   ArtifactSpec_Name = 10000
)

// Enum value maps for ArtifactSpec_Name.
var (
	ArtifactSpec_Name_name = map[int32]string{
		0:     "LUNAR_TOTEM",
		3:     "NEODYMIUM_MEDALLION",
		4:     "BEAK_OF_MIDAS",
		5:     "LIGHT_OF_EGGENDIL",
		6:     "DEMETERS_NECKLACE",
		7:     "VIAL_MARTIAN_DUST",
		8:     "ORNATE_GUSSET",
		9:     "THE_CHALICE",
		10:    "BOOK_OF_BASAN",
		11:    "PHOENIX_FEATHER",
		12:    "TUNGSTEN_ANKH",
		21:    "AURELIAN_BROOCH",
		22:    "CARVED_RAINSTICK",
		23:    "PUZZLE_CUBE",
		24:    "QUANTUM_METRONOME",
		25:    "SHIP_IN_A_BOTTLE",
		26:    "TACHYON_DEFLECTOR",
		27:    "INTERSTELLAR_COMPASS",
		28:    "DILITHIUM_MONOCLE",
		29:    "TITANIUM_ACTUATOR",
		30:    "MERCURYS_LENS",
		1:     "TACHYON_STONE",
		31:    "DILITHIUM_STONE",
		32:    "SHELL_STONE",
		33:    "LUNAR_STONE",
		34:    "SOUL_STONE",
		39:    "PROPHECY_STONE",
		36:    "QUANTUM_STONE",
		37:    "TERRA_STONE",
		38:    "LIFE_STONE",
		40:    "CLARITY_STONE",
		13:    "EXTRATERRESTRIAL_ALUMINUM",
		14:    "ANCIENT_TUNGSTEN",
		15:    "SPACE_ROCKS",
		16:    "ALIEN_WOOD",
		17:    "GOLD_METEORITE",
		18:    "TAU_CETI_GEODE",
		19:    "CENTAURIAN_STEEL",
		20:    "ERIDANI_FEATHER",
		35:    "DRONE_PARTS",
		41:    "CELESTIAL_BRONZE",
		42:    "LALANDE_HIDE",
		43:    "SOLAR_TITANIUM",
		2:     "TACHYON_STONE_FRAGMENT",
		44:    "DILITHIUM_STONE_FRAGMENT",
		45:    "SHELL_STONE_FRAGMENT",
		46:    "LUNAR_STONE_FRAGMENT",
		47:    "SOUL_STONE_FRAGMENT",
		48:    "PROPHECY_STONE_FRAGMENT",
		49:    "QUANTUM_STONE_FRAGMENT",
		50:    "TERRA_STONE_FRAGMENT",
		51:    "LIFE_STONE_FRAGMENT",
		52:    "CLARITY_STONE_FRAGMENT",
		10000: "UNKNOWN",
	}
	ArtifactSpec_Name_value = map[string]int32{
		"LUNAR_TOTEM":               0,
		"NEODYMIUM_MEDALLION":       3,
		"BEAK_OF_MIDAS":             4,
		"LIGHT_OF_EGGENDIL":         5,
		"DEMETERS_NECKLACE":         6,
		"VIAL_MARTIAN_DUST":         7,
		"ORNATE_GUSSET":             8,
		"THE_CHALICE":               9,
		"BOOK_OF_BASAN":             10,
		"PHOENIX_FEATHER":           11,
		"TUNGSTEN_ANKH":             12,
		"AURELIAN_BROOCH":           21,
		"CARVED_RAINSTICK":          22,
		"PUZZLE_CUBE":               23,
		"QUANTUM_METRONOME":         24,
		"SHIP_IN_A_BOTTLE":          25,
		"TACHYON_DEFLECTOR":         26,
		"INTERSTELLAR_COMPASS":      27,
		"DILITHIUM_MONOCLE":         28,
		"TITANIUM_ACTUATOR":         29,
		"MERCURYS_LENS":             30,
		"TACHYON_STONE":             1,
		"DILITHIUM_STONE":           31,
		"SHELL_STONE":               32,
		"LUNAR_STONE":               33,
		"SOUL_STONE":                34,
		"PROPHECY_STONE":            39,
		"QUANTUM_STONE":             36,
		"TERRA_STONE":               37,
		"LIFE_STONE":                38,
		"CLARITY_STONE":             40,
		"EXTRATERRESTRIAL_ALUMINUM": 13,
		"ANCIENT_TUNGSTEN":          14,
		"SPACE_ROCKS":               15,
		"ALIEN_WOOD":                16,
		"GOLD_METEORITE":            17,
		"TAU_CETI_GEODE":            18,
		"CENTAURIAN_STEEL":          19,
		"ERIDANI_FEATHER":           20,
		"DRONE_PARTS":               35,
		"CELESTIAL_BRONZE":          41,
		"LALANDE_HIDE":              42,
		"SOLAR_TITANIUM":            43,
		"TACHYON_STONE_FRAGMENT":    2,
		"DILITHIUM_STONE_FRAGMENT":  44,
		"SHELL_STONE_FRAGMENT":      45,
		"LUNAR_STONE_FRAGMENT":      46,
		"SOUL_STONE_FRAGMENT":       47,
		"PROPHECY_STONE_FRAGMENT":   48,
		"QUANTUM_STONE_FRAGMENT":    49,
		"TERRA_STONE_FRAGMENT":      50,
		"LIFE_STONE_FRAGMENT":       51,
		"CLARITY_STONE_FRAGMENT":    52,
		"UNKNOWN":                   10000,
	}
)

func (x ArtifactSpec_Name) Enum() *ArtifactSpec_Name {
	p := new(ArtifactSpec_Name)
	*p = x
	return p
}

func (x ArtifactSpec_Name) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Name) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[25].Descriptor()
}

func (ArtifactSpec_Name) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[25]
}

func (x ArtifactSpec_Name) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Name) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Name(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Name.Descriptor instead.
func (ArtifactSpec_Name) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{92, 0}
}

type ArtifactSpec_Level int32

const (
	ArtifactSpec_INFERIOR ArtifactSpec_Level = 0
	ArtifactSpec_LESSER   ArtifactSpec_Level = 1
	ArtifactSpec_NORMAL   ArtifactSpec_Level = 2
	ArtifactSpec_GREATER  ArtifactSpec_Level = 3
	ArtifactSpec_SUPERIOR ArtifactSpec_Level = 4
)

// Enum value maps for ArtifactSpec_Level.
var (
	ArtifactSpec_Level_name = map[int32]string{
		0: "INFERIOR",
		1: "LESSER",
		2: "NORMAL",
		3: "GREATER",
		4: "SUPERIOR",
	}
	ArtifactSpec_Level_value = map[string]int32{
		"INFERIOR": 0,
		"LESSER":   1,
		"NORMAL":   2,
		"GREATER":  3,
		"SUPERIOR": 4,
	}
)

func (x ArtifactSpec_Level) Enum() *ArtifactSpec_Level {
	p := new(ArtifactSpec_Level)
	*p = x
	return p
}

func (x ArtifactSpec_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[26].Descriptor()
}

func (ArtifactSpec_Level) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[26]
}

func (x ArtifactSpec_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Level) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Level(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Level.Descriptor instead.
func (ArtifactSpec_Level) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{92, 1}
}

type ArtifactSpec_Rarity int32

const (
	ArtifactSpec_COMMON    ArtifactSpec_Rarity = 0
	ArtifactSpec_RARE      ArtifactSpec_Rarity = 1
	ArtifactSpec_EPIC      ArtifactSpec_Rarity = 2
	ArtifactSpec_LEGENDARY ArtifactSpec_Rarity = 3
)

// Enum value maps for ArtifactSpec_Rarity.
var (
	ArtifactSpec_Rarity_name = map[int32]string{
		0: "COMMON",
		1: "RARE",
		2: "EPIC",
		3: "LEGENDARY",
	}
	ArtifactSpec_Rarity_value = map[string]int32{
		"COMMON":    0,
		"RARE":      1,
		"EPIC":      2,
		"LEGENDARY": 3,
	}
)

func (x ArtifactSpec_Rarity) Enum() *ArtifactSpec_Rarity {
	p := new(ArtifactSpec_Rarity)
	*p = x
	return p
}

func (x ArtifactSpec_Rarity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Rarity) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[27].Descriptor()
}

func (ArtifactSpec_Rarity) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[27]
}

func (x ArtifactSpec_Rarity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Rarity) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Rarity(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Rarity.Descriptor instead.
func (ArtifactSpec_Rarity) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{92, 2}
}

type ArtifactSpec_Type int32

const (
	ArtifactSpec_ARTIFACT         ArtifactSpec_Type = 0
	ArtifactSpec_STONE            ArtifactSpec_Type = 1
	ArtifactSpec_INGREDIENT       ArtifactSpec_Type = 2
	ArtifactSpec_STONE_INGREDIENT ArtifactSpec_Type = 3
)

// Enum value maps for ArtifactSpec_Type.
var (
	ArtifactSpec_Type_name = map[int32]string{
		0: "ARTIFACT",
		1: "STONE",
		2: "INGREDIENT",
		3: "STONE_INGREDIENT",
	}
	ArtifactSpec_Type_value = map[string]int32{
		"ARTIFACT":         0,
		"STONE":            1,
		"INGREDIENT":       2,
		"STONE_INGREDIENT": 3,
	}
)

func (x ArtifactSpec_Type) Enum() *ArtifactSpec_Type {
	p := new(ArtifactSpec_Type)
	*p = x
	return p
}

func (x ArtifactSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSpec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[28].Descriptor()
}

func (ArtifactSpec_Type) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[28]
}

func (x ArtifactSpec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ArtifactSpec_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ArtifactSpec_Type(num)
	return nil
}

// Deprecated: Use ArtifactSpec_Type.Descriptor instead.
func (ArtifactSpec_Type) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{92, 3}
}

type SaveBackupResponse_ErrorCodes int32

const (
	SaveBackupResponse_NO_ERROR            SaveBackupResponse_ErrorCodes = 0
	SaveBackupResponse_USER_NOT_FOUND      SaveBackupResponse_ErrorCodes = 1
	SaveBackupResponse_COULD_NOT_OVERWRITE SaveBackupResponse_ErrorCodes = 2
	SaveBackupResponse_BACKUP_OFFERED      SaveBackupResponse_ErrorCodes = 3
	SaveBackupResponse_BAD_USER_ID         SaveBackupResponse_ErrorCodes = 4
)

// Enum value maps for SaveBackupResponse_ErrorCodes.
var (
	SaveBackupResponse_ErrorCodes_name = map[int32]string{
		0: "NO_ERROR",
		1: "USER_NOT_FOUND",
		2: "COULD_NOT_OVERWRITE",
		3: "BACKUP_OFFERED",
		4: "BAD_USER_ID",
	}
	SaveBackupResponse_ErrorCodes_value = map[string]int32{
		"NO_ERROR":            0,
		"USER_NOT_FOUND":      1,
		"COULD_NOT_OVERWRITE": 2,
		"BACKUP_OFFERED":      3,
		"BAD_USER_ID":         4,
	}
)

func (x SaveBackupResponse_ErrorCodes) Enum() *SaveBackupResponse_ErrorCodes {
	p := new(SaveBackupResponse_ErrorCodes)
	*p = x
	return p
}

func (x SaveBackupResponse_ErrorCodes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SaveBackupResponse_ErrorCodes) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[29].Descriptor()
}

func (SaveBackupResponse_ErrorCodes) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[29]
}

func (x SaveBackupResponse_ErrorCodes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SaveBackupResponse_ErrorCodes) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SaveBackupResponse_ErrorCodes(num)
	return nil
}

// Deprecated: Use SaveBackupResponse_ErrorCodes.Descriptor instead.
func (SaveBackupResponse_ErrorCodes) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{118, 0}
}

type ShellSpec_AssetType int32

const (
	ShellSpec_COOP                        ShellSpec_AssetType = 1
	ShellSpec_SHACK                       ShellSpec_AssetType = 2
	ShellSpec_SUPER_SHACK                 ShellSpec_AssetType = 3
	ShellSpec_SHORT_HOUSE                 ShellSpec_AssetType = 4
	ShellSpec_THE_STANDARD                ShellSpec_AssetType = 5
	ShellSpec_LONG_HOUSE                  ShellSpec_AssetType = 6
	ShellSpec_DOUBLE_DECKER               ShellSpec_AssetType = 7
	ShellSpec_WAREHOUSE                   ShellSpec_AssetType = 8
	ShellSpec_CENTER                      ShellSpec_AssetType = 9
	ShellSpec_BUNKER                      ShellSpec_AssetType = 10
	ShellSpec_EGGKEA                      ShellSpec_AssetType = 11
	ShellSpec_HAB_1K                      ShellSpec_AssetType = 12
	ShellSpec_HANGAR                      ShellSpec_AssetType = 13
	ShellSpec_TOWER                       ShellSpec_AssetType = 14
	ShellSpec_HAB_10K                     ShellSpec_AssetType = 15
	ShellSpec_EGGTOPIA                    ShellSpec_AssetType = 16
	ShellSpec_MONOLITH                    ShellSpec_AssetType = 17
	ShellSpec_PLANET_PORTAL               ShellSpec_AssetType = 18
	ShellSpec_CHICKEN_UNIVERSE            ShellSpec_AssetType = 19
	ShellSpec_SILO_0_SMALL                ShellSpec_AssetType = 50
	ShellSpec_SILO_0_MED                  ShellSpec_AssetType = 51
	ShellSpec_SILO_0_LARGE                ShellSpec_AssetType = 52
	ShellSpec_SILO_1_SMALL                ShellSpec_AssetType = 53
	ShellSpec_SILO_1_MED                  ShellSpec_AssetType = 54
	ShellSpec_SILO_1_LARGE                ShellSpec_AssetType = 55
	ShellSpec_SILO_ALL                    ShellSpec_AssetType = 59
	ShellSpec_MAILBOX                     ShellSpec_AssetType = 70
	ShellSpec_TROPHY_CASE                 ShellSpec_AssetType = 71
	ShellSpec_GROUND                      ShellSpec_AssetType = 72
	ShellSpec_HARDSCAPE                   ShellSpec_AssetType = 73
	ShellSpec_HYPERLOOP                   ShellSpec_AssetType = 74
	ShellSpec_DEPOT_1                     ShellSpec_AssetType = 100
	ShellSpec_DEPOT_2                     ShellSpec_AssetType = 101
	ShellSpec_DEPOT_3                     ShellSpec_AssetType = 102
	ShellSpec_DEPOT_4                     ShellSpec_AssetType = 103
	ShellSpec_DEPOT_5                     ShellSpec_AssetType = 104
	ShellSpec_DEPOT_6                     ShellSpec_AssetType = 105
	ShellSpec_DEPOT_7                     ShellSpec_AssetType = 106
	ShellSpec_LAB_1                       ShellSpec_AssetType = 110
	ShellSpec_LAB_2                       ShellSpec_AssetType = 111
	ShellSpec_LAB_3                       ShellSpec_AssetType = 112
	ShellSpec_LAB_4                       ShellSpec_AssetType = 113
	ShellSpec_LAB_5                       ShellSpec_AssetType = 114
	ShellSpec_LAB_6                       ShellSpec_AssetType = 115
	ShellSpec_HATCHERY_EDIBLE             ShellSpec_AssetType = 120
	ShellSpec_HATCHERY_SUPERFOOD          ShellSpec_AssetType = 121
	ShellSpec_HATCHERY_MEDICAL            ShellSpec_AssetType = 122
	ShellSpec_HATCHERY_ROCKET_FUEL        ShellSpec_AssetType = 123
	ShellSpec_HATCHERY_SUPERMATERIAL      ShellSpec_AssetType = 124
	ShellSpec_HATCHERY_FUSION             ShellSpec_AssetType = 125
	ShellSpec_HATCHERY_QUANTUM            ShellSpec_AssetType = 126
	ShellSpec_HATCHERY_IMMORTALITY        ShellSpec_AssetType = 127
	ShellSpec_HATCHERY_TACHYON            ShellSpec_AssetType = 128
	ShellSpec_HATCHERY_GRAVITON           ShellSpec_AssetType = 129
	ShellSpec_HATCHERY_DILITHIUM          ShellSpec_AssetType = 130
	ShellSpec_HATCHERY_PRODIGY            ShellSpec_AssetType = 131
	ShellSpec_HATCHERY_TERRAFORM          ShellSpec_AssetType = 132
	ShellSpec_HATCHERY_ANTIMATTER         ShellSpec_AssetType = 133
	ShellSpec_HATCHERY_DARK_MATTER        ShellSpec_AssetType = 134
	ShellSpec_HATCHERY_AI                 ShellSpec_AssetType = 135
	ShellSpec_HATCHERY_NEBULA             ShellSpec_AssetType = 136
	ShellSpec_HATCHERY_UNIVERSE           ShellSpec_AssetType = 137
	ShellSpec_HATCHERY_ENLIGHTENMENT      ShellSpec_AssetType = 138
	ShellSpec_HATCHERY_CHOCOLATE          ShellSpec_AssetType = 139
	ShellSpec_HATCHERY_EASTER             ShellSpec_AssetType = 140
	ShellSpec_HATCHERY_WATERBALLOON       ShellSpec_AssetType = 141
	ShellSpec_HATCHERY_FIREWORK           ShellSpec_AssetType = 142
	ShellSpec_HATCHERY_PUMPKIN            ShellSpec_AssetType = 143
	ShellSpec_HATCHERY_CUSTOM             ShellSpec_AssetType = 150
	ShellSpec_HOA_1                       ShellSpec_AssetType = 170
	ShellSpec_HOA_2                       ShellSpec_AssetType = 171
	ShellSpec_HOA_3                       ShellSpec_AssetType = 172
	ShellSpec_MISSION_CONTROL_1           ShellSpec_AssetType = 180
	ShellSpec_MISSION_CONTROL_2           ShellSpec_AssetType = 181
	ShellSpec_MISSION_CONTROL_3           ShellSpec_AssetType = 182
	ShellSpec_FUEL_TANK_1                 ShellSpec_AssetType = 200
	ShellSpec_FUEL_TANK_2                 ShellSpec_AssetType = 201
	ShellSpec_FUEL_TANK_3                 ShellSpec_AssetType = 202
	ShellSpec_FUEL_TANK_4                 ShellSpec_AssetType = 203
	ShellSpec_HATCHERY_GRAVITON_TOP       ShellSpec_AssetType = 500
	ShellSpec_HATCHERY_NEBULA_MIDDLE      ShellSpec_AssetType = 501
	ShellSpec_HATCHERY_NEBULA_TOP         ShellSpec_AssetType = 502
	ShellSpec_HATCHERY_DARK_MATTER_RING_1 ShellSpec_AssetType = 505
	ShellSpec_HATCHERY_DARK_MATTER_RING_2 ShellSpec_AssetType = 506
	ShellSpec_HATCHERY_DARK_MATTER_RING_3 ShellSpec_AssetType = 507
	ShellSpec_HATCHERY_AI_TOP_1           ShellSpec_AssetType = 510
	ShellSpec_HATCHERY_AI_TOP_2           ShellSpec_AssetType = 511
	ShellSpec_HATCHERY_AI_TOP_3           ShellSpec_AssetType = 512
	ShellSpec_HATCHERY_AI_TOP_4           ShellSpec_AssetType = 513
	ShellSpec_HATCHERY_UNIVERSE_PROBE     ShellSpec_AssetType = 515
	ShellSpec_HATCHERY_UNIVERSE_BOLT      ShellSpec_AssetType = 516
	ShellSpec_HATCHERY_ENLIGHTENMENT_ORB  ShellSpec_AssetType = 520
	ShellSpec_HYPERLOOP_TRACK             ShellSpec_AssetType = 570
	ShellSpec_MAILBOX_FULL                ShellSpec_AssetType = 600
	ShellSpec_CHICKEN                     ShellSpec_AssetType = 1000
	ShellSpec_HAT                         ShellSpec_AssetType = 1010
	ShellSpec_UNKNOWN                     ShellSpec_AssetType = 9999
)

// Enum value maps for ShellSpec_AssetType.
var (
	ShellSpec_AssetType_name = map[int32]string{
		1:    "COOP",
		2:    "SHACK",
		3:    "SUPER_SHACK",
		4:    "SHORT_HOUSE",
		5:    "THE_STANDARD",
		6:    "LONG_HOUSE",
		7:    "DOUBLE_DECKER",
		8:    "WAREHOUSE",
		9:    "CENTER",
		10:   "BUNKER",
		11:   "EGGKEA",
		12:   "HAB_1K",
		13:   "HANGAR",
		14:   "TOWER",
		15:   "HAB_10K",
		16:   "EGGTOPIA",
		17:   "MONOLITH",
		18:   "PLANET_PORTAL",
		19:   "CHICKEN_UNIVERSE",
		50:   "SILO_0_SMALL",
		51:   "SILO_0_MED",
		52:   "SILO_0_LARGE",
		53:   "SILO_1_SMALL",
		54:   "SILO_1_MED",
		55:   "SILO_1_LARGE",
		59:   "SILO_ALL",
		70:   "MAILBOX",
		71:   "TROPHY_CASE",
		72:   "GROUND",
		73:   "HARDSCAPE",
		74:   "HYPERLOOP",
		100:  "DEPOT_1",
		101:  "DEPOT_2",
		102:  "DEPOT_3",
		103:  "DEPOT_4",
		104:  "DEPOT_5",
		105:  "DEPOT_6",
		106:  "DEPOT_7",
		110:  "LAB_1",
		111:  "LAB_2",
		112:  "LAB_3",
		113:  "LAB_4",
		114:  "LAB_5",
		115:  "LAB_6",
		120:  "HATCHERY_EDIBLE",
		121:  "HATCHERY_SUPERFOOD",
		122:  "HATCHERY_MEDICAL",
		123:  "HATCHERY_ROCKET_FUEL",
		124:  "HATCHERY_SUPERMATERIAL",
		125:  "HATCHERY_FUSION",
		126:  "HATCHERY_QUANTUM",
		127:  "HATCHERY_IMMORTALITY",
		128:  "HATCHERY_TACHYON",
		129:  "HATCHERY_GRAVITON",
		130:  "HATCHERY_DILITHIUM",
		131:  "HATCHERY_PRODIGY",
		132:  "HATCHERY_TERRAFORM",
		133:  "HATCHERY_ANTIMATTER",
		134:  "HATCHERY_DARK_MATTER",
		135:  "HATCHERY_AI",
		136:  "HATCHERY_NEBULA",
		137:  "HATCHERY_UNIVERSE",
		138:  "HATCHERY_ENLIGHTENMENT",
		139:  "HATCHERY_CHOCOLATE",
		140:  "HATCHERY_EASTER",
		141:  "HATCHERY_WATERBALLOON",
		142:  "HATCHERY_FIREWORK",
		143:  "HATCHERY_PUMPKIN",
		150:  "HATCHERY_CUSTOM",
		170:  "HOA_1",
		171:  "HOA_2",
		172:  "HOA_3",
		180:  "MISSION_CONTROL_1",
		181:  "MISSION_CONTROL_2",
		182:  "MISSION_CONTROL_3",
		200:  "FUEL_TANK_1",
		201:  "FUEL_TANK_2",
		202:  "FUEL_TANK_3",
		203:  "FUEL_TANK_4",
		500:  "HATCHERY_GRAVITON_TOP",
		501:  "HATCHERY_NEBULA_MIDDLE",
		502:  "HATCHERY_NEBULA_TOP",
		505:  "HATCHERY_DARK_MATTER_RING_1",
		506:  "HATCHERY_DARK_MATTER_RING_2",
		507:  "HATCHERY_DARK_MATTER_RING_3",
		510:  "HATCHERY_AI_TOP_1",
		511:  "HATCHERY_AI_TOP_2",
		512:  "HATCHERY_AI_TOP_3",
		513:  "HATCHERY_AI_TOP_4",
		515:  "HATCHERY_UNIVERSE_PROBE",
		516:  "HATCHERY_UNIVERSE_BOLT",
		520:  "HATCHERY_ENLIGHTENMENT_ORB",
		570:  "HYPERLOOP_TRACK",
		600:  "MAILBOX_FULL",
		1000: "CHICKEN",
		1010: "HAT",
		9999: "UNKNOWN",
	}
	ShellSpec_AssetType_value = map[string]int32{
		"COOP":                        1,
		"SHACK":                       2,
		"SUPER_SHACK":                 3,
		"SHORT_HOUSE":                 4,
		"THE_STANDARD":                5,
		"LONG_HOUSE":                  6,
		"DOUBLE_DECKER":               7,
		"WAREHOUSE":                   8,
		"CENTER":                      9,
		"BUNKER":                      10,
		"EGGKEA":                      11,
		"HAB_1K":                      12,
		"HANGAR":                      13,
		"TOWER":                       14,
		"HAB_10K":                     15,
		"EGGTOPIA":                    16,
		"MONOLITH":                    17,
		"PLANET_PORTAL":               18,
		"CHICKEN_UNIVERSE":            19,
		"SILO_0_SMALL":                50,
		"SILO_0_MED":                  51,
		"SILO_0_LARGE":                52,
		"SILO_1_SMALL":                53,
		"SILO_1_MED":                  54,
		"SILO_1_LARGE":                55,
		"SILO_ALL":                    59,
		"MAILBOX":                     70,
		"TROPHY_CASE":                 71,
		"GROUND":                      72,
		"HARDSCAPE":                   73,
		"HYPERLOOP":                   74,
		"DEPOT_1":                     100,
		"DEPOT_2":                     101,
		"DEPOT_3":                     102,
		"DEPOT_4":                     103,
		"DEPOT_5":                     104,
		"DEPOT_6":                     105,
		"DEPOT_7":                     106,
		"LAB_1":                       110,
		"LAB_2":                       111,
		"LAB_3":                       112,
		"LAB_4":                       113,
		"LAB_5":                       114,
		"LAB_6":                       115,
		"HATCHERY_EDIBLE":             120,
		"HATCHERY_SUPERFOOD":          121,
		"HATCHERY_MEDICAL":            122,
		"HATCHERY_ROCKET_FUEL":        123,
		"HATCHERY_SUPERMATERIAL":      124,
		"HATCHERY_FUSION":             125,
		"HATCHERY_QUANTUM":            126,
		"HATCHERY_IMMORTALITY":        127,
		"HATCHERY_TACHYON":            128,
		"HATCHERY_GRAVITON":           129,
		"HATCHERY_DILITHIUM":          130,
		"HATCHERY_PRODIGY":            131,
		"HATCHERY_TERRAFORM":          132,
		"HATCHERY_ANTIMATTER":         133,
		"HATCHERY_DARK_MATTER":        134,
		"HATCHERY_AI":                 135,
		"HATCHERY_NEBULA":             136,
		"HATCHERY_UNIVERSE":           137,
		"HATCHERY_ENLIGHTENMENT":      138,
		"HATCHERY_CHOCOLATE":          139,
		"HATCHERY_EASTER":             140,
		"HATCHERY_WATERBALLOON":       141,
		"HATCHERY_FIREWORK":           142,
		"HATCHERY_PUMPKIN":            143,
		"HATCHERY_CUSTOM":             150,
		"HOA_1":                       170,
		"HOA_2":                       171,
		"HOA_3":                       172,
		"MISSION_CONTROL_1":           180,
		"MISSION_CONTROL_2":           181,
		"MISSION_CONTROL_3":           182,
		"FUEL_TANK_1":                 200,
		"FUEL_TANK_2":                 201,
		"FUEL_TANK_3":                 202,
		"FUEL_TANK_4":                 203,
		"HATCHERY_GRAVITON_TOP":       500,
		"HATCHERY_NEBULA_MIDDLE":      501,
		"HATCHERY_NEBULA_TOP":         502,
		"HATCHERY_DARK_MATTER_RING_1": 505,
		"HATCHERY_DARK_MATTER_RING_2": 506,
		"HATCHERY_DARK_MATTER_RING_3": 507,
		"HATCHERY_AI_TOP_1":           510,
		"HATCHERY_AI_TOP_2":           511,
		"HATCHERY_AI_TOP_3":           512,
		"HATCHERY_AI_TOP_4":           513,
		"HATCHERY_UNIVERSE_PROBE":     515,
		"HATCHERY_UNIVERSE_BOLT":      516,
		"HATCHERY_ENLIGHTENMENT_ORB":  520,
		"HYPERLOOP_TRACK":             570,
		"MAILBOX_FULL":                600,
		"CHICKEN":                     1000,
		"HAT":                         1010,
		"UNKNOWN":                     9999,
	}
)

func (x ShellSpec_AssetType) Enum() *ShellSpec_AssetType {
	p := new(ShellSpec_AssetType)
	*p = x
	return p
}

func (x ShellSpec_AssetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellSpec_AssetType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[30].Descriptor()
}

func (ShellSpec_AssetType) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[30]
}

func (x ShellSpec_AssetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ShellSpec_AssetType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ShellSpec_AssetType(num)
	return nil
}

// Deprecated: Use ShellSpec_AssetType.Descriptor instead.
func (ShellSpec_AssetType) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{122, 0}
}

type ShellObjectSpec_ChickenAnimation int32

const (
	ShellObjectSpec_STANDARD_RUN    ShellObjectSpec_ChickenAnimation = 0
	ShellObjectSpec_SLOWMO          ShellObjectSpec_ChickenAnimation = 7
	ShellObjectSpec_WOBBLE          ShellObjectSpec_ChickenAnimation = 1
	ShellObjectSpec_WOBBLE_LEAN     ShellObjectSpec_ChickenAnimation = 5
	ShellObjectSpec_SMOOTH          ShellObjectSpec_ChickenAnimation = 2
	ShellObjectSpec_SMOOTH_LEAN     ShellObjectSpec_ChickenAnimation = 6
	ShellObjectSpec_HOVER           ShellObjectSpec_ChickenAnimation = 3
	ShellObjectSpec_SIDEWAYS_SMOOTH ShellObjectSpec_ChickenAnimation = 4
	ShellObjectSpec_SIDEWAYS_LEAN   ShellObjectSpec_ChickenAnimation = 8
)

// Enum value maps for ShellObjectSpec_ChickenAnimation.
var (
	ShellObjectSpec_ChickenAnimation_name = map[int32]string{
		0: "STANDARD_RUN",
		7: "SLOWMO",
		1: "WOBBLE",
		5: "WOBBLE_LEAN",
		2: "SMOOTH",
		6: "SMOOTH_LEAN",
		3: "HOVER",
		4: "SIDEWAYS_SMOOTH",
		8: "SIDEWAYS_LEAN",
	}
	ShellObjectSpec_ChickenAnimation_value = map[string]int32{
		"STANDARD_RUN":    0,
		"SLOWMO":          7,
		"WOBBLE":          1,
		"WOBBLE_LEAN":     5,
		"SMOOTH":          2,
		"SMOOTH_LEAN":     6,
		"HOVER":           3,
		"SIDEWAYS_SMOOTH": 4,
		"SIDEWAYS_LEAN":   8,
	}
)

func (x ShellObjectSpec_ChickenAnimation) Enum() *ShellObjectSpec_ChickenAnimation {
	p := new(ShellObjectSpec_ChickenAnimation)
	*p = x
	return p
}

func (x ShellObjectSpec_ChickenAnimation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellObjectSpec_ChickenAnimation) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[31].Descriptor()
}

func (ShellObjectSpec_ChickenAnimation) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[31]
}

func (x ShellObjectSpec_ChickenAnimation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ShellObjectSpec_ChickenAnimation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ShellObjectSpec_ChickenAnimation(num)
	return nil
}

// Deprecated: Use ShellObjectSpec_ChickenAnimation.Descriptor instead.
func (ShellObjectSpec_ChickenAnimation) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{124, 0}
}

type ShellDB_FarmElement int32

const (
	ShellDB_HEN_HOUSE       ShellDB_FarmElement = 1
	ShellDB_SILO            ShellDB_FarmElement = 2
	ShellDB_MAILBOX         ShellDB_FarmElement = 3
	ShellDB_TROPHY_CASE     ShellDB_FarmElement = 4
	ShellDB_GROUND          ShellDB_FarmElement = 5
	ShellDB_HARDSCAPE       ShellDB_FarmElement = 6
	ShellDB_HYPERLOOP       ShellDB_FarmElement = 7
	ShellDB_DEPOT           ShellDB_FarmElement = 8
	ShellDB_LAB             ShellDB_FarmElement = 9
	ShellDB_HATCHERY        ShellDB_FarmElement = 10
	ShellDB_HOA             ShellDB_FarmElement = 11
	ShellDB_MISSION_CONTROL ShellDB_FarmElement = 12
	ShellDB_FUEL_TANK       ShellDB_FarmElement = 13
	ShellDB_CHICKEN         ShellDB_FarmElement = 14
	ShellDB_HAT             ShellDB_FarmElement = 15
	ShellDB_UNKNOWN         ShellDB_FarmElement = 99
)

// Enum value maps for ShellDB_FarmElement.
var (
	ShellDB_FarmElement_name = map[int32]string{
		1:  "HEN_HOUSE",
		2:  "SILO",
		3:  "MAILBOX",
		4:  "TROPHY_CASE",
		5:  "GROUND",
		6:  "HARDSCAPE",
		7:  "HYPERLOOP",
		8:  "DEPOT",
		9:  "LAB",
		10: "HATCHERY",
		11: "HOA",
		12: "MISSION_CONTROL",
		13: "FUEL_TANK",
		14: "CHICKEN",
		15: "HAT",
		99: "UNKNOWN",
	}
	ShellDB_FarmElement_value = map[string]int32{
		"HEN_HOUSE":       1,
		"SILO":            2,
		"MAILBOX":         3,
		"TROPHY_CASE":     4,
		"GROUND":          5,
		"HARDSCAPE":       6,
		"HYPERLOOP":       7,
		"DEPOT":           8,
		"LAB":             9,
		"HATCHERY":        10,
		"HOA":             11,
		"MISSION_CONTROL": 12,
		"FUEL_TANK":       13,
		"CHICKEN":         14,
		"HAT":             15,
		"UNKNOWN":         99,
	}
)

func (x ShellDB_FarmElement) Enum() *ShellDB_FarmElement {
	p := new(ShellDB_FarmElement)
	*p = x
	return p
}

func (x ShellDB_FarmElement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellDB_FarmElement) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[32].Descriptor()
}

func (ShellDB_FarmElement) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[32]
}

func (x ShellDB_FarmElement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ShellDB_FarmElement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ShellDB_FarmElement(num)
	return nil
}

// Deprecated: Use ShellDB_FarmElement.Descriptor instead.
func (ShellDB_FarmElement) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 0}
}

type ShellShowcaseListingInfo_Status int32

const (
	ShellShowcaseListingInfo_NONE          ShellShowcaseListingInfo_Status = 0
	ShellShowcaseListingInfo_SUBMITTED     ShellShowcaseListingInfo_Status = 1
	ShellShowcaseListingInfo_LIVE          ShellShowcaseListingInfo_Status = 2
	ShellShowcaseListingInfo_FEATURED      ShellShowcaseListingInfo_Status = 3
	ShellShowcaseListingInfo_FEATURED_ALUM ShellShowcaseListingInfo_Status = 5
	ShellShowcaseListingInfo_ARCHIVED      ShellShowcaseListingInfo_Status = 6
	ShellShowcaseListingInfo_INVALID       ShellShowcaseListingInfo_Status = 4
)

// Enum value maps for ShellShowcaseListingInfo_Status.
var (
	ShellShowcaseListingInfo_Status_name = map[int32]string{
		0: "NONE",
		1: "SUBMITTED",
		2: "LIVE",
		3: "FEATURED",
		5: "FEATURED_ALUM",
		6: "ARCHIVED",
		4: "INVALID",
	}
	ShellShowcaseListingInfo_Status_value = map[string]int32{
		"NONE":          0,
		"SUBMITTED":     1,
		"LIVE":          2,
		"FEATURED":      3,
		"FEATURED_ALUM": 5,
		"ARCHIVED":      6,
		"INVALID":       4,
	}
)

func (x ShellShowcaseListingInfo_Status) Enum() *ShellShowcaseListingInfo_Status {
	p := new(ShellShowcaseListingInfo_Status)
	*p = x
	return p
}

func (x ShellShowcaseListingInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShellShowcaseListingInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[33].Descriptor()
}

func (ShellShowcaseListingInfo_Status) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[33]
}

func (x ShellShowcaseListingInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ShellShowcaseListingInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ShellShowcaseListingInfo_Status(num)
	return nil
}

// Deprecated: Use ShellShowcaseListingInfo_Status.Descriptor instead.
func (ShellShowcaseListingInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{132, 0}
}

type UserVerificationAnalysis_Status int32

const (
	UserVerificationAnalysis_UNKNOWN    UserVerificationAnalysis_Status = 0
	UserVerificationAnalysis_PROCESSING UserVerificationAnalysis_Status = 1
	UserVerificationAnalysis_COMPLETE   UserVerificationAnalysis_Status = 2
)

// Enum value maps for UserVerificationAnalysis_Status.
var (
	UserVerificationAnalysis_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PROCESSING",
		2: "COMPLETE",
	}
	UserVerificationAnalysis_Status_value = map[string]int32{
		"UNKNOWN":    0,
		"PROCESSING": 1,
		"COMPLETE":   2,
	}
)

func (x UserVerificationAnalysis_Status) Enum() *UserVerificationAnalysis_Status {
	p := new(UserVerificationAnalysis_Status)
	*p = x
	return p
}

func (x UserVerificationAnalysis_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserVerificationAnalysis_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[34].Descriptor()
}

func (UserVerificationAnalysis_Status) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[34]
}

func (x UserVerificationAnalysis_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserVerificationAnalysis_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserVerificationAnalysis_Status(num)
	return nil
}

// Deprecated: Use UserVerificationAnalysis_Status.Descriptor instead.
func (UserVerificationAnalysis_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{136, 0}
}

type UserSubscriptionInfo_Level int32

const (
	UserSubscriptionInfo_STANDARD UserSubscriptionInfo_Level = 0
	UserSubscriptionInfo_PRO      UserSubscriptionInfo_Level = 1
)

// Enum value maps for UserSubscriptionInfo_Level.
var (
	UserSubscriptionInfo_Level_name = map[int32]string{
		0: "STANDARD",
		1: "PRO",
	}
	UserSubscriptionInfo_Level_value = map[string]int32{
		"STANDARD": 0,
		"PRO":      1,
	}
)

func (x UserSubscriptionInfo_Level) Enum() *UserSubscriptionInfo_Level {
	p := new(UserSubscriptionInfo_Level)
	*p = x
	return p
}

func (x UserSubscriptionInfo_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSubscriptionInfo_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[35].Descriptor()
}

func (UserSubscriptionInfo_Level) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[35]
}

func (x UserSubscriptionInfo_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserSubscriptionInfo_Level) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserSubscriptionInfo_Level(num)
	return nil
}

// Deprecated: Use UserSubscriptionInfo_Level.Descriptor instead.
func (UserSubscriptionInfo_Level) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{137, 0}
}

type UserSubscriptionInfo_Status int32

const (
	UserSubscriptionInfo_UNKNOWN      UserSubscriptionInfo_Status = 0
	UserSubscriptionInfo_ACTIVE       UserSubscriptionInfo_Status = 1
	UserSubscriptionInfo_EXPIRED      UserSubscriptionInfo_Status = 2
	UserSubscriptionInfo_REVOKED      UserSubscriptionInfo_Status = 3
	UserSubscriptionInfo_GRACE_PERIOD UserSubscriptionInfo_Status = 4
	UserSubscriptionInfo_PAUSE_HOLD   UserSubscriptionInfo_Status = 5
)

// Enum value maps for UserSubscriptionInfo_Status.
var (
	UserSubscriptionInfo_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "ACTIVE",
		2: "EXPIRED",
		3: "REVOKED",
		4: "GRACE_PERIOD",
		5: "PAUSE_HOLD",
	}
	UserSubscriptionInfo_Status_value = map[string]int32{
		"UNKNOWN":      0,
		"ACTIVE":       1,
		"EXPIRED":      2,
		"REVOKED":      3,
		"GRACE_PERIOD": 4,
		"PAUSE_HOLD":   5,
	}
)

func (x UserSubscriptionInfo_Status) Enum() *UserSubscriptionInfo_Status {
	p := new(UserSubscriptionInfo_Status)
	*p = x
	return p
}

func (x UserSubscriptionInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSubscriptionInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_ei_proto_enumTypes[36].Descriptor()
}

func (UserSubscriptionInfo_Status) Type() protoreflect.EnumType {
	return &file_go_ei_proto_enumTypes[36]
}

func (x UserSubscriptionInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *UserSubscriptionInfo_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = UserSubscriptionInfo_Status(num)
	return nil
}

// Deprecated: Use UserSubscriptionInfo_Status.Descriptor instead.
func (UserSubscriptionInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{137, 1}
}

type Vector3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z             *float32               `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector3) Reset() {
	*x = Vector3{}
	mi := &file_go_ei_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector3) ProtoMessage() {}

func (x *Vector3) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector3.ProtoReflect.Descriptor instead.
func (*Vector3) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{0}
}

func (x *Vector3) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Vector3) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Vector3) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

type Vector4 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             *float32               `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y             *float32               `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z             *float32               `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
	W             *float32               `protobuf:"fixed32,4,opt,name=w" json:"w,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector4) Reset() {
	*x = Vector4{}
	mi := &file_go_ei_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector4) ProtoMessage() {}

func (x *Vector4) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector4.ProtoReflect.Descriptor instead.
func (*Vector4) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{1}
}

func (x *Vector4) GetX() float32 {
	if x != nil && x.X != nil {
		return *x.X
	}
	return 0
}

func (x *Vector4) GetY() float32 {
	if x != nil && x.Y != nil {
		return *x.Y
	}
	return 0
}

func (x *Vector4) GetZ() float32 {
	if x != nil && x.Z != nil {
		return *x.Z
	}
	return 0
}

func (x *Vector4) GetW() float32 {
	if x != nil && x.W != nil {
		return *x.W
	}
	return 0
}

type Backup struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	EiUserId         *string                `protobuf:"bytes,18,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	GameServicesId   *string                `protobuf:"bytes,16,opt,name=game_services_id,json=gameServicesId" json:"game_services_id,omitempty"`
	PushUserId       *string                `protobuf:"bytes,26,opt,name=push_user_id,json=pushUserId" json:"push_user_id,omitempty"`
	DeviceId         *string                `protobuf:"bytes,17,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	UserName         *string                `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	ApproxTime       *float64               `protobuf:"fixed64,3,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	Version          *uint32                `protobuf:"varint,21,opt,name=version,def=0" json:"version,omitempty"`
	ForceOfferBackup *bool                  `protobuf:"varint,20,opt,name=force_offer_backup,json=forceOfferBackup" json:"force_offer_backup,omitempty"`
	ForceBackup      *bool                  `protobuf:"varint,22,opt,name=force_backup,json=forceBackup" json:"force_backup,omitempty"`
	Settings         *Backup_Settings       `protobuf:"bytes,4,opt,name=settings" json:"settings,omitempty"`
	Tutorial         *Backup_Tutorial       `protobuf:"bytes,5,opt,name=tutorial" json:"tutorial,omitempty"`
	Stats            *Backup_Stats          `protobuf:"bytes,6,opt,name=stats" json:"stats,omitempty"`
	Game             *Backup_Game           `protobuf:"bytes,7,opt,name=game" json:"game,omitempty"`
	Artifacts        *Backup_Artifacts      `protobuf:"bytes,14,opt,name=artifacts" json:"artifacts,omitempty"`
	Shells           *Backup_Shells         `protobuf:"bytes,25,opt,name=shells" json:"shells,omitempty"`
	Sim              *Backup_Simulation     `protobuf:"bytes,8,opt,name=sim" json:"sim,omitempty"`
	Farms            []*Backup_Simulation   `protobuf:"bytes,12,rep,name=farms" json:"farms,omitempty"`
	Mission          *Backup_Mission        `protobuf:"bytes,9,opt,name=mission" json:"mission,omitempty"`
	Misc             *Backup_Misc           `protobuf:"bytes,10,opt,name=misc" json:"misc,omitempty"`
	Contracts        *MyContracts           `protobuf:"bytes,13,opt,name=contracts" json:"contracts,omitempty"`
	ArtifactsDb      *ArtifactsDB           `protobuf:"bytes,15,opt,name=artifacts_db,json=artifactsDb" json:"artifacts_db,omitempty"`
	ShellDb          *ShellDB               `protobuf:"bytes,24,opt,name=shell_db,json=shellDb" json:"shell_db,omitempty"`
	ReadMailIds      []string               `protobuf:"bytes,23,rep,name=read_mail_ids,json=readMailIds" json:"read_mail_ids,omitempty"`
	MailState        *MailState             `protobuf:"bytes,27,opt,name=mail_state,json=mailState" json:"mail_state,omitempty"`
	Checksum         *uint64                `protobuf:"varint,100,opt,name=checksum" json:"checksum,omitempty"`
	Signature        *string                `protobuf:"bytes,101,opt,name=signature" json:"signature,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

// Default values for Backup fields.
const (
	Default_Backup_Version = uint32(0)
)

func (x *Backup) Reset() {
	*x = Backup{}
	mi := &file_go_ei_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup) ProtoMessage() {}

func (x *Backup) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup.ProtoReflect.Descriptor instead.
func (*Backup) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2}
}

func (x *Backup) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *Backup) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *Backup) GetGameServicesId() string {
	if x != nil && x.GameServicesId != nil {
		return *x.GameServicesId
	}
	return ""
}

func (x *Backup) GetPushUserId() string {
	if x != nil && x.PushUserId != nil {
		return *x.PushUserId
	}
	return ""
}

func (x *Backup) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *Backup) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *Backup) GetApproxTime() float64 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

func (x *Backup) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return Default_Backup_Version
}

func (x *Backup) GetForceOfferBackup() bool {
	if x != nil && x.ForceOfferBackup != nil {
		return *x.ForceOfferBackup
	}
	return false
}

func (x *Backup) GetForceBackup() bool {
	if x != nil && x.ForceBackup != nil {
		return *x.ForceBackup
	}
	return false
}

func (x *Backup) GetSettings() *Backup_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *Backup) GetTutorial() *Backup_Tutorial {
	if x != nil {
		return x.Tutorial
	}
	return nil
}

func (x *Backup) GetStats() *Backup_Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Backup) GetGame() *Backup_Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *Backup) GetArtifacts() *Backup_Artifacts {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *Backup) GetShells() *Backup_Shells {
	if x != nil {
		return x.Shells
	}
	return nil
}

func (x *Backup) GetSim() *Backup_Simulation {
	if x != nil {
		return x.Sim
	}
	return nil
}

func (x *Backup) GetFarms() []*Backup_Simulation {
	if x != nil {
		return x.Farms
	}
	return nil
}

func (x *Backup) GetMission() *Backup_Mission {
	if x != nil {
		return x.Mission
	}
	return nil
}

func (x *Backup) GetMisc() *Backup_Misc {
	if x != nil {
		return x.Misc
	}
	return nil
}

func (x *Backup) GetContracts() *MyContracts {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *Backup) GetArtifactsDb() *ArtifactsDB {
	if x != nil {
		return x.ArtifactsDb
	}
	return nil
}

func (x *Backup) GetShellDb() *ShellDB {
	if x != nil {
		return x.ShellDb
	}
	return nil
}

func (x *Backup) GetReadMailIds() []string {
	if x != nil {
		return x.ReadMailIds
	}
	return nil
}

func (x *Backup) GetMailState() *MailState {
	if x != nil {
		return x.MailState
	}
	return nil
}

func (x *Backup) GetChecksum() uint64 {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return 0
}

func (x *Backup) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

type EggIncFirstContactRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Rinfo          *BasicRequestInfo      `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	EiUserId       *string                `protobuf:"bytes,4,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	UserId         *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	GameServicesId *string                `protobuf:"bytes,7,opt,name=game_services_id,json=gameServicesId" json:"game_services_id,omitempty"`
	DeviceId       *string                `protobuf:"bytes,5,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Username       *string                `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	ClientVersion  *uint32                `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Platform       *Platform              `protobuf:"varint,3,opt,name=platform,enum=ei.Platform" json:"platform,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *EggIncFirstContactRequest) Reset() {
	*x = EggIncFirstContactRequest{}
	mi := &file_go_ei_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EggIncFirstContactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncFirstContactRequest) ProtoMessage() {}

func (x *EggIncFirstContactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncFirstContactRequest.ProtoReflect.Descriptor instead.
func (*EggIncFirstContactRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{3}
}

func (x *EggIncFirstContactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *EggIncFirstContactRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetGameServicesId() string {
	if x != nil && x.GameServicesId != nil {
		return *x.GameServicesId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *EggIncFirstContactRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *EggIncFirstContactRequest) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

type EggIncFirstContactResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EiUserId       *string                `protobuf:"bytes,2,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	IdsTransferred []string               `protobuf:"bytes,3,rep,name=ids_transferred,json=idsTransferred" json:"ids_transferred,omitempty"`
	ErrorCode      *uint32                `protobuf:"varint,4,opt,name=error_code,json=errorCode,def=0" json:"error_code,omitempty"`
	ErrorMessage   *string                `protobuf:"bytes,5,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Backup         *Backup                `protobuf:"bytes,1,opt,name=backup" json:"backup,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for EggIncFirstContactResponse fields.
const (
	Default_EggIncFirstContactResponse_ErrorCode = uint32(0)
)

func (x *EggIncFirstContactResponse) Reset() {
	*x = EggIncFirstContactResponse{}
	mi := &file_go_ei_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EggIncFirstContactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncFirstContactResponse) ProtoMessage() {}

func (x *EggIncFirstContactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncFirstContactResponse.ProtoReflect.Descriptor instead.
func (*EggIncFirstContactResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{4}
}

func (x *EggIncFirstContactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *EggIncFirstContactResponse) GetIdsTransferred() []string {
	if x != nil {
		return x.IdsTransferred
	}
	return nil
}

func (x *EggIncFirstContactResponse) GetErrorCode() uint32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return Default_EggIncFirstContactResponse_ErrorCode
}

func (x *EggIncFirstContactResponse) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *EggIncFirstContactResponse) GetBackup() *Backup {
	if x != nil {
		return x.Backup
	}
	return nil
}

type EggIncAdConfig struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NetworkPriority []AdNetwork            `protobuf:"varint,1,rep,name=network_priority,json=networkPriority,enum=ei.AdNetwork" json:"network_priority,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EggIncAdConfig) Reset() {
	*x = EggIncAdConfig{}
	mi := &file_go_ei_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EggIncAdConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncAdConfig) ProtoMessage() {}

func (x *EggIncAdConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncAdConfig.ProtoReflect.Descriptor instead.
func (*EggIncAdConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{5}
}

func (x *EggIncAdConfig) GetNetworkPriority() []AdNetwork {
	if x != nil {
		return x.NetworkPriority
	}
	return nil
}

type DailyGiftInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CurrentDay       *uint32                `protobuf:"varint,1,opt,name=current_day,json=currentDay" json:"current_day,omitempty"`
	SecondsToNextDay *float64               `protobuf:"fixed64,2,opt,name=seconds_to_next_day,json=secondsToNextDay" json:"seconds_to_next_day,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DailyGiftInfo) Reset() {
	*x = DailyGiftInfo{}
	mi := &file_go_ei_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyGiftInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyGiftInfo) ProtoMessage() {}

func (x *DailyGiftInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyGiftInfo.ProtoReflect.Descriptor instead.
func (*DailyGiftInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{6}
}

func (x *DailyGiftInfo) GetCurrentDay() uint32 {
	if x != nil && x.CurrentDay != nil {
		return *x.CurrentDay
	}
	return 0
}

func (x *DailyGiftInfo) GetSecondsToNextDay() float64 {
	if x != nil && x.SecondsToNextDay != nil {
		return *x.SecondsToNextDay
	}
	return 0
}

type SalesInfoRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	UserId               *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PiggyFull            *bool                  `protobuf:"varint,2,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull       *bool                  `protobuf:"varint,3,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	SecondsFullRealtime  *float64               `protobuf:"fixed64,4,opt,name=seconds_full_realtime,json=secondsFullRealtime" json:"seconds_full_realtime,omitempty"`
	SecondsFullGametime  *float64               `protobuf:"fixed64,5,opt,name=seconds_full_gametime,json=secondsFullGametime" json:"seconds_full_gametime,omitempty"`
	LostIncrements       *uint32                `protobuf:"varint,7,opt,name=lost_increments,json=lostIncrements" json:"lost_increments,omitempty"`
	CurrentClientVersion *uint32                `protobuf:"varint,10,opt,name=current_client_version,json=currentClientVersion" json:"current_client_version,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SalesInfoRequest) Reset() {
	*x = SalesInfoRequest{}
	mi := &file_go_ei_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SalesInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInfoRequest) ProtoMessage() {}

func (x *SalesInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInfoRequest.ProtoReflect.Descriptor instead.
func (*SalesInfoRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{7}
}

func (x *SalesInfoRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SalesInfoRequest) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *SalesInfoRequest) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *SalesInfoRequest) GetSecondsFullRealtime() float64 {
	if x != nil && x.SecondsFullRealtime != nil {
		return *x.SecondsFullRealtime
	}
	return 0
}

func (x *SalesInfoRequest) GetSecondsFullGametime() float64 {
	if x != nil && x.SecondsFullGametime != nil {
		return *x.SecondsFullGametime
	}
	return 0
}

func (x *SalesInfoRequest) GetLostIncrements() uint32 {
	if x != nil && x.LostIncrements != nil {
		return *x.LostIncrements
	}
	return 0
}

func (x *SalesInfoRequest) GetCurrentClientVersion() uint32 {
	if x != nil && x.CurrentClientVersion != nil {
		return *x.CurrentClientVersion
	}
	return 0
}

type IAPSaleEntry struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ProductId        *string                `protobuf:"bytes,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	SecondsRemaining *float64               `protobuf:"fixed64,2,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	DiscountString   *string                `protobuf:"bytes,3,opt,name=discount_string,json=discountString" json:"discount_string,omitempty"`
	SaleId           *string                `protobuf:"bytes,4,opt,name=sale_id,json=saleId" json:"sale_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IAPSaleEntry) Reset() {
	*x = IAPSaleEntry{}
	mi := &file_go_ei_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IAPSaleEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IAPSaleEntry) ProtoMessage() {}

func (x *IAPSaleEntry) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IAPSaleEntry.ProtoReflect.Descriptor instead.
func (*IAPSaleEntry) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{8}
}

func (x *IAPSaleEntry) GetProductId() string {
	if x != nil && x.ProductId != nil {
		return *x.ProductId
	}
	return ""
}

func (x *IAPSaleEntry) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *IAPSaleEntry) GetDiscountString() string {
	if x != nil && x.DiscountString != nil {
		return *x.DiscountString
	}
	return ""
}

func (x *IAPSaleEntry) GetSaleId() string {
	if x != nil && x.SaleId != nil {
		return *x.SaleId
	}
	return ""
}

type SalesInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sales         []*IAPSaleEntry        `protobuf:"bytes,1,rep,name=sales" json:"sales,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SalesInfo) Reset() {
	*x = SalesInfo{}
	mi := &file_go_ei_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SalesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesInfo) ProtoMessage() {}

func (x *SalesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesInfo.ProtoReflect.Descriptor instead.
func (*SalesInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{9}
}

func (x *SalesInfo) GetSales() []*IAPSaleEntry {
	if x != nil {
		return x.Sales
	}
	return nil
}

type EggIncEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Identifier       *string                `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	SecondsRemaining *float64               `protobuf:"fixed64,2,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Type             *string                `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Multiplier       *float64               `protobuf:"fixed64,4,opt,name=multiplier" json:"multiplier,omitempty"`
	Subtitle         *string                `protobuf:"bytes,5,opt,name=subtitle" json:"subtitle,omitempty"`
	StartTime        *float64               `protobuf:"fixed64,6,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Duration         *float64               `protobuf:"fixed64,7,opt,name=duration" json:"duration,omitempty"`
	CcOnly           *bool                  `protobuf:"varint,8,opt,name=cc_only,json=ccOnly" json:"cc_only,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *EggIncEvent) Reset() {
	*x = EggIncEvent{}
	mi := &file_go_ei_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EggIncEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncEvent) ProtoMessage() {}

func (x *EggIncEvent) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncEvent.ProtoReflect.Descriptor instead.
func (*EggIncEvent) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{10}
}

func (x *EggIncEvent) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *EggIncEvent) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *EggIncEvent) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *EggIncEvent) GetMultiplier() float64 {
	if x != nil && x.Multiplier != nil {
		return *x.Multiplier
	}
	return 0
}

func (x *EggIncEvent) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *EggIncEvent) GetStartTime() float64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *EggIncEvent) GetDuration() float64 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *EggIncEvent) GetCcOnly() bool {
	if x != nil && x.CcOnly != nil {
		return *x.CcOnly
	}
	return false
}

type EggIncCurrentEvents struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Events        []*EggIncEvent         `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EggIncCurrentEvents) Reset() {
	*x = EggIncCurrentEvents{}
	mi := &file_go_ei_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EggIncCurrentEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EggIncCurrentEvents) ProtoMessage() {}

func (x *EggIncCurrentEvents) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EggIncCurrentEvents.ProtoReflect.Descriptor instead.
func (*EggIncCurrentEvents) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{11}
}

func (x *EggIncCurrentEvents) GetEvents() []*EggIncEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type DeviceInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DeviceId        *string                `protobuf:"bytes,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	AdvertisingId   *string                `protobuf:"bytes,13,opt,name=advertising_id,json=advertisingId" json:"advertising_id,omitempty"`
	Platform        *string                `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	FormFactor      *string                `protobuf:"bytes,3,opt,name=form_factor,json=formFactor" json:"form_factor,omitempty"`
	DeviceName      *string                `protobuf:"bytes,4,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	PlatformVersion *string                `protobuf:"bytes,5,opt,name=platform_version,json=platformVersion" json:"platform_version,omitempty"`
	LocaleCountry   *string                `protobuf:"bytes,6,opt,name=locale_country,json=localeCountry" json:"locale_country,omitempty"`
	LocaleLanguage  *string                `protobuf:"bytes,7,opt,name=locale_language,json=localeLanguage" json:"locale_language,omitempty"`
	GpuVendor       *string                `protobuf:"bytes,8,opt,name=gpu_vendor,json=gpuVendor" json:"gpu_vendor,omitempty"`
	GpuModel        *string                `protobuf:"bytes,9,opt,name=gpu_model,json=gpuModel" json:"gpu_model,omitempty"`
	DeviceBucket    *string                `protobuf:"bytes,10,opt,name=device_bucket,json=deviceBucket" json:"device_bucket,omitempty"`
	ScreenWidth     *uint32                `protobuf:"varint,11,opt,name=screen_width,json=screenWidth" json:"screen_width,omitempty"`
	ScreenHeight    *uint32                `protobuf:"varint,12,opt,name=screen_height,json=screenHeight" json:"screen_height,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	mi := &file_go_ei_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{12}
}

func (x *DeviceInfo) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *DeviceInfo) GetAdvertisingId() string {
	if x != nil && x.AdvertisingId != nil {
		return *x.AdvertisingId
	}
	return ""
}

func (x *DeviceInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *DeviceInfo) GetFormFactor() string {
	if x != nil && x.FormFactor != nil {
		return *x.FormFactor
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil && x.DeviceName != nil {
		return *x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetPlatformVersion() string {
	if x != nil && x.PlatformVersion != nil {
		return *x.PlatformVersion
	}
	return ""
}

func (x *DeviceInfo) GetLocaleCountry() string {
	if x != nil && x.LocaleCountry != nil {
		return *x.LocaleCountry
	}
	return ""
}

func (x *DeviceInfo) GetLocaleLanguage() string {
	if x != nil && x.LocaleLanguage != nil {
		return *x.LocaleLanguage
	}
	return ""
}

func (x *DeviceInfo) GetGpuVendor() string {
	if x != nil && x.GpuVendor != nil {
		return *x.GpuVendor
	}
	return ""
}

func (x *DeviceInfo) GetGpuModel() string {
	if x != nil && x.GpuModel != nil {
		return *x.GpuModel
	}
	return ""
}

func (x *DeviceInfo) GetDeviceBucket() string {
	if x != nil && x.DeviceBucket != nil {
		return *x.DeviceBucket
	}
	return ""
}

func (x *DeviceInfo) GetScreenWidth() uint32 {
	if x != nil && x.ScreenWidth != nil {
		return *x.ScreenWidth
	}
	return 0
}

func (x *DeviceInfo) GetScreenHeight() uint32 {
	if x != nil && x.ScreenHeight != nil {
		return *x.ScreenHeight
	}
	return 0
}

type AppInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	VersionStr            *string                `protobuf:"bytes,1,opt,name=version_str,json=versionStr" json:"version_str,omitempty"`
	Sessions              *uint32                `protobuf:"varint,2,opt,name=sessions" json:"sessions,omitempty"`
	NumPrestiges          *uint32                `protobuf:"varint,3,opt,name=num_prestiges,json=numPrestiges" json:"num_prestiges,omitempty"`
	SoulEggs              *uint64                `protobuf:"varint,4,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	CurrentEgg            *uint32                `protobuf:"varint,5,opt,name=current_egg,json=currentEgg" json:"current_egg,omitempty"`
	GoldEarned            *uint64                `protobuf:"varint,6,opt,name=gold_earned,json=goldEarned" json:"gold_earned,omitempty"`
	GoldSpent             *uint64                `protobuf:"varint,7,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	CurrentMission        *uint32                `protobuf:"varint,8,opt,name=current_mission,json=currentMission" json:"current_mission,omitempty"`
	PiggySize             *uint32                `protobuf:"varint,9,opt,name=piggy_size,json=piggySize" json:"piggy_size,omitempty"`
	NumPiggyBreaks        *uint64                `protobuf:"varint,10,opt,name=num_piggy_breaks,json=numPiggyBreaks" json:"num_piggy_breaks,omitempty"`
	VerifiedPiggyBreaks   *uint64                `protobuf:"varint,29,opt,name=verified_piggy_breaks,json=verifiedPiggyBreaks" json:"verified_piggy_breaks,omitempty"`
	IapPacksPurchased     *uint64                `protobuf:"varint,11,opt,name=iap_packs_purchased,json=iapPacksPurchased" json:"iap_packs_purchased,omitempty"`
	PermitLevel           *uint32                `protobuf:"varint,12,opt,name=permit_level,json=permitLevel" json:"permit_level,omitempty"`
	VideoDoublerUses      *uint64                `protobuf:"varint,15,opt,name=video_doubler_uses,json=videoDoublerUses" json:"video_doubler_uses,omitempty"`
	DroneTakedowns        *uint64                `protobuf:"varint,18,opt,name=drone_takedowns,json=droneTakedowns" json:"drone_takedowns,omitempty"`
	DroneTakedownsElite   *uint64                `protobuf:"varint,19,opt,name=drone_takedowns_elite,json=droneTakedownsElite" json:"drone_takedowns_elite,omitempty"`
	TrophiesUnlocked      *bool                  `protobuf:"varint,20,opt,name=trophies_unlocked,json=trophiesUnlocked" json:"trophies_unlocked,omitempty"`
	EggLevel              *float32               `protobuf:"fixed32,21,opt,name=egg_level,json=eggLevel" json:"egg_level,omitempty"`
	StruggleFactor        *float32               `protobuf:"fixed32,22,opt,name=struggle_factor,json=struggleFactor" json:"struggle_factor,omitempty"`
	PiggyFull             *bool                  `protobuf:"varint,23,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull        *bool                  `protobuf:"varint,24,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	TimePiggyFullRealtime *float64               `protobuf:"fixed64,25,opt,name=time_piggy_full_realtime,json=timePiggyFullRealtime" json:"time_piggy_full_realtime,omitempty"`
	TimePiggyFullGametime *float64               `protobuf:"fixed64,26,opt,name=time_piggy_full_gametime,json=timePiggyFullGametime" json:"time_piggy_full_gametime,omitempty"`
	LostPiggyIncrements   *uint64                `protobuf:"varint,27,opt,name=lost_piggy_increments,json=lostPiggyIncrements" json:"lost_piggy_increments,omitempty"`
	SaleId                *string                `protobuf:"bytes,28,opt,name=sale_id,json=saleId" json:"sale_id,omitempty"`
	UnlimitedChickensUses *uint64                `protobuf:"varint,13,opt,name=unlimited_chickens_uses,json=unlimitedChickensUses" json:"unlimited_chickens_uses,omitempty"`
	RefillUses            *uint64                `protobuf:"varint,14,opt,name=refill_uses,json=refillUses" json:"refill_uses,omitempty"`
	ShortWarpUses         *uint64                `protobuf:"varint,16,opt,name=short_warp_uses,json=shortWarpUses" json:"short_warp_uses,omitempty"`
	LongWarpUses          *uint64                `protobuf:"varint,17,opt,name=long_warp_uses,json=longWarpUses" json:"long_warp_uses,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AppInfo) Reset() {
	*x = AppInfo{}
	mi := &file_go_ei_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppInfo) ProtoMessage() {}

func (x *AppInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppInfo.ProtoReflect.Descriptor instead.
func (*AppInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{13}
}

func (x *AppInfo) GetVersionStr() string {
	if x != nil && x.VersionStr != nil {
		return *x.VersionStr
	}
	return ""
}

func (x *AppInfo) GetSessions() uint32 {
	if x != nil && x.Sessions != nil {
		return *x.Sessions
	}
	return 0
}

func (x *AppInfo) GetNumPrestiges() uint32 {
	if x != nil && x.NumPrestiges != nil {
		return *x.NumPrestiges
	}
	return 0
}

func (x *AppInfo) GetSoulEggs() uint64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *AppInfo) GetCurrentEgg() uint32 {
	if x != nil && x.CurrentEgg != nil {
		return *x.CurrentEgg
	}
	return 0
}

func (x *AppInfo) GetGoldEarned() uint64 {
	if x != nil && x.GoldEarned != nil {
		return *x.GoldEarned
	}
	return 0
}

func (x *AppInfo) GetGoldSpent() uint64 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

func (x *AppInfo) GetCurrentMission() uint32 {
	if x != nil && x.CurrentMission != nil {
		return *x.CurrentMission
	}
	return 0
}

func (x *AppInfo) GetPiggySize() uint32 {
	if x != nil && x.PiggySize != nil {
		return *x.PiggySize
	}
	return 0
}

func (x *AppInfo) GetNumPiggyBreaks() uint64 {
	if x != nil && x.NumPiggyBreaks != nil {
		return *x.NumPiggyBreaks
	}
	return 0
}

func (x *AppInfo) GetVerifiedPiggyBreaks() uint64 {
	if x != nil && x.VerifiedPiggyBreaks != nil {
		return *x.VerifiedPiggyBreaks
	}
	return 0
}

func (x *AppInfo) GetIapPacksPurchased() uint64 {
	if x != nil && x.IapPacksPurchased != nil {
		return *x.IapPacksPurchased
	}
	return 0
}

func (x *AppInfo) GetPermitLevel() uint32 {
	if x != nil && x.PermitLevel != nil {
		return *x.PermitLevel
	}
	return 0
}

func (x *AppInfo) GetVideoDoublerUses() uint64 {
	if x != nil && x.VideoDoublerUses != nil {
		return *x.VideoDoublerUses
	}
	return 0
}

func (x *AppInfo) GetDroneTakedowns() uint64 {
	if x != nil && x.DroneTakedowns != nil {
		return *x.DroneTakedowns
	}
	return 0
}

func (x *AppInfo) GetDroneTakedownsElite() uint64 {
	if x != nil && x.DroneTakedownsElite != nil {
		return *x.DroneTakedownsElite
	}
	return 0
}

func (x *AppInfo) GetTrophiesUnlocked() bool {
	if x != nil && x.TrophiesUnlocked != nil {
		return *x.TrophiesUnlocked
	}
	return false
}

func (x *AppInfo) GetEggLevel() float32 {
	if x != nil && x.EggLevel != nil {
		return *x.EggLevel
	}
	return 0
}

func (x *AppInfo) GetStruggleFactor() float32 {
	if x != nil && x.StruggleFactor != nil {
		return *x.StruggleFactor
	}
	return 0
}

func (x *AppInfo) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *AppInfo) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *AppInfo) GetTimePiggyFullRealtime() float64 {
	if x != nil && x.TimePiggyFullRealtime != nil {
		return *x.TimePiggyFullRealtime
	}
	return 0
}

func (x *AppInfo) GetTimePiggyFullGametime() float64 {
	if x != nil && x.TimePiggyFullGametime != nil {
		return *x.TimePiggyFullGametime
	}
	return 0
}

func (x *AppInfo) GetLostPiggyIncrements() uint64 {
	if x != nil && x.LostPiggyIncrements != nil {
		return *x.LostPiggyIncrements
	}
	return 0
}

func (x *AppInfo) GetSaleId() string {
	if x != nil && x.SaleId != nil {
		return *x.SaleId
	}
	return ""
}

func (x *AppInfo) GetUnlimitedChickensUses() uint64 {
	if x != nil && x.UnlimitedChickensUses != nil {
		return *x.UnlimitedChickensUses
	}
	return 0
}

func (x *AppInfo) GetRefillUses() uint64 {
	if x != nil && x.RefillUses != nil {
		return *x.RefillUses
	}
	return 0
}

func (x *AppInfo) GetShortWarpUses() uint64 {
	if x != nil && x.ShortWarpUses != nil {
		return *x.ShortWarpUses
	}
	return 0
}

func (x *AppInfo) GetLongWarpUses() uint64 {
	if x != nil && x.LongWarpUses != nil {
		return *x.LongWarpUses
	}
	return 0
}

type ActionKeyValuePair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *string                `protobuf:"bytes,1,req,name=key" json:"key,omitempty"`
	Value         *string                `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionKeyValuePair) Reset() {
	*x = ActionKeyValuePair{}
	mi := &file_go_ei_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionKeyValuePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionKeyValuePair) ProtoMessage() {}

func (x *ActionKeyValuePair) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionKeyValuePair.ProtoReflect.Descriptor instead.
func (*ActionKeyValuePair) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{14}
}

func (x *ActionKeyValuePair) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *ActionKeyValuePair) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type GenericAction struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CcUser         *bool                  `protobuf:"varint,9,opt,name=cc_user,json=ccUser" json:"cc_user,omitempty"`
	AdvertisingId  *string                `protobuf:"bytes,7,opt,name=advertising_id,json=advertisingId" json:"advertising_id,omitempty"`
	ApproxTime_DEP *float32               `protobuf:"fixed32,2,opt,name=approx_time_DEP,json=approxTimeDEP" json:"approx_time_DEP,omitempty"`
	ApproxTime     *float64               `protobuf:"fixed64,8,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	ActionName     *string                `protobuf:"bytes,3,opt,name=action_name,json=actionName" json:"action_name,omitempty"`
	Data           []*ActionKeyValuePair  `protobuf:"bytes,4,rep,name=data" json:"data,omitempty"`
	App            *AppInfo               `protobuf:"bytes,5,opt,name=app" json:"app,omitempty"`
	Device         *DeviceInfo            `protobuf:"bytes,6,opt,name=device" json:"device,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenericAction) Reset() {
	*x = GenericAction{}
	mi := &file_go_ei_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericAction) ProtoMessage() {}

func (x *GenericAction) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericAction.ProtoReflect.Descriptor instead.
func (*GenericAction) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{15}
}

func (x *GenericAction) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GenericAction) GetCcUser() bool {
	if x != nil && x.CcUser != nil {
		return *x.CcUser
	}
	return false
}

func (x *GenericAction) GetAdvertisingId() string {
	if x != nil && x.AdvertisingId != nil {
		return *x.AdvertisingId
	}
	return ""
}

func (x *GenericAction) GetApproxTime_DEP() float32 {
	if x != nil && x.ApproxTime_DEP != nil {
		return *x.ApproxTime_DEP
	}
	return 0
}

func (x *GenericAction) GetApproxTime() float64 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

func (x *GenericAction) GetActionName() string {
	if x != nil && x.ActionName != nil {
		return *x.ActionName
	}
	return ""
}

func (x *GenericAction) GetData() []*ActionKeyValuePair {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GenericAction) GetApp() *AppInfo {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *GenericAction) GetDevice() *DeviceInfo {
	if x != nil {
		return x.Device
	}
	return nil
}

type GenericActionBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	Actions       []*GenericAction       `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericActionBatchRequest) Reset() {
	*x = GenericActionBatchRequest{}
	mi := &file_go_ei_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericActionBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericActionBatchRequest) ProtoMessage() {}

func (x *GenericActionBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericActionBatchRequest.ProtoReflect.Descriptor instead.
func (*GenericActionBatchRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{16}
}

func (x *GenericActionBatchRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *GenericActionBatchRequest) GetActions() []*GenericAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

type VerifyPurchaseRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Rinfo                 *BasicRequestInfo      `protobuf:"bytes,6,opt,name=rinfo" json:"rinfo,omitempty"`
	Sku                   *string                `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	TransactionId         *string                `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	OriginalTransactionId *string                `protobuf:"bytes,8,opt,name=original_transaction_id,json=originalTransactionId" json:"original_transaction_id,omitempty"`
	Receipt               *string                `protobuf:"bytes,3,opt,name=receipt" json:"receipt,omitempty"`
	Platform              *string                `protobuf:"bytes,4,opt,name=platform" json:"platform,omitempty"`
	Sandbox               *bool                  `protobuf:"varint,7,opt,name=sandbox" json:"sandbox,omitempty"`
	Log                   *GenericAction         `protobuf:"bytes,5,opt,name=log" json:"log,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *VerifyPurchaseRequest) Reset() {
	*x = VerifyPurchaseRequest{}
	mi := &file_go_ei_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPurchaseRequest) ProtoMessage() {}

func (x *VerifyPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPurchaseRequest.ProtoReflect.Descriptor instead.
func (*VerifyPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{17}
}

func (x *VerifyPurchaseRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *VerifyPurchaseRequest) GetSku() string {
	if x != nil && x.Sku != nil {
		return *x.Sku
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetOriginalTransactionId() string {
	if x != nil && x.OriginalTransactionId != nil {
		return *x.OriginalTransactionId
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetReceipt() string {
	if x != nil && x.Receipt != nil {
		return *x.Receipt
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *VerifyPurchaseRequest) GetSandbox() bool {
	if x != nil && x.Sandbox != nil {
		return *x.Sandbox
	}
	return false
}

func (x *VerifyPurchaseRequest) GetLog() *GenericAction {
	if x != nil {
		return x.Log
	}
	return nil
}

type VerifyPurchaseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Verified      *bool                  `protobuf:"varint,1,opt,name=verified" json:"verified,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyPurchaseResponse) Reset() {
	*x = VerifyPurchaseResponse{}
	mi := &file_go_ei_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyPurchaseResponse) ProtoMessage() {}

func (x *VerifyPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyPurchaseResponse.ProtoReflect.Descriptor instead.
func (*VerifyPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{18}
}

func (x *VerifyPurchaseResponse) GetVerified() bool {
	if x != nil && x.Verified != nil {
		return *x.Verified
	}
	return false
}

func (x *VerifyPurchaseResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type CurrencyFlowLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ApproxTime    *float64               `protobuf:"fixed64,2,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	Currency      *RewardType            `protobuf:"varint,3,opt,name=currency,enum=ei.RewardType" json:"currency,omitempty"`
	Amount        *int64                 `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	Location      *string                `protobuf:"bytes,5,opt,name=location" json:"location,omitempty"`
	Version       *string                `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	Platform      *string                `protobuf:"bytes,7,opt,name=platform" json:"platform,omitempty"`
	SoulEggs      *float64               `protobuf:"fixed64,8,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	TicketsSpent  *uint64                `protobuf:"varint,9,opt,name=tickets_spent,json=ticketsSpent" json:"tickets_spent,omitempty"`
	GoldSpent     *uint64                `protobuf:"varint,10,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyFlowLog) Reset() {
	*x = CurrencyFlowLog{}
	mi := &file_go_ei_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyFlowLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyFlowLog) ProtoMessage() {}

func (x *CurrencyFlowLog) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyFlowLog.ProtoReflect.Descriptor instead.
func (*CurrencyFlowLog) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{19}
}

func (x *CurrencyFlowLog) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CurrencyFlowLog) GetApproxTime() float64 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

func (x *CurrencyFlowLog) GetCurrency() RewardType {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return RewardType_CASH
}

func (x *CurrencyFlowLog) GetAmount() int64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *CurrencyFlowLog) GetLocation() string {
	if x != nil && x.Location != nil {
		return *x.Location
	}
	return ""
}

func (x *CurrencyFlowLog) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *CurrencyFlowLog) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *CurrencyFlowLog) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *CurrencyFlowLog) GetTicketsSpent() uint64 {
	if x != nil && x.TicketsSpent != nil {
		return *x.TicketsSpent
	}
	return 0
}

func (x *CurrencyFlowLog) GetGoldSpent() uint64 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

type CurrencyFlowBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,2,opt,name=rinfo" json:"rinfo,omitempty"`
	Logs          []*CurrencyFlowLog     `protobuf:"bytes,1,rep,name=logs" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CurrencyFlowBatchRequest) Reset() {
	*x = CurrencyFlowBatchRequest{}
	mi := &file_go_ei_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CurrencyFlowBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyFlowBatchRequest) ProtoMessage() {}

func (x *CurrencyFlowBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyFlowBatchRequest.ProtoReflect.Descriptor instead.
func (*CurrencyFlowBatchRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{20}
}

func (x *CurrencyFlowBatchRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *CurrencyFlowBatchRequest) GetLogs() []*CurrencyFlowLog {
	if x != nil {
		return x.Logs
	}
	return nil
}

type Reward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RewardType    *RewardType            `protobuf:"varint,1,opt,name=reward_type,json=rewardType,enum=ei.RewardType" json:"reward_type,omitempty"`
	RewardSubType *string                `protobuf:"bytes,2,opt,name=reward_sub_type,json=rewardSubType" json:"reward_sub_type,omitempty"`
	RewardAmount  *float64               `protobuf:"fixed64,3,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reward) Reset() {
	*x = Reward{}
	mi := &file_go_ei_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{21}
}

func (x *Reward) GetRewardType() RewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return RewardType_CASH
}

func (x *Reward) GetRewardSubType() string {
	if x != nil && x.RewardSubType != nil {
		return *x.RewardSubType
	}
	return ""
}

func (x *Reward) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

type GameModifier struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Dimension     *GameModifier_GameDimension `protobuf:"varint,1,opt,name=dimension,enum=ei.GameModifier_GameDimension" json:"dimension,omitempty"`
	Value         *float64                    `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	Description   *string                     `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GameModifier) Reset() {
	*x = GameModifier{}
	mi := &file_go_ei_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameModifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameModifier) ProtoMessage() {}

func (x *GameModifier) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameModifier.ProtoReflect.Descriptor instead.
func (*GameModifier) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{22}
}

func (x *GameModifier) GetDimension() GameModifier_GameDimension {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return GameModifier_INVALID
}

func (x *GameModifier) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *GameModifier) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type CustomEgg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *string                `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Value         *float64               `protobuf:"fixed64,4,opt,name=value" json:"value,omitempty"`
	HatcheryId    *string                `protobuf:"bytes,5,opt,name=hatchery_id,json=hatcheryId" json:"hatchery_id,omitempty"`
	HatcheryMaxX  *float64               `protobuf:"fixed64,6,opt,name=hatchery_max_x,json=hatcheryMaxX" json:"hatchery_max_x,omitempty"`
	Icon          *DLCItem               `protobuf:"bytes,7,opt,name=icon" json:"icon,omitempty"`
	IconWidth     *float64               `protobuf:"fixed64,21,opt,name=icon_width,json=iconWidth" json:"icon_width,omitempty"`
	IconHeight    *float64               `protobuf:"fixed64,22,opt,name=icon_height,json=iconHeight" json:"icon_height,omitempty"`
	Buffs         []*GameModifier        `protobuf:"bytes,8,rep,name=buffs" json:"buffs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CustomEgg) Reset() {
	*x = CustomEgg{}
	mi := &file_go_ei_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomEgg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomEgg) ProtoMessage() {}

func (x *CustomEgg) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomEgg.ProtoReflect.Descriptor instead.
func (*CustomEgg) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{23}
}

func (x *CustomEgg) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *CustomEgg) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CustomEgg) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CustomEgg) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *CustomEgg) GetHatcheryId() string {
	if x != nil && x.HatcheryId != nil {
		return *x.HatcheryId
	}
	return ""
}

func (x *CustomEgg) GetHatcheryMaxX() float64 {
	if x != nil && x.HatcheryMaxX != nil {
		return *x.HatcheryMaxX
	}
	return 0
}

func (x *CustomEgg) GetIcon() *DLCItem {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *CustomEgg) GetIconWidth() float64 {
	if x != nil && x.IconWidth != nil {
		return *x.IconWidth
	}
	return 0
}

func (x *CustomEgg) GetIconHeight() float64 {
	if x != nil && x.IconHeight != nil {
		return *x.IconHeight
	}
	return 0
}

func (x *CustomEgg) GetBuffs() []*GameModifier {
	if x != nil {
		return x.Buffs
	}
	return nil
}

type Contract struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	Identifier                *string                `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Name                      *string                `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	Description               *string                `protobuf:"bytes,10,opt,name=description" json:"description,omitempty"`
	Egg                       *Egg                   `protobuf:"varint,2,opt,name=egg,enum=ei.Egg" json:"egg,omitempty"`
	CustomEggId               *string                `protobuf:"bytes,25,opt,name=custom_egg_id,json=customEggId" json:"custom_egg_id,omitempty"`
	Goals                     []*Contract_Goal       `protobuf:"bytes,3,rep,name=goals" json:"goals,omitempty"`
	GoalSets                  []*Contract_GoalSet    `protobuf:"bytes,16,rep,name=goal_sets,json=goalSets" json:"goal_sets,omitempty"`
	GradeSpecs                []*Contract_GradeSpec  `protobuf:"bytes,20,rep,name=grade_specs,json=gradeSpecs" json:"grade_specs,omitempty"`
	SeasonId                  *string                `protobuf:"bytes,23,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	CoopAllowed               *bool                  `protobuf:"varint,4,opt,name=coop_allowed,json=coopAllowed" json:"coop_allowed,omitempty"`
	MaxCoopSize               *uint32                `protobuf:"varint,5,opt,name=max_coop_size,json=maxCoopSize" json:"max_coop_size,omitempty"`
	MaxBoosts                 *uint32                `protobuf:"varint,12,opt,name=max_boosts,json=maxBoosts" json:"max_boosts,omitempty"`
	MinutesPerToken           *float64               `protobuf:"fixed64,15,opt,name=minutes_per_token,json=minutesPerToken,def=60" json:"minutes_per_token,omitempty"`
	ChickenRunCooldownMinutes *float64               `protobuf:"fixed64,18,opt,name=chicken_run_cooldown_minutes,json=chickenRunCooldownMinutes,def=180" json:"chicken_run_cooldown_minutes,omitempty"`
	StartTime                 *float64               `protobuf:"fixed64,17,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	ExpirationTime            *float64               `protobuf:"fixed64,6,opt,name=expiration_time,json=expirationTime" json:"expiration_time,omitempty"`
	LengthSeconds             *float64               `protobuf:"fixed64,7,opt,name=length_seconds,json=lengthSeconds" json:"length_seconds,omitempty"`
	MaxSoulEggs               *float64               `protobuf:"fixed64,13,opt,name=max_soul_eggs,json=maxSoulEggs" json:"max_soul_eggs,omitempty"`
	MinClientVersion          *uint32                `protobuf:"varint,14,opt,name=min_client_version,json=minClientVersion" json:"min_client_version,omitempty"`
	Leggacy                   *bool                  `protobuf:"varint,19,opt,name=leggacy" json:"leggacy,omitempty"`
	CcOnly                    *bool                  `protobuf:"varint,22,opt,name=cc_only,json=ccOnly" json:"cc_only,omitempty"`
	DefaultShellIds           []string               `protobuf:"bytes,24,rep,name=default_shell_ids,json=defaultShellIds" json:"default_shell_ids,omitempty"`
	Debug                     *bool                  `protobuf:"varint,11,opt,name=debug" json:"debug,omitempty"`
	Key                       *string                `protobuf:"bytes,21,opt,name=key" json:"key,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

// Default values for Contract fields.
const (
	Default_Contract_MinutesPerToken           = float64(60)
	Default_Contract_ChickenRunCooldownMinutes = float64(180)
)

func (x *Contract) Reset() {
	*x = Contract{}
	mi := &file_go_ei_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{24}
}

func (x *Contract) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *Contract) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Contract) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Contract) GetEgg() Egg {
	if x != nil && x.Egg != nil {
		return *x.Egg
	}
	return Egg_EDIBLE
}

func (x *Contract) GetCustomEggId() string {
	if x != nil && x.CustomEggId != nil {
		return *x.CustomEggId
	}
	return ""
}

func (x *Contract) GetGoals() []*Contract_Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *Contract) GetGoalSets() []*Contract_GoalSet {
	if x != nil {
		return x.GoalSets
	}
	return nil
}

func (x *Contract) GetGradeSpecs() []*Contract_GradeSpec {
	if x != nil {
		return x.GradeSpecs
	}
	return nil
}

func (x *Contract) GetSeasonId() string {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return ""
}

func (x *Contract) GetCoopAllowed() bool {
	if x != nil && x.CoopAllowed != nil {
		return *x.CoopAllowed
	}
	return false
}

func (x *Contract) GetMaxCoopSize() uint32 {
	if x != nil && x.MaxCoopSize != nil {
		return *x.MaxCoopSize
	}
	return 0
}

func (x *Contract) GetMaxBoosts() uint32 {
	if x != nil && x.MaxBoosts != nil {
		return *x.MaxBoosts
	}
	return 0
}

func (x *Contract) GetMinutesPerToken() float64 {
	if x != nil && x.MinutesPerToken != nil {
		return *x.MinutesPerToken
	}
	return Default_Contract_MinutesPerToken
}

func (x *Contract) GetChickenRunCooldownMinutes() float64 {
	if x != nil && x.ChickenRunCooldownMinutes != nil {
		return *x.ChickenRunCooldownMinutes
	}
	return Default_Contract_ChickenRunCooldownMinutes
}

func (x *Contract) GetStartTime() float64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *Contract) GetExpirationTime() float64 {
	if x != nil && x.ExpirationTime != nil {
		return *x.ExpirationTime
	}
	return 0
}

func (x *Contract) GetLengthSeconds() float64 {
	if x != nil && x.LengthSeconds != nil {
		return *x.LengthSeconds
	}
	return 0
}

func (x *Contract) GetMaxSoulEggs() float64 {
	if x != nil && x.MaxSoulEggs != nil {
		return *x.MaxSoulEggs
	}
	return 0
}

func (x *Contract) GetMinClientVersion() uint32 {
	if x != nil && x.MinClientVersion != nil {
		return *x.MinClientVersion
	}
	return 0
}

func (x *Contract) GetLeggacy() bool {
	if x != nil && x.Leggacy != nil {
		return *x.Leggacy
	}
	return false
}

func (x *Contract) GetCcOnly() bool {
	if x != nil && x.CcOnly != nil {
		return *x.CcOnly
	}
	return false
}

func (x *Contract) GetDefaultShellIds() []string {
	if x != nil {
		return x.DefaultShellIds
	}
	return nil
}

func (x *Contract) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

func (x *Contract) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type ContractSeasonGoal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cxp           *float64               `protobuf:"fixed64,1,opt,name=cxp" json:"cxp,omitempty"`
	RewardType    *RewardType            `protobuf:"varint,3,opt,name=reward_type,json=rewardType,enum=ei.RewardType" json:"reward_type,omitempty"`
	RewardSubType *string                `protobuf:"bytes,4,opt,name=reward_sub_type,json=rewardSubType" json:"reward_sub_type,omitempty"`
	RewardAmount  *float64               `protobuf:"fixed64,5,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSeasonGoal) Reset() {
	*x = ContractSeasonGoal{}
	mi := &file_go_ei_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSeasonGoal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSeasonGoal) ProtoMessage() {}

func (x *ContractSeasonGoal) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSeasonGoal.ProtoReflect.Descriptor instead.
func (*ContractSeasonGoal) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{25}
}

func (x *ContractSeasonGoal) GetCxp() float64 {
	if x != nil && x.Cxp != nil {
		return *x.Cxp
	}
	return 0
}

func (x *ContractSeasonGoal) GetRewardType() RewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return RewardType_CASH
}

func (x *ContractSeasonGoal) GetRewardSubType() string {
	if x != nil && x.RewardSubType != nil {
		return *x.RewardSubType
	}
	return ""
}

func (x *ContractSeasonGoal) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

type ContractSeasonRewardConfirmationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	SeasonId      *string                `protobuf:"bytes,2,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	Goal          *ContractSeasonGoal    `protobuf:"bytes,3,opt,name=goal" json:"goal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSeasonRewardConfirmationRequest) Reset() {
	*x = ContractSeasonRewardConfirmationRequest{}
	mi := &file_go_ei_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSeasonRewardConfirmationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSeasonRewardConfirmationRequest) ProtoMessage() {}

func (x *ContractSeasonRewardConfirmationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSeasonRewardConfirmationRequest.ProtoReflect.Descriptor instead.
func (*ContractSeasonRewardConfirmationRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{26}
}

func (x *ContractSeasonRewardConfirmationRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ContractSeasonRewardConfirmationRequest) GetSeasonId() string {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return ""
}

func (x *ContractSeasonRewardConfirmationRequest) GetGoal() *ContractSeasonGoal {
	if x != nil {
		return x.Goal
	}
	return nil
}

type ContractSeasonInfo struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Id            *string                       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name          *string                       `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	StartTime     *float64                      `protobuf:"fixed64,4,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	GradeGoals    []*ContractSeasonInfo_GoalSet `protobuf:"bytes,2,rep,name=grade_goals,json=gradeGoals" json:"grade_goals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSeasonInfo) Reset() {
	*x = ContractSeasonInfo{}
	mi := &file_go_ei_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSeasonInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSeasonInfo) ProtoMessage() {}

func (x *ContractSeasonInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSeasonInfo.ProtoReflect.Descriptor instead.
func (*ContractSeasonInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{27}
}

func (x *ContractSeasonInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ContractSeasonInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ContractSeasonInfo) GetStartTime() float64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *ContractSeasonInfo) GetGradeGoals() []*ContractSeasonInfo_GoalSet {
	if x != nil {
		return x.GradeGoals
	}
	return nil
}

type ContractSeasonInfos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Infos         []*ContractSeasonInfo  `protobuf:"bytes,1,rep,name=infos" json:"infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSeasonInfos) Reset() {
	*x = ContractSeasonInfos{}
	mi := &file_go_ei_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSeasonInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSeasonInfos) ProtoMessage() {}

func (x *ContractSeasonInfos) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSeasonInfos.ProtoReflect.Descriptor instead.
func (*ContractSeasonInfos) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{28}
}

func (x *ContractSeasonInfos) GetInfos() []*ContractSeasonInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type ContractPlayerInfo struct {
	state                 protoimpl.MessageState               `protogen:"open.v1"`
	Grade                 *Contract_PlayerGrade                `protobuf:"varint,1,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	TotalCxp              *float64                             `protobuf:"fixed64,2,opt,name=total_cxp,json=totalCxp" json:"total_cxp,omitempty"`
	SeasonCxp             *float64                             `protobuf:"fixed64,13,opt,name=season_cxp,json=seasonCxp" json:"season_cxp,omitempty"`
	GradeScore            *float64                             `protobuf:"fixed64,7,opt,name=grade_score,json=gradeScore" json:"grade_score,omitempty"`
	TargetGradeScore      *float64                             `protobuf:"fixed64,9,opt,name=target_grade_score,json=targetGradeScore" json:"target_grade_score,omitempty"`
	SoulPower             *float64                             `protobuf:"fixed64,10,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	TargetSoulPower       *float64                             `protobuf:"fixed64,8,opt,name=target_soul_power,json=targetSoulPower" json:"target_soul_power,omitempty"`
	GradeProgress         *float64                             `protobuf:"fixed64,12,opt,name=grade_progress,json=gradeProgress" json:"grade_progress,omitempty"`
	Issues                []ContractEvaluation_PoorBehavior    `protobuf:"varint,11,rep,name=issues,enum=ei.ContractEvaluation_PoorBehavior" json:"issues,omitempty"`
	IssueScore            *float64                             `protobuf:"fixed64,14,opt,name=issue_score,json=issueScore" json:"issue_score,omitempty"`
	Status                *ContractPlayerInfo_Status           `protobuf:"varint,3,opt,name=status,enum=ei.ContractPlayerInfo_Status" json:"status,omitempty"`
	LastEvaluationTime    *float64                             `protobuf:"fixed64,4,opt,name=last_evaluation_time,json=lastEvaluationTime" json:"last_evaluation_time,omitempty"`
	LastEvaluationVersion *string                              `protobuf:"bytes,5,opt,name=last_evaluation_version,json=lastEvaluationVersion" json:"last_evaluation_version,omitempty"`
	UnreadEvaluations     []*ContractEvaluation                `protobuf:"bytes,6,rep,name=unread_evaluations,json=unreadEvaluations" json:"unread_evaluations,omitempty"`
	SeasonProgress        []*ContractPlayerInfo_SeasonProgress `protobuf:"bytes,15,rep,name=season_progress,json=seasonProgress" json:"season_progress,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ContractPlayerInfo) Reset() {
	*x = ContractPlayerInfo{}
	mi := &file_go_ei_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractPlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlayerInfo) ProtoMessage() {}

func (x *ContractPlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlayerInfo.ProtoReflect.Descriptor instead.
func (*ContractPlayerInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{29}
}

func (x *ContractPlayerInfo) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *ContractPlayerInfo) GetTotalCxp() float64 {
	if x != nil && x.TotalCxp != nil {
		return *x.TotalCxp
	}
	return 0
}

func (x *ContractPlayerInfo) GetSeasonCxp() float64 {
	if x != nil && x.SeasonCxp != nil {
		return *x.SeasonCxp
	}
	return 0
}

func (x *ContractPlayerInfo) GetGradeScore() float64 {
	if x != nil && x.GradeScore != nil {
		return *x.GradeScore
	}
	return 0
}

func (x *ContractPlayerInfo) GetTargetGradeScore() float64 {
	if x != nil && x.TargetGradeScore != nil {
		return *x.TargetGradeScore
	}
	return 0
}

func (x *ContractPlayerInfo) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *ContractPlayerInfo) GetTargetSoulPower() float64 {
	if x != nil && x.TargetSoulPower != nil {
		return *x.TargetSoulPower
	}
	return 0
}

func (x *ContractPlayerInfo) GetGradeProgress() float64 {
	if x != nil && x.GradeProgress != nil {
		return *x.GradeProgress
	}
	return 0
}

func (x *ContractPlayerInfo) GetIssues() []ContractEvaluation_PoorBehavior {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ContractPlayerInfo) GetIssueScore() float64 {
	if x != nil && x.IssueScore != nil {
		return *x.IssueScore
	}
	return 0
}

func (x *ContractPlayerInfo) GetStatus() ContractPlayerInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ContractPlayerInfo_UNKNOWN
}

func (x *ContractPlayerInfo) GetLastEvaluationTime() float64 {
	if x != nil && x.LastEvaluationTime != nil {
		return *x.LastEvaluationTime
	}
	return 0
}

func (x *ContractPlayerInfo) GetLastEvaluationVersion() string {
	if x != nil && x.LastEvaluationVersion != nil {
		return *x.LastEvaluationVersion
	}
	return ""
}

func (x *ContractPlayerInfo) GetUnreadEvaluations() []*ContractEvaluation {
	if x != nil {
		return x.UnreadEvaluations
	}
	return nil
}

func (x *ContractPlayerInfo) GetSeasonProgress() []*ContractPlayerInfo_SeasonProgress {
	if x != nil {
		return x.SeasonProgress
	}
	return nil
}

type ContractEvaluation struct {
	state                  protoimpl.MessageState            `protogen:"open.v1"`
	ContractIdentifier     *string                           `protobuf:"bytes,40,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier         *string                           `protobuf:"bytes,41,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	Cxp                    *float64                          `protobuf:"fixed64,1,opt,name=cxp" json:"cxp,omitempty"`
	Replay                 *bool                             `protobuf:"varint,24,opt,name=replay" json:"replay,omitempty"`
	CxpChange              *float64                          `protobuf:"fixed64,25,opt,name=cxp_change,json=cxpChange" json:"cxp_change,omitempty"`
	GradePerformance       *int32                            `protobuf:"varint,2,opt,name=grade_performance,json=gradePerformance" json:"grade_performance,omitempty"`
	OldLeague              *int32                            `protobuf:"varint,9,opt,name=old_league,json=oldLeague" json:"old_league,omitempty"`
	OldGoals               *bool                             `protobuf:"varint,10,opt,name=old_goals,json=oldGoals" json:"old_goals,omitempty"`
	Grade                  *Contract_PlayerGrade             `protobuf:"varint,3,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	ContributionRatio      *float64                          `protobuf:"fixed64,4,opt,name=contribution_ratio,json=contributionRatio" json:"contribution_ratio,omitempty"`
	CompletionPercent      *float64                          `protobuf:"fixed64,5,opt,name=completion_percent,json=completionPercent" json:"completion_percent,omitempty"`
	OriginalLength         *float64                          `protobuf:"fixed64,11,opt,name=original_length,json=originalLength" json:"original_length,omitempty"`
	CoopSize               *uint32                           `protobuf:"varint,18,opt,name=coop_size,json=coopSize" json:"coop_size,omitempty"`
	Solo                   *bool                             `protobuf:"varint,26,opt,name=solo" json:"solo,omitempty"`
	SoulPower              *float64                          `protobuf:"fixed64,23,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	LastContributionTime   *float64                          `protobuf:"fixed64,22,opt,name=last_contribution_time,json=lastContributionTime" json:"last_contribution_time,omitempty"`
	CompletionTime         *float64                          `protobuf:"fixed64,6,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	ChickenRunsSent        *uint32                           `protobuf:"varint,7,opt,name=chicken_runs_sent,json=chickenRunsSent" json:"chicken_runs_sent,omitempty"`
	GiftTokensSent         *uint32                           `protobuf:"varint,8,opt,name=gift_tokens_sent,json=giftTokensSent" json:"gift_tokens_sent,omitempty"`
	GiftTokensReceived     *uint32                           `protobuf:"varint,15,opt,name=gift_tokens_received,json=giftTokensReceived" json:"gift_tokens_received,omitempty"`
	GiftTokenValueSent     *float64                          `protobuf:"fixed64,28,opt,name=gift_token_value_sent,json=giftTokenValueSent" json:"gift_token_value_sent,omitempty"`
	GiftTokenValueReceived *float64                          `protobuf:"fixed64,29,opt,name=gift_token_value_received,json=giftTokenValueReceived" json:"gift_token_value_received,omitempty"`
	BoostTokenAllotment    *uint32                           `protobuf:"varint,16,opt,name=boost_token_allotment,json=boostTokenAllotment" json:"boost_token_allotment,omitempty"`
	BuffTimeValue          *float64                          `protobuf:"fixed64,17,opt,name=buff_time_value,json=buffTimeValue" json:"buff_time_value,omitempty"`
	TeamworkScore          *float64                          `protobuf:"fixed64,13,opt,name=teamwork_score,json=teamworkScore" json:"teamwork_score,omitempty"`
	OtherBonuses           *float64                          `protobuf:"fixed64,14,opt,name=other_bonuses,json=otherBonuses" json:"other_bonuses,omitempty"`
	CountedInSeason        *bool                             `protobuf:"varint,20,opt,name=counted_in_season,json=countedInSeason" json:"counted_in_season,omitempty"`
	SeasonId               *string                           `protobuf:"bytes,21,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	TimeCheats             *uint32                           `protobuf:"varint,27,opt,name=time_cheats,json=timeCheats" json:"time_cheats,omitempty"`
	Issues                 []ContractEvaluation_PoorBehavior `protobuf:"varint,19,rep,name=issues,enum=ei.ContractEvaluation_PoorBehavior" json:"issues,omitempty"`
	Notes                  []string                          `protobuf:"bytes,12,rep,name=notes" json:"notes,omitempty"`
	Version                *string                           `protobuf:"bytes,50,opt,name=version" json:"version,omitempty"`
	EvaluationStartTime    *float64                          `protobuf:"fixed64,51,opt,name=evaluation_start_time,json=evaluationStartTime" json:"evaluation_start_time,omitempty"`
	Status                 *ContractEvaluation_Status        `protobuf:"varint,52,opt,name=status,enum=ei.ContractEvaluation_Status" json:"status,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ContractEvaluation) Reset() {
	*x = ContractEvaluation{}
	mi := &file_go_ei_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractEvaluation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractEvaluation) ProtoMessage() {}

func (x *ContractEvaluation) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractEvaluation.ProtoReflect.Descriptor instead.
func (*ContractEvaluation) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{30}
}

func (x *ContractEvaluation) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractEvaluation) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ContractEvaluation) GetCxp() float64 {
	if x != nil && x.Cxp != nil {
		return *x.Cxp
	}
	return 0
}

func (x *ContractEvaluation) GetReplay() bool {
	if x != nil && x.Replay != nil {
		return *x.Replay
	}
	return false
}

func (x *ContractEvaluation) GetCxpChange() float64 {
	if x != nil && x.CxpChange != nil {
		return *x.CxpChange
	}
	return 0
}

func (x *ContractEvaluation) GetGradePerformance() int32 {
	if x != nil && x.GradePerformance != nil {
		return *x.GradePerformance
	}
	return 0
}

func (x *ContractEvaluation) GetOldLeague() int32 {
	if x != nil && x.OldLeague != nil {
		return *x.OldLeague
	}
	return 0
}

func (x *ContractEvaluation) GetOldGoals() bool {
	if x != nil && x.OldGoals != nil {
		return *x.OldGoals
	}
	return false
}

func (x *ContractEvaluation) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *ContractEvaluation) GetContributionRatio() float64 {
	if x != nil && x.ContributionRatio != nil {
		return *x.ContributionRatio
	}
	return 0
}

func (x *ContractEvaluation) GetCompletionPercent() float64 {
	if x != nil && x.CompletionPercent != nil {
		return *x.CompletionPercent
	}
	return 0
}

func (x *ContractEvaluation) GetOriginalLength() float64 {
	if x != nil && x.OriginalLength != nil {
		return *x.OriginalLength
	}
	return 0
}

func (x *ContractEvaluation) GetCoopSize() uint32 {
	if x != nil && x.CoopSize != nil {
		return *x.CoopSize
	}
	return 0
}

func (x *ContractEvaluation) GetSolo() bool {
	if x != nil && x.Solo != nil {
		return *x.Solo
	}
	return false
}

func (x *ContractEvaluation) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *ContractEvaluation) GetLastContributionTime() float64 {
	if x != nil && x.LastContributionTime != nil {
		return *x.LastContributionTime
	}
	return 0
}

func (x *ContractEvaluation) GetCompletionTime() float64 {
	if x != nil && x.CompletionTime != nil {
		return *x.CompletionTime
	}
	return 0
}

func (x *ContractEvaluation) GetChickenRunsSent() uint32 {
	if x != nil && x.ChickenRunsSent != nil {
		return *x.ChickenRunsSent
	}
	return 0
}

func (x *ContractEvaluation) GetGiftTokensSent() uint32 {
	if x != nil && x.GiftTokensSent != nil {
		return *x.GiftTokensSent
	}
	return 0
}

func (x *ContractEvaluation) GetGiftTokensReceived() uint32 {
	if x != nil && x.GiftTokensReceived != nil {
		return *x.GiftTokensReceived
	}
	return 0
}

func (x *ContractEvaluation) GetGiftTokenValueSent() float64 {
	if x != nil && x.GiftTokenValueSent != nil {
		return *x.GiftTokenValueSent
	}
	return 0
}

func (x *ContractEvaluation) GetGiftTokenValueReceived() float64 {
	if x != nil && x.GiftTokenValueReceived != nil {
		return *x.GiftTokenValueReceived
	}
	return 0
}

func (x *ContractEvaluation) GetBoostTokenAllotment() uint32 {
	if x != nil && x.BoostTokenAllotment != nil {
		return *x.BoostTokenAllotment
	}
	return 0
}

func (x *ContractEvaluation) GetBuffTimeValue() float64 {
	if x != nil && x.BuffTimeValue != nil {
		return *x.BuffTimeValue
	}
	return 0
}

func (x *ContractEvaluation) GetTeamworkScore() float64 {
	if x != nil && x.TeamworkScore != nil {
		return *x.TeamworkScore
	}
	return 0
}

func (x *ContractEvaluation) GetOtherBonuses() float64 {
	if x != nil && x.OtherBonuses != nil {
		return *x.OtherBonuses
	}
	return 0
}

func (x *ContractEvaluation) GetCountedInSeason() bool {
	if x != nil && x.CountedInSeason != nil {
		return *x.CountedInSeason
	}
	return false
}

func (x *ContractEvaluation) GetSeasonId() string {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return ""
}

func (x *ContractEvaluation) GetTimeCheats() uint32 {
	if x != nil && x.TimeCheats != nil {
		return *x.TimeCheats
	}
	return 0
}

func (x *ContractEvaluation) GetIssues() []ContractEvaluation_PoorBehavior {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *ContractEvaluation) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *ContractEvaluation) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ContractEvaluation) GetEvaluationStartTime() float64 {
	if x != nil && x.EvaluationStartTime != nil {
		return *x.EvaluationStartTime
	}
	return 0
}

func (x *ContractEvaluation) GetStatus() ContractEvaluation_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ContractEvaluation_UNKNOWN
}

type ContractCitation struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Issue         *ContractEvaluation_PoorBehavior `protobuf:"varint,1,opt,name=issue,enum=ei.ContractEvaluation_PoorBehavior" json:"issue,omitempty"`
	Timestamp     *float64                         `protobuf:"fixed64,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Grade         *Contract_PlayerGrade            `protobuf:"varint,3,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractCitation) Reset() {
	*x = ContractCitation{}
	mi := &file_go_ei_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCitation) ProtoMessage() {}

func (x *ContractCitation) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCitation.ProtoReflect.Descriptor instead.
func (*ContractCitation) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{31}
}

func (x *ContractCitation) GetIssue() ContractEvaluation_PoorBehavior {
	if x != nil && x.Issue != nil {
		return *x.Issue
	}
	return ContractEvaluation_NONE
}

func (x *ContractCitation) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *ContractCitation) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

type ContractEvaluationBatch struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Evals         []*ContractEvaluationBatch_Pair `protobuf:"bytes,1,rep,name=evals" json:"evals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractEvaluationBatch) Reset() {
	*x = ContractEvaluationBatch{}
	mi := &file_go_ei_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractEvaluationBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractEvaluationBatch) ProtoMessage() {}

func (x *ContractEvaluationBatch) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractEvaluationBatch.ProtoReflect.Descriptor instead.
func (*ContractEvaluationBatch) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{32}
}

func (x *ContractEvaluationBatch) GetEvals() []*ContractEvaluationBatch_Pair {
	if x != nil {
		return x.Evals
	}
	return nil
}

type CoopCompletionSnapshot struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Contributors  []*CoopCompletionSnapshot_ContributorSnapshot `protobuf:"bytes,1,rep,name=contributors" json:"contributors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoopCompletionSnapshot) Reset() {
	*x = CoopCompletionSnapshot{}
	mi := &file_go_ei_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoopCompletionSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopCompletionSnapshot) ProtoMessage() {}

func (x *CoopCompletionSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopCompletionSnapshot.ProtoReflect.Descriptor instead.
func (*CoopCompletionSnapshot) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{33}
}

func (x *CoopCompletionSnapshot) GetContributors() []*CoopCompletionSnapshot_ContributorSnapshot {
	if x != nil {
		return x.Contributors
	}
	return nil
}

type BasicRequestInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EiUserId      *string                `protobuf:"bytes,1,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	ClientVersion *uint32                `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Version       *string                `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Build         *string                `protobuf:"bytes,4,opt,name=build" json:"build,omitempty"`
	Platform      *string                `protobuf:"bytes,5,opt,name=platform" json:"platform,omitempty"`
	Country       *string                `protobuf:"bytes,6,opt,name=country" json:"country,omitempty"`
	Language      *string                `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	Debug         *bool                  `protobuf:"varint,8,opt,name=debug" json:"debug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BasicRequestInfo) Reset() {
	*x = BasicRequestInfo{}
	mi := &file_go_ei_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BasicRequestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicRequestInfo) ProtoMessage() {}

func (x *BasicRequestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicRequestInfo.ProtoReflect.Descriptor instead.
func (*BasicRequestInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{34}
}

func (x *BasicRequestInfo) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *BasicRequestInfo) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *BasicRequestInfo) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *BasicRequestInfo) GetBuild() string {
	if x != nil && x.Build != nil {
		return *x.Build
	}
	return ""
}

func (x *BasicRequestInfo) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return ""
}

func (x *BasicRequestInfo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *BasicRequestInfo) GetLanguage() string {
	if x != nil && x.Language != nil {
		return *x.Language
	}
	return ""
}

func (x *BasicRequestInfo) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

type ContractSimConfig struct {
	state         protoimpl.MessageState                      `protogen:"open.v1"`
	GradeConfigs  []*ContractSimConfig_ContractGradeSimConfig `protobuf:"bytes,1,rep,name=grade_configs,json=gradeConfigs" json:"grade_configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSimConfig) Reset() {
	*x = ContractSimConfig{}
	mi := &file_go_ei_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSimConfig) ProtoMessage() {}

func (x *ContractSimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSimConfig.ProtoReflect.Descriptor instead.
func (*ContractSimConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{35}
}

func (x *ContractSimConfig) GetGradeConfigs() []*ContractSimConfig_ContractGradeSimConfig {
	if x != nil {
		return x.GradeConfigs
	}
	return nil
}

type ContractSimPoll struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientVersion *uint32                `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSimPoll) Reset() {
	*x = ContractSimPoll{}
	mi := &file_go_ei_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSimPoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSimPoll) ProtoMessage() {}

func (x *ContractSimPoll) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSimPoll.ProtoReflect.Descriptor instead.
func (*ContractSimPoll) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{36}
}

func (x *ContractSimPoll) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type ContractSimPollResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ContractToSimulate *Contract              `protobuf:"bytes,1,opt,name=contract_to_simulate,json=contractToSimulate" json:"contract_to_simulate,omitempty"`
	SimConfig          *ContractSimConfig     `protobuf:"bytes,2,opt,name=sim_config,json=simConfig" json:"sim_config,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ContractSimPollResponse) Reset() {
	*x = ContractSimPollResponse{}
	mi := &file_go_ei_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSimPollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSimPollResponse) ProtoMessage() {}

func (x *ContractSimPollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSimPollResponse.ProtoReflect.Descriptor instead.
func (*ContractSimPollResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{37}
}

func (x *ContractSimPollResponse) GetContractToSimulate() *Contract {
	if x != nil {
		return x.ContractToSimulate
	}
	return nil
}

func (x *ContractSimPollResponse) GetSimConfig() *ContractSimConfig {
	if x != nil {
		return x.SimConfig
	}
	return nil
}

type ContractSimResultUpdate struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	ContractId    *string                             `protobuf:"bytes,1,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	GoalInfos     []*ContractSimResultUpdate_GoalInfo `protobuf:"bytes,2,rep,name=goal_infos,json=goalInfos" json:"goal_infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSimResultUpdate) Reset() {
	*x = ContractSimResultUpdate{}
	mi := &file_go_ei_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSimResultUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSimResultUpdate) ProtoMessage() {}

func (x *ContractSimResultUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSimResultUpdate.ProtoReflect.Descriptor instead.
func (*ContractSimResultUpdate) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{38}
}

func (x *ContractSimResultUpdate) GetContractId() string {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return ""
}

func (x *ContractSimResultUpdate) GetGoalInfos() []*ContractSimResultUpdate_GoalInfo {
	if x != nil {
		return x.GoalInfos
	}
	return nil
}

type ContractsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SoulEggs      *float64               `protobuf:"fixed64,1,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	ClientVersion *uint32                `protobuf:"varint,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	UserId        *string                `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractsRequest) Reset() {
	*x = ContractsRequest{}
	mi := &file_go_ei_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsRequest) ProtoMessage() {}

func (x *ContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsRequest.ProtoReflect.Descriptor instead.
func (*ContractsRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{39}
}

func (x *ContractsRequest) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *ContractsRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *ContractsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type ContractsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Contracts      []*Contract            `protobuf:"bytes,1,rep,name=contracts" json:"contracts,omitempty"`
	CustomEggs     []*CustomEgg           `protobuf:"bytes,6,rep,name=custom_eggs,json=customEggs" json:"custom_eggs,omitempty"`
	WarningMessage *string                `protobuf:"bytes,4,opt,name=warning_message,json=warningMessage" json:"warning_message,omitempty"`
	TotalEop       *float64               `protobuf:"fixed64,5,opt,name=total_eop,json=totalEop" json:"total_eop,omitempty"`
	ServerTime     *float64               `protobuf:"fixed64,2,opt,name=server_time,json=serverTime" json:"server_time,omitempty"`
	MaxEop         *uint32                `protobuf:"varint,3,opt,name=max_eop,json=maxEop,def=1000" json:"max_eop,omitempty"`
	CurrentSeason  *ContractSeasonInfo    `protobuf:"bytes,7,opt,name=current_season,json=currentSeason" json:"current_season,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for ContractsResponse fields.
const (
	Default_ContractsResponse_MaxEop = uint32(1000)
)

func (x *ContractsResponse) Reset() {
	*x = ContractsResponse{}
	mi := &file_go_ei_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsResponse) ProtoMessage() {}

func (x *ContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsResponse.ProtoReflect.Descriptor instead.
func (*ContractsResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{40}
}

func (x *ContractsResponse) GetContracts() []*Contract {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *ContractsResponse) GetCustomEggs() []*CustomEgg {
	if x != nil {
		return x.CustomEggs
	}
	return nil
}

func (x *ContractsResponse) GetWarningMessage() string {
	if x != nil && x.WarningMessage != nil {
		return *x.WarningMessage
	}
	return ""
}

func (x *ContractsResponse) GetTotalEop() float64 {
	if x != nil && x.TotalEop != nil {
		return *x.TotalEop
	}
	return 0
}

func (x *ContractsResponse) GetServerTime() float64 {
	if x != nil && x.ServerTime != nil {
		return *x.ServerTime
	}
	return 0
}

func (x *ContractsResponse) GetMaxEop() uint32 {
	if x != nil && x.MaxEop != nil {
		return *x.MaxEop
	}
	return Default_ContractsResponse_MaxEop
}

func (x *ContractsResponse) GetCurrentSeason() *ContractSeasonInfo {
	if x != nil {
		return x.CurrentSeason
	}
	return nil
}

type ContractCoopStatusRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,5,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	UserId             *string                `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	ClientTimestamp    *float64               `protobuf:"fixed64,6,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ContractCoopStatusRequest) Reset() {
	*x = ContractCoopStatusRequest{}
	mi := &file_go_ei_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCoopStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusRequest) ProtoMessage() {}

func (x *ContractCoopStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusRequest.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{41}
}

func (x *ContractCoopStatusRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ContractCoopStatusRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractCoopStatusRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ContractCoopStatusRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *ContractCoopStatusRequest) GetClientTimestamp() float64 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

type FarmProductionParams struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FarmPopulation *float64               `protobuf:"fixed64,1,opt,name=farm_population,json=farmPopulation" json:"farm_population,omitempty"`
	FarmCapacity   *float64               `protobuf:"fixed64,2,opt,name=farm_capacity,json=farmCapacity" json:"farm_capacity,omitempty"`
	Elr            *float64               `protobuf:"fixed64,3,opt,name=elr" json:"elr,omitempty"`
	Ihr            *float64               `protobuf:"fixed64,4,opt,name=ihr" json:"ihr,omitempty"`
	Sr             *float64               `protobuf:"fixed64,5,opt,name=sr" json:"sr,omitempty"`
	Delivered      *float64               `protobuf:"fixed64,6,opt,name=delivered" json:"delivered,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FarmProductionParams) Reset() {
	*x = FarmProductionParams{}
	mi := &file_go_ei_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FarmProductionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FarmProductionParams) ProtoMessage() {}

func (x *FarmProductionParams) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FarmProductionParams.ProtoReflect.Descriptor instead.
func (*FarmProductionParams) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{42}
}

func (x *FarmProductionParams) GetFarmPopulation() float64 {
	if x != nil && x.FarmPopulation != nil {
		return *x.FarmPopulation
	}
	return 0
}

func (x *FarmProductionParams) GetFarmCapacity() float64 {
	if x != nil && x.FarmCapacity != nil {
		return *x.FarmCapacity
	}
	return 0
}

func (x *FarmProductionParams) GetElr() float64 {
	if x != nil && x.Elr != nil {
		return *x.Elr
	}
	return 0
}

func (x *FarmProductionParams) GetIhr() float64 {
	if x != nil && x.Ihr != nil {
		return *x.Ihr
	}
	return 0
}

func (x *FarmProductionParams) GetSr() float64 {
	if x != nil && x.Sr != nil {
		return *x.Sr
	}
	return 0
}

func (x *FarmProductionParams) GetDelivered() float64 {
	if x != nil && x.Delivered != nil {
		return *x.Delivered
	}
	return 0
}

type PlayerFarmInfo struct {
	state                  protoimpl.MessageState     `protogen:"open.v1"`
	ClientVersion          *uint32                    `protobuf:"varint,20,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	SoulEggs               *float64                   `protobuf:"fixed64,1,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	EggsOfProphecy         *uint64                    `protobuf:"varint,2,opt,name=eggs_of_prophecy,json=eggsOfProphecy" json:"eggs_of_prophecy,omitempty"`
	PermitLevel            *uint32                    `protobuf:"varint,3,opt,name=permit_level,json=permitLevel" json:"permit_level,omitempty"`
	HyperloopStation       *bool                      `protobuf:"varint,4,opt,name=hyperloop_station,json=hyperloopStation" json:"hyperloop_station,omitempty"`
	EggMedalLevel          []uint32                   `protobuf:"varint,5,rep,name=egg_medal_level,json=eggMedalLevel" json:"egg_medal_level,omitempty"`
	EpicResearch           []*Backup_ResearchItem     `protobuf:"bytes,6,rep,name=epic_research,json=epicResearch" json:"epic_research,omitempty"`
	EggType                *Egg                       `protobuf:"varint,7,opt,name=egg_type,json=eggType,enum=ei.Egg" json:"egg_type,omitempty"`
	CashOnHand             *float64                   `protobuf:"fixed64,8,opt,name=cash_on_hand,json=cashOnHand" json:"cash_on_hand,omitempty"`
	Habs                   []uint32                   `protobuf:"varint,9,rep,name=habs" json:"habs,omitempty"`
	HabPopulation          []uint64                   `protobuf:"varint,10,rep,name=hab_population,json=habPopulation" json:"hab_population,omitempty"`
	HabCapacity            []uint64                   `protobuf:"varint,21,rep,name=hab_capacity,json=habCapacity" json:"hab_capacity,omitempty"`
	Vehicles               []uint32                   `protobuf:"varint,11,rep,name=vehicles" json:"vehicles,omitempty"`
	TrainLength            []uint32                   `protobuf:"varint,12,rep,name=train_length,json=trainLength" json:"train_length,omitempty"`
	SilosOwned             *uint32                    `protobuf:"varint,13,opt,name=silos_owned,json=silosOwned" json:"silos_owned,omitempty"`
	CommonResearch         []*Backup_ResearchItem     `protobuf:"bytes,14,rep,name=common_research,json=commonResearch" json:"common_research,omitempty"`
	ActiveBoosts           []*Backup_ActiveBoost      `protobuf:"bytes,15,rep,name=active_boosts,json=activeBoosts" json:"active_boosts,omitempty"`
	BoostTokensOnHand      *uint32                    `protobuf:"varint,16,opt,name=boost_tokens_on_hand,json=boostTokensOnHand" json:"boost_tokens_on_hand,omitempty"`
	EquippedArtifacts      []*CompleteArtifact        `protobuf:"bytes,17,rep,name=equipped_artifacts,json=equippedArtifacts" json:"equipped_artifacts,omitempty"`
	ArtifactInventoryScore *uint64                    `protobuf:"varint,18,opt,name=artifact_inventory_score,json=artifactInventoryScore" json:"artifact_inventory_score,omitempty"`
	FarmAppearance         *ShellDB_FarmConfiguration `protobuf:"bytes,19,opt,name=farm_appearance,json=farmAppearance" json:"farm_appearance,omitempty"`
	Timestamp              *float64                   `protobuf:"fixed64,22,opt,name=timestamp" json:"timestamp,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PlayerFarmInfo) Reset() {
	*x = PlayerFarmInfo{}
	mi := &file_go_ei_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerFarmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerFarmInfo) ProtoMessage() {}

func (x *PlayerFarmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerFarmInfo.ProtoReflect.Descriptor instead.
func (*PlayerFarmInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{43}
}

func (x *PlayerFarmInfo) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *PlayerFarmInfo) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *PlayerFarmInfo) GetEggsOfProphecy() uint64 {
	if x != nil && x.EggsOfProphecy != nil {
		return *x.EggsOfProphecy
	}
	return 0
}

func (x *PlayerFarmInfo) GetPermitLevel() uint32 {
	if x != nil && x.PermitLevel != nil {
		return *x.PermitLevel
	}
	return 0
}

func (x *PlayerFarmInfo) GetHyperloopStation() bool {
	if x != nil && x.HyperloopStation != nil {
		return *x.HyperloopStation
	}
	return false
}

func (x *PlayerFarmInfo) GetEggMedalLevel() []uint32 {
	if x != nil {
		return x.EggMedalLevel
	}
	return nil
}

func (x *PlayerFarmInfo) GetEpicResearch() []*Backup_ResearchItem {
	if x != nil {
		return x.EpicResearch
	}
	return nil
}

func (x *PlayerFarmInfo) GetEggType() Egg {
	if x != nil && x.EggType != nil {
		return *x.EggType
	}
	return Egg_EDIBLE
}

func (x *PlayerFarmInfo) GetCashOnHand() float64 {
	if x != nil && x.CashOnHand != nil {
		return *x.CashOnHand
	}
	return 0
}

func (x *PlayerFarmInfo) GetHabs() []uint32 {
	if x != nil {
		return x.Habs
	}
	return nil
}

func (x *PlayerFarmInfo) GetHabPopulation() []uint64 {
	if x != nil {
		return x.HabPopulation
	}
	return nil
}

func (x *PlayerFarmInfo) GetHabCapacity() []uint64 {
	if x != nil {
		return x.HabCapacity
	}
	return nil
}

func (x *PlayerFarmInfo) GetVehicles() []uint32 {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

func (x *PlayerFarmInfo) GetTrainLength() []uint32 {
	if x != nil {
		return x.TrainLength
	}
	return nil
}

func (x *PlayerFarmInfo) GetSilosOwned() uint32 {
	if x != nil && x.SilosOwned != nil {
		return *x.SilosOwned
	}
	return 0
}

func (x *PlayerFarmInfo) GetCommonResearch() []*Backup_ResearchItem {
	if x != nil {
		return x.CommonResearch
	}
	return nil
}

func (x *PlayerFarmInfo) GetActiveBoosts() []*Backup_ActiveBoost {
	if x != nil {
		return x.ActiveBoosts
	}
	return nil
}

func (x *PlayerFarmInfo) GetBoostTokensOnHand() uint32 {
	if x != nil && x.BoostTokensOnHand != nil {
		return *x.BoostTokensOnHand
	}
	return 0
}

func (x *PlayerFarmInfo) GetEquippedArtifacts() []*CompleteArtifact {
	if x != nil {
		return x.EquippedArtifacts
	}
	return nil
}

func (x *PlayerFarmInfo) GetArtifactInventoryScore() uint64 {
	if x != nil && x.ArtifactInventoryScore != nil {
		return *x.ArtifactInventoryScore
	}
	return 0
}

func (x *PlayerFarmInfo) GetFarmAppearance() *ShellDB_FarmConfiguration {
	if x != nil {
		return x.FarmAppearance
	}
	return nil
}

func (x *PlayerFarmInfo) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

type ContractCoopStatusResponse struct {
	state                        protoimpl.MessageState                         `protogen:"open.v1"`
	ResponseStatus               *ContractCoopStatusResponse_ResponseStatus     `protobuf:"varint,19,opt,name=response_status,json=responseStatus,enum=ei.ContractCoopStatusResponse_ResponseStatus" json:"response_status,omitempty"`
	ContractIdentifier           *string                                        `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	TotalAmount                  *float64                                       `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	CoopIdentifier               *string                                        `protobuf:"bytes,3,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	Grade                        *Contract_PlayerGrade                          `protobuf:"varint,17,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	Contributors                 []*ContractCoopStatusResponse_ContributionInfo `protobuf:"bytes,4,rep,name=contributors" json:"contributors,omitempty"`
	AutoGenerated                *bool                                          `protobuf:"varint,8,opt,name=auto_generated,json=autoGenerated" json:"auto_generated,omitempty"`
	Public                       *bool                                          `protobuf:"varint,10,opt,name=public" json:"public,omitempty"`
	CreatorId                    *string                                        `protobuf:"bytes,9,opt,name=creator_id,json=creatorId" json:"creator_id,omitempty"`
	SecondsRemaining             *float64                                       `protobuf:"fixed64,5,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	SecondsSinceAllGoalsAchieved *float64                                       `protobuf:"fixed64,16,opt,name=seconds_since_all_goals_achieved,json=secondsSinceAllGoalsAchieved" json:"seconds_since_all_goals_achieved,omitempty"`
	AllGoalsAchieved             *bool                                          `protobuf:"varint,14,opt,name=all_goals_achieved,json=allGoalsAchieved" json:"all_goals_achieved,omitempty"`
	AllMembersReporting          *bool                                          `protobuf:"varint,6,opt,name=all_members_reporting,json=allMembersReporting" json:"all_members_reporting,omitempty"`
	GracePeriodSecondsRemaining  *float64                                       `protobuf:"fixed64,7,opt,name=grace_period_seconds_remaining,json=gracePeriodSecondsRemaining" json:"grace_period_seconds_remaining,omitempty"`
	ClearedForExit               *bool                                          `protobuf:"varint,15,opt,name=cleared_for_exit,json=clearedForExit" json:"cleared_for_exit,omitempty"`
	Gifts                        []*ContractCoopStatusResponse_CoopGift         `protobuf:"bytes,11,rep,name=gifts" json:"gifts,omitempty"`
	ChickenRuns                  []*ContractCoopStatusResponse_ChickenRun       `protobuf:"bytes,13,rep,name=chicken_runs,json=chickenRuns" json:"chicken_runs,omitempty"`
	ClientTimestamp              *float64                                       `protobuf:"fixed64,12,opt,name=client_timestamp,json=clientTimestamp" json:"client_timestamp,omitempty"`
	LastSync_DEP                 *float64                                       `protobuf:"fixed64,18,opt,name=last_sync_DEP,json=lastSyncDEP" json:"last_sync_DEP,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ContractCoopStatusResponse) Reset() {
	*x = ContractCoopStatusResponse{}
	mi := &file_go_ei_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCoopStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusResponse) ProtoMessage() {}

func (x *ContractCoopStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusResponse.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{44}
}

func (x *ContractCoopStatusResponse) GetResponseStatus() ContractCoopStatusResponse_ResponseStatus {
	if x != nil && x.ResponseStatus != nil {
		return *x.ResponseStatus
	}
	return ContractCoopStatusResponse_NO_ERROR
}

func (x *ContractCoopStatusResponse) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractCoopStatusResponse) GetTotalAmount() float64 {
	if x != nil && x.TotalAmount != nil {
		return *x.TotalAmount
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ContractCoopStatusResponse) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *ContractCoopStatusResponse) GetContributors() []*ContractCoopStatusResponse_ContributionInfo {
	if x != nil {
		return x.Contributors
	}
	return nil
}

func (x *ContractCoopStatusResponse) GetAutoGenerated() bool {
	if x != nil && x.AutoGenerated != nil {
		return *x.AutoGenerated
	}
	return false
}

func (x *ContractCoopStatusResponse) GetPublic() bool {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return false
}

func (x *ContractCoopStatusResponse) GetCreatorId() string {
	if x != nil && x.CreatorId != nil {
		return *x.CreatorId
	}
	return ""
}

func (x *ContractCoopStatusResponse) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetSecondsSinceAllGoalsAchieved() float64 {
	if x != nil && x.SecondsSinceAllGoalsAchieved != nil {
		return *x.SecondsSinceAllGoalsAchieved
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetAllGoalsAchieved() bool {
	if x != nil && x.AllGoalsAchieved != nil {
		return *x.AllGoalsAchieved
	}
	return false
}

func (x *ContractCoopStatusResponse) GetAllMembersReporting() bool {
	if x != nil && x.AllMembersReporting != nil {
		return *x.AllMembersReporting
	}
	return false
}

func (x *ContractCoopStatusResponse) GetGracePeriodSecondsRemaining() float64 {
	if x != nil && x.GracePeriodSecondsRemaining != nil {
		return *x.GracePeriodSecondsRemaining
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetClearedForExit() bool {
	if x != nil && x.ClearedForExit != nil {
		return *x.ClearedForExit
	}
	return false
}

func (x *ContractCoopStatusResponse) GetGifts() []*ContractCoopStatusResponse_CoopGift {
	if x != nil {
		return x.Gifts
	}
	return nil
}

func (x *ContractCoopStatusResponse) GetChickenRuns() []*ContractCoopStatusResponse_ChickenRun {
	if x != nil {
		return x.ChickenRuns
	}
	return nil
}

func (x *ContractCoopStatusResponse) GetClientTimestamp() float64 {
	if x != nil && x.ClientTimestamp != nil {
		return *x.ClientTimestamp
	}
	return 0
}

func (x *ContractCoopStatusResponse) GetLastSync_DEP() float64 {
	if x != nil && x.LastSync_DEP != nil {
		return *x.LastSync_DEP
	}
	return 0
}

type LocalContract struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Contract                     *Contract              `protobuf:"bytes,1,opt,name=contract" json:"contract,omitempty"`
	CoopIdentifier               *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	Accepted                     *bool                  `protobuf:"varint,7,opt,name=accepted" json:"accepted,omitempty"`
	TimeAccepted                 *float64               `protobuf:"fixed64,3,opt,name=time_accepted,json=timeAccepted" json:"time_accepted,omitempty"`
	Cancelled                    *bool                  `protobuf:"varint,4,opt,name=cancelled" json:"cancelled,omitempty"`
	New                          *bool                  `protobuf:"varint,8,opt,name=new" json:"new,omitempty"`
	CoopSharedEndTime            *float64               `protobuf:"fixed64,5,opt,name=coop_shared_end_time,json=coopSharedEndTime" json:"coop_shared_end_time,omitempty"`
	CoopSimulationEndTime        *float64               `protobuf:"fixed64,22,opt,name=coop_simulation_end_time,json=coopSimulationEndTime" json:"coop_simulation_end_time,omitempty"`
	CoopGracePeriodEndTime       *float64               `protobuf:"fixed64,9,opt,name=coop_grace_period_end_time,json=coopGracePeriodEndTime" json:"coop_grace_period_end_time,omitempty"`
	CoopContributionFinalized    *bool                  `protobuf:"varint,10,opt,name=coop_contribution_finalized,json=coopContributionFinalized" json:"coop_contribution_finalized,omitempty"`
	CoopLastUploadedContribution *float64               `protobuf:"fixed64,11,opt,name=coop_last_uploaded_contribution,json=coopLastUploadedContribution" json:"coop_last_uploaded_contribution,omitempty"`
	CoopUserId                   *string                `protobuf:"bytes,13,opt,name=coop_user_id,json=coopUserId" json:"coop_user_id,omitempty"`
	CoopShareFarm                *bool                  `protobuf:"varint,17,opt,name=coop_share_farm,json=coopShareFarm" json:"coop_share_farm,omitempty"`
	LastAmountWhenRewardGiven    *float64               `protobuf:"fixed64,6,opt,name=last_amount_when_reward_given,json=lastAmountWhenRewardGiven" json:"last_amount_when_reward_given,omitempty"`
	NumGoalsAchieved             *uint32                `protobuf:"varint,14,opt,name=num_goals_achieved,json=numGoalsAchieved" json:"num_goals_achieved,omitempty"`
	MaxFarmSizeReached           *float64               `protobuf:"fixed64,23,opt,name=max_farm_size_reached,json=maxFarmSizeReached" json:"max_farm_size_reached,omitempty"`
	BoostsUsed                   *uint32                `protobuf:"varint,12,opt,name=boosts_used,json=boostsUsed" json:"boosts_used,omitempty"`
	PointsReplay                 *bool                  `protobuf:"varint,20,opt,name=points_replay,json=pointsReplay" json:"points_replay,omitempty"`
	League                       *uint32                `protobuf:"varint,15,opt,name=league" json:"league,omitempty"`
	Grade                        *Contract_PlayerGrade  `protobuf:"varint,18,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	LastNagTime                  *float64               `protobuf:"fixed64,16,opt,name=last_nag_time,json=lastNagTime" json:"last_nag_time,omitempty"`
	Evaluation                   *ContractEvaluation    `protobuf:"bytes,19,opt,name=evaluation" json:"evaluation,omitempty"`
	ReportedUuids                []string               `protobuf:"bytes,21,rep,name=reported_uuids,json=reportedUuids" json:"reported_uuids,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *LocalContract) Reset() {
	*x = LocalContract{}
	mi := &file_go_ei_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocalContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalContract) ProtoMessage() {}

func (x *LocalContract) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalContract.ProtoReflect.Descriptor instead.
func (*LocalContract) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{45}
}

func (x *LocalContract) GetContract() *Contract {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *LocalContract) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *LocalContract) GetAccepted() bool {
	if x != nil && x.Accepted != nil {
		return *x.Accepted
	}
	return false
}

func (x *LocalContract) GetTimeAccepted() float64 {
	if x != nil && x.TimeAccepted != nil {
		return *x.TimeAccepted
	}
	return 0
}

func (x *LocalContract) GetCancelled() bool {
	if x != nil && x.Cancelled != nil {
		return *x.Cancelled
	}
	return false
}

func (x *LocalContract) GetNew() bool {
	if x != nil && x.New != nil {
		return *x.New
	}
	return false
}

func (x *LocalContract) GetCoopSharedEndTime() float64 {
	if x != nil && x.CoopSharedEndTime != nil {
		return *x.CoopSharedEndTime
	}
	return 0
}

func (x *LocalContract) GetCoopSimulationEndTime() float64 {
	if x != nil && x.CoopSimulationEndTime != nil {
		return *x.CoopSimulationEndTime
	}
	return 0
}

func (x *LocalContract) GetCoopGracePeriodEndTime() float64 {
	if x != nil && x.CoopGracePeriodEndTime != nil {
		return *x.CoopGracePeriodEndTime
	}
	return 0
}

func (x *LocalContract) GetCoopContributionFinalized() bool {
	if x != nil && x.CoopContributionFinalized != nil {
		return *x.CoopContributionFinalized
	}
	return false
}

func (x *LocalContract) GetCoopLastUploadedContribution() float64 {
	if x != nil && x.CoopLastUploadedContribution != nil {
		return *x.CoopLastUploadedContribution
	}
	return 0
}

func (x *LocalContract) GetCoopUserId() string {
	if x != nil && x.CoopUserId != nil {
		return *x.CoopUserId
	}
	return ""
}

func (x *LocalContract) GetCoopShareFarm() bool {
	if x != nil && x.CoopShareFarm != nil {
		return *x.CoopShareFarm
	}
	return false
}

func (x *LocalContract) GetLastAmountWhenRewardGiven() float64 {
	if x != nil && x.LastAmountWhenRewardGiven != nil {
		return *x.LastAmountWhenRewardGiven
	}
	return 0
}

func (x *LocalContract) GetNumGoalsAchieved() uint32 {
	if x != nil && x.NumGoalsAchieved != nil {
		return *x.NumGoalsAchieved
	}
	return 0
}

func (x *LocalContract) GetMaxFarmSizeReached() float64 {
	if x != nil && x.MaxFarmSizeReached != nil {
		return *x.MaxFarmSizeReached
	}
	return 0
}

func (x *LocalContract) GetBoostsUsed() uint32 {
	if x != nil && x.BoostsUsed != nil {
		return *x.BoostsUsed
	}
	return 0
}

func (x *LocalContract) GetPointsReplay() bool {
	if x != nil && x.PointsReplay != nil {
		return *x.PointsReplay
	}
	return false
}

func (x *LocalContract) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *LocalContract) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *LocalContract) GetLastNagTime() float64 {
	if x != nil && x.LastNagTime != nil {
		return *x.LastNagTime
	}
	return 0
}

func (x *LocalContract) GetEvaluation() *ContractEvaluation {
	if x != nil {
		return x.Evaluation
	}
	return nil
}

func (x *LocalContract) GetReportedUuids() []string {
	if x != nil {
		return x.ReportedUuids
	}
	return nil
}

type MyContracts struct {
	state                   protoimpl.MessageState        `protogen:"open.v1"`
	ContractIdsSeen         []string                      `protobuf:"bytes,3,rep,name=contract_ids_seen,json=contractIdsSeen" json:"contract_ids_seen,omitempty"`
	Contracts               []*LocalContract              `protobuf:"bytes,1,rep,name=contracts" json:"contracts,omitempty"`
	Archive                 []*LocalContract              `protobuf:"bytes,2,rep,name=archive" json:"archive,omitempty"`
	CurrentCoopStatuses     []*ContractCoopStatusResponse `protobuf:"bytes,4,rep,name=current_coop_statuses,json=currentCoopStatuses" json:"current_coop_statuses,omitempty"`
	LastCpi                 *ContractPlayerInfo           `protobuf:"bytes,5,opt,name=last_cpi,json=lastCpi" json:"last_cpi,omitempty"`
	InitialGradeRevealed    *bool                         `protobuf:"varint,6,opt,name=initial_grade_revealed,json=initialGradeRevealed" json:"initial_grade_revealed,omitempty"`
	LastGradeProgressShown  *float64                      `protobuf:"fixed64,7,opt,name=last_grade_progress_shown,json=lastGradeProgressShown" json:"last_grade_progress_shown,omitempty"`
	ShowAdvancedEvaluations *bool                         `protobuf:"varint,8,opt,name=show_advanced_evaluations,json=showAdvancedEvaluations" json:"show_advanced_evaluations,omitempty"`
	CustomEggInfo           []*CustomEgg                  `protobuf:"bytes,9,rep,name=custom_egg_info,json=customEggInfo" json:"custom_egg_info,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *MyContracts) Reset() {
	*x = MyContracts{}
	mi := &file_go_ei_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MyContracts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyContracts) ProtoMessage() {}

func (x *MyContracts) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyContracts.ProtoReflect.Descriptor instead.
func (*MyContracts) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{46}
}

func (x *MyContracts) GetContractIdsSeen() []string {
	if x != nil {
		return x.ContractIdsSeen
	}
	return nil
}

func (x *MyContracts) GetContracts() []*LocalContract {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *MyContracts) GetArchive() []*LocalContract {
	if x != nil {
		return x.Archive
	}
	return nil
}

func (x *MyContracts) GetCurrentCoopStatuses() []*ContractCoopStatusResponse {
	if x != nil {
		return x.CurrentCoopStatuses
	}
	return nil
}

func (x *MyContracts) GetLastCpi() *ContractPlayerInfo {
	if x != nil {
		return x.LastCpi
	}
	return nil
}

func (x *MyContracts) GetInitialGradeRevealed() bool {
	if x != nil && x.InitialGradeRevealed != nil {
		return *x.InitialGradeRevealed
	}
	return false
}

func (x *MyContracts) GetLastGradeProgressShown() float64 {
	if x != nil && x.LastGradeProgressShown != nil {
		return *x.LastGradeProgressShown
	}
	return 0
}

func (x *MyContracts) GetShowAdvancedEvaluations() bool {
	if x != nil && x.ShowAdvancedEvaluations != nil {
		return *x.ShowAdvancedEvaluations
	}
	return false
}

func (x *MyContracts) GetCustomEggInfo() []*CustomEgg {
	if x != nil {
		return x.CustomEggInfo
	}
	return nil
}

type QueryCoopRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,5,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	League             *uint32                `protobuf:"varint,4,opt,name=league" json:"league,omitempty"`
	Grade              *Contract_PlayerGrade  `protobuf:"varint,6,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *QueryCoopRequest) Reset() {
	*x = QueryCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCoopRequest) ProtoMessage() {}

func (x *QueryCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCoopRequest.ProtoReflect.Descriptor instead.
func (*QueryCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{47}
}

func (x *QueryCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *QueryCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *QueryCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *QueryCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *QueryCoopRequest) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *QueryCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type QueryCoopResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Exists          *bool                  `protobuf:"varint,1,opt,name=exists" json:"exists,omitempty"`
	Full            *bool                  `protobuf:"varint,2,opt,name=full" json:"full,omitempty"`
	Expired         *bool                  `protobuf:"varint,5,opt,name=expired" json:"expired,omitempty"`
	DifferentLeague *bool                  `protobuf:"varint,4,opt,name=different_league,json=differentLeague" json:"different_league,omitempty"`
	DifferentGrade  *bool                  `protobuf:"varint,6,opt,name=different_grade,json=differentGrade" json:"different_grade,omitempty"`
	CcOnly          *bool                  `protobuf:"varint,7,opt,name=cc_only,json=ccOnly" json:"cc_only,omitempty"`
	Banned          *bool                  `protobuf:"varint,3,opt,name=banned" json:"banned,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryCoopResponse) Reset() {
	*x = QueryCoopResponse{}
	mi := &file_go_ei_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCoopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCoopResponse) ProtoMessage() {}

func (x *QueryCoopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCoopResponse.ProtoReflect.Descriptor instead.
func (*QueryCoopResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{48}
}

func (x *QueryCoopResponse) GetExists() bool {
	if x != nil && x.Exists != nil {
		return *x.Exists
	}
	return false
}

func (x *QueryCoopResponse) GetFull() bool {
	if x != nil && x.Full != nil {
		return *x.Full
	}
	return false
}

func (x *QueryCoopResponse) GetExpired() bool {
	if x != nil && x.Expired != nil {
		return *x.Expired
	}
	return false
}

func (x *QueryCoopResponse) GetDifferentLeague() bool {
	if x != nil && x.DifferentLeague != nil {
		return *x.DifferentLeague
	}
	return false
}

func (x *QueryCoopResponse) GetDifferentGrade() bool {
	if x != nil && x.DifferentGrade != nil {
		return *x.DifferentGrade
	}
	return false
}

func (x *QueryCoopResponse) GetCcOnly() bool {
	if x != nil && x.CcOnly != nil {
		return *x.CcOnly
	}
	return false
}

func (x *QueryCoopResponse) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

type CreateCoopRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,10,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	Public             *bool                  `protobuf:"varint,13,opt,name=public" json:"public,omitempty"`
	CcOnly             *bool                  `protobuf:"varint,14,opt,name=cc_only,json=ccOnly" json:"cc_only,omitempty"`
	AllowAllGrades     *bool                  `protobuf:"varint,16,opt,name=allow_all_grades,json=allowAllGrades" json:"allow_all_grades,omitempty"`
	SecondsRemaining   *float64               `protobuf:"fixed64,3,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	UserId             *string                `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string                `protobuf:"bytes,5,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SoulPower          *float64               `protobuf:"fixed64,8,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	Eop                *float64               `protobuf:"fixed64,11,opt,name=eop" json:"eop,omitempty"`
	League             *uint32                `protobuf:"varint,9,opt,name=league" json:"league,omitempty"`
	Grade              *Contract_PlayerGrade  `protobuf:"varint,12,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	PointsReplay       *bool                  `protobuf:"varint,15,opt,name=points_replay,json=pointsReplay" json:"points_replay,omitempty"`
	Platform           *Platform              `protobuf:"varint,6,opt,name=platform,enum=ei.Platform" json:"platform,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CreateCoopRequest) Reset() {
	*x = CreateCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoopRequest) ProtoMessage() {}

func (x *CreateCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoopRequest.ProtoReflect.Descriptor instead.
func (*CreateCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{49}
}

func (x *CreateCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *CreateCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *CreateCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *CreateCoopRequest) GetPublic() bool {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return false
}

func (x *CreateCoopRequest) GetCcOnly() bool {
	if x != nil && x.CcOnly != nil {
		return *x.CcOnly
	}
	return false
}

func (x *CreateCoopRequest) GetAllowAllGrades() bool {
	if x != nil && x.AllowAllGrades != nil {
		return *x.AllowAllGrades
	}
	return false
}

func (x *CreateCoopRequest) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *CreateCoopRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CreateCoopRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *CreateCoopRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *CreateCoopRequest) GetEop() float64 {
	if x != nil && x.Eop != nil {
		return *x.Eop
	}
	return 0
}

func (x *CreateCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *CreateCoopRequest) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *CreateCoopRequest) GetPointsReplay() bool {
	if x != nil && x.PointsReplay != nil {
		return *x.PointsReplay
	}
	return false
}

func (x *CreateCoopRequest) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *CreateCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type CreateCoopResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCoopResponse) Reset() {
	*x = CreateCoopResponse{}
	mi := &file_go_ei_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCoopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoopResponse) ProtoMessage() {}

func (x *CreateCoopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoopResponse.ProtoReflect.Descriptor instead.
func (*CreateCoopResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{50}
}

func (x *CreateCoopResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CreateCoopResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type JoinCoopRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,10,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	UserId             *string                `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string                `protobuf:"bytes,4,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SoulPower          *float64               `protobuf:"fixed64,8,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	Eop                *float64               `protobuf:"fixed64,12,opt,name=eop" json:"eop,omitempty"`
	League             *uint32                `protobuf:"varint,9,opt,name=league" json:"league,omitempty"`
	Grade              *Contract_PlayerGrade  `protobuf:"varint,13,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	PointsReplay       *bool                  `protobuf:"varint,14,opt,name=points_replay,json=pointsReplay" json:"points_replay,omitempty"`
	Platform           *Platform              `protobuf:"varint,5,opt,name=platform,enum=ei.Platform" json:"platform,omitempty"`
	SecondsRemaining   *float64               `protobuf:"fixed64,11,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *JoinCoopRequest) Reset() {
	*x = JoinCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCoopRequest) ProtoMessage() {}

func (x *JoinCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCoopRequest.ProtoReflect.Descriptor instead.
func (*JoinCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{51}
}

func (x *JoinCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *JoinCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *JoinCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *JoinCoopRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *JoinCoopRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *JoinCoopRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *JoinCoopRequest) GetEop() float64 {
	if x != nil && x.Eop != nil {
		return *x.Eop
	}
	return 0
}

func (x *JoinCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *JoinCoopRequest) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *JoinCoopRequest) GetPointsReplay() bool {
	if x != nil && x.PointsReplay != nil {
		return *x.PointsReplay
	}
	return false
}

func (x *JoinCoopRequest) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *JoinCoopRequest) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *JoinCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type JoinCoopResponse struct {
	state            protoimpl.MessageState             `protogen:"open.v1"`
	Success          *bool                              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message          *string                            `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Banned           *bool                              `protobuf:"varint,4,opt,name=banned" json:"banned,omitempty"`
	CoopIdentifier   *string                            `protobuf:"bytes,5,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	SecondsRemaining *float64                           `protobuf:"fixed64,3,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	MatchPercent     *float64                           `protobuf:"fixed64,6,opt,name=match_percent,json=matchPercent" json:"match_percent,omitempty"`
	NumMembers       *uint32                            `protobuf:"varint,7,opt,name=num_members,json=numMembers" json:"num_members,omitempty"`
	Status           *ContractCoopStatusResponse_Status `protobuf:"varint,8,opt,name=status,enum=ei.ContractCoopStatusResponse_Status" json:"status,omitempty"`
	Grade            *Contract_PlayerGrade              `protobuf:"varint,9,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	CanStart         *bool                              `protobuf:"varint,10,opt,name=can_start,json=canStart" json:"can_start,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *JoinCoopResponse) Reset() {
	*x = JoinCoopResponse{}
	mi := &file_go_ei_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinCoopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinCoopResponse) ProtoMessage() {}

func (x *JoinCoopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinCoopResponse.ProtoReflect.Descriptor instead.
func (*JoinCoopResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{52}
}

func (x *JoinCoopResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *JoinCoopResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *JoinCoopResponse) GetBanned() bool {
	if x != nil && x.Banned != nil {
		return *x.Banned
	}
	return false
}

func (x *JoinCoopResponse) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *JoinCoopResponse) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *JoinCoopResponse) GetMatchPercent() float64 {
	if x != nil && x.MatchPercent != nil {
		return *x.MatchPercent
	}
	return 0
}

func (x *JoinCoopResponse) GetNumMembers() uint32 {
	if x != nil && x.NumMembers != nil {
		return *x.NumMembers
	}
	return 0
}

func (x *JoinCoopResponse) GetStatus() ContractCoopStatusResponse_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ContractCoopStatusResponse_UNKNOWN
}

func (x *JoinCoopResponse) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *JoinCoopResponse) GetCanStart() bool {
	if x != nil && x.CanStart != nil {
		return *x.CanStart
	}
	return false
}

type AutoJoinCoopRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,9,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	UserId             *string                `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string                `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	SoulPower          *float64               `protobuf:"fixed64,4,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	Eop                *float64               `protobuf:"fixed64,10,opt,name=eop" json:"eop,omitempty"`
	League             *uint32                `protobuf:"varint,8,opt,name=league" json:"league,omitempty"`
	Grade              *Contract_PlayerGrade  `protobuf:"varint,12,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	PointsReplay       *bool                  `protobuf:"varint,14,opt,name=points_replay,json=pointsReplay" json:"points_replay,omitempty"`
	SecondsRemaining   *float64               `protobuf:"fixed64,5,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Platform           *Platform              `protobuf:"varint,6,opt,name=platform,enum=ei.Platform" json:"platform,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AutoJoinCoopRequest) Reset() {
	*x = AutoJoinCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AutoJoinCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoJoinCoopRequest) ProtoMessage() {}

func (x *AutoJoinCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoJoinCoopRequest.ProtoReflect.Descriptor instead.
func (*AutoJoinCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{53}
}

func (x *AutoJoinCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *AutoJoinCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *AutoJoinCoopRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AutoJoinCoopRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AutoJoinCoopRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *AutoJoinCoopRequest) GetEop() float64 {
	if x != nil && x.Eop != nil {
		return *x.Eop
	}
	return 0
}

func (x *AutoJoinCoopRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *AutoJoinCoopRequest) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *AutoJoinCoopRequest) GetPointsReplay() bool {
	if x != nil && x.PointsReplay != nil {
		return *x.PointsReplay
	}
	return false
}

func (x *AutoJoinCoopRequest) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *AutoJoinCoopRequest) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *AutoJoinCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type UpdateCoopPermissionsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,6,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	RequestingUserId   *string                `protobuf:"bytes,3,opt,name=requesting_user_id,json=requestingUserId" json:"requesting_user_id,omitempty"`
	Public             *bool                  `protobuf:"varint,4,opt,name=public" json:"public,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateCoopPermissionsRequest) Reset() {
	*x = UpdateCoopPermissionsRequest{}
	mi := &file_go_ei_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCoopPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoopPermissionsRequest) ProtoMessage() {}

func (x *UpdateCoopPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoopPermissionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoopPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{54}
}

func (x *UpdateCoopPermissionsRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *UpdateCoopPermissionsRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *UpdateCoopPermissionsRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *UpdateCoopPermissionsRequest) GetRequestingUserId() string {
	if x != nil && x.RequestingUserId != nil {
		return *x.RequestingUserId
	}
	return ""
}

func (x *UpdateCoopPermissionsRequest) GetPublic() bool {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return false
}

func (x *UpdateCoopPermissionsRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type UpdateCoopPermissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Message       *string                `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCoopPermissionsResponse) Reset() {
	*x = UpdateCoopPermissionsResponse{}
	mi := &file_go_ei_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCoopPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoopPermissionsResponse) ProtoMessage() {}

func (x *UpdateCoopPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoopPermissionsResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoopPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{55}
}

func (x *UpdateCoopPermissionsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *UpdateCoopPermissionsResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type LeaveCoopRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PlayerIdentifier   *string                `protobuf:"bytes,3,opt,name=player_identifier,json=playerIdentifier" json:"player_identifier,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *LeaveCoopRequest) Reset() {
	*x = LeaveCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaveCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveCoopRequest) ProtoMessage() {}

func (x *LeaveCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveCoopRequest.ProtoReflect.Descriptor instead.
func (*LeaveCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{56}
}

func (x *LeaveCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *LeaveCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *LeaveCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *LeaveCoopRequest) GetPlayerIdentifier() string {
	if x != nil && x.PlayerIdentifier != nil {
		return *x.PlayerIdentifier
	}
	return ""
}

func (x *LeaveCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type GiftPlayerCoopRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PlayerIdentifier   *string                `protobuf:"bytes,3,opt,name=player_identifier,json=playerIdentifier" json:"player_identifier,omitempty"`
	RequestingUserId   *string                `protobuf:"bytes,4,opt,name=requesting_user_id,json=requestingUserId" json:"requesting_user_id,omitempty"`
	RequestingUserName *string                `protobuf:"bytes,6,opt,name=requesting_user_name,json=requestingUserName" json:"requesting_user_name,omitempty"`
	Amount             *uint32                `protobuf:"varint,5,opt,name=amount" json:"amount,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GiftPlayerCoopRequest) Reset() {
	*x = GiftPlayerCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GiftPlayerCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftPlayerCoopRequest) ProtoMessage() {}

func (x *GiftPlayerCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftPlayerCoopRequest.ProtoReflect.Descriptor instead.
func (*GiftPlayerCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{57}
}

func (x *GiftPlayerCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *GiftPlayerCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetPlayerIdentifier() string {
	if x != nil && x.PlayerIdentifier != nil {
		return *x.PlayerIdentifier
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetRequestingUserId() string {
	if x != nil && x.RequestingUserId != nil {
		return *x.RequestingUserId
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetRequestingUserName() string {
	if x != nil && x.RequestingUserName != nil {
		return *x.RequestingUserName
	}
	return ""
}

func (x *GiftPlayerCoopRequest) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *GiftPlayerCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type SendChickenRunCoopRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PlayerIdentifier   *string                `protobuf:"bytes,3,opt,name=player_identifier,json=playerIdentifier" json:"player_identifier,omitempty"`
	RequestingUserId   *string                `protobuf:"bytes,4,opt,name=requesting_user_id,json=requestingUserId" json:"requesting_user_id,omitempty"`
	RequestingUserName *string                `protobuf:"bytes,6,opt,name=requesting_user_name,json=requestingUserName" json:"requesting_user_name,omitempty"`
	FarmPop            *uint64                `protobuf:"varint,5,opt,name=farm_pop,json=farmPop" json:"farm_pop,omitempty"`
	ClientVersion      *uint32                `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SendChickenRunCoopRequest) Reset() {
	*x = SendChickenRunCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendChickenRunCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChickenRunCoopRequest) ProtoMessage() {}

func (x *SendChickenRunCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChickenRunCoopRequest.ProtoReflect.Descriptor instead.
func (*SendChickenRunCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{58}
}

func (x *SendChickenRunCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *SendChickenRunCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *SendChickenRunCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *SendChickenRunCoopRequest) GetPlayerIdentifier() string {
	if x != nil && x.PlayerIdentifier != nil {
		return *x.PlayerIdentifier
	}
	return ""
}

func (x *SendChickenRunCoopRequest) GetRequestingUserId() string {
	if x != nil && x.RequestingUserId != nil {
		return *x.RequestingUserId
	}
	return ""
}

func (x *SendChickenRunCoopRequest) GetRequestingUserName() string {
	if x != nil && x.RequestingUserName != nil {
		return *x.RequestingUserName
	}
	return ""
}

func (x *SendChickenRunCoopRequest) GetFarmPop() uint64 {
	if x != nil && x.FarmPop != nil {
		return *x.FarmPop
	}
	return 0
}

func (x *SendChickenRunCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type ReportPlayerCoopRequest struct {
	state              protoimpl.MessageState          `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo               `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                         `protobuf:"bytes,2,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                         `protobuf:"bytes,3,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	UserId             *string                         `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Reason             *ReportPlayerCoopRequest_Reason `protobuf:"varint,5,opt,name=reason,enum=ei.ReportPlayerCoopRequest_Reason" json:"reason,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ReportPlayerCoopRequest) Reset() {
	*x = ReportPlayerCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportPlayerCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPlayerCoopRequest) ProtoMessage() {}

func (x *ReportPlayerCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPlayerCoopRequest.ProtoReflect.Descriptor instead.
func (*ReportPlayerCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{59}
}

func (x *ReportPlayerCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ReportPlayerCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ReportPlayerCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ReportPlayerCoopRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ReportPlayerCoopRequest) GetReason() ReportPlayerCoopRequest_Reason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ReportPlayerCoopRequest_UNKNOWN
}

type KickPlayerCoopRequest struct {
	state              protoimpl.MessageState        `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo             `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                       `protobuf:"bytes,1,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                       `protobuf:"bytes,2,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PlayerIdentifier   *string                       `protobuf:"bytes,3,opt,name=player_identifier,json=playerIdentifier" json:"player_identifier,omitempty"`
	RequestingUserId   *string                       `protobuf:"bytes,4,opt,name=requesting_user_id,json=requestingUserId" json:"requesting_user_id,omitempty"`
	Reason             *KickPlayerCoopRequest_Reason `protobuf:"varint,9,opt,name=reason,enum=ei.KickPlayerCoopRequest_Reason" json:"reason,omitempty"`
	ClientVersion      *uint32                       `protobuf:"varint,7,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KickPlayerCoopRequest) Reset() {
	*x = KickPlayerCoopRequest{}
	mi := &file_go_ei_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KickPlayerCoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KickPlayerCoopRequest) ProtoMessage() {}

func (x *KickPlayerCoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KickPlayerCoopRequest.ProtoReflect.Descriptor instead.
func (*KickPlayerCoopRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{60}
}

func (x *KickPlayerCoopRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *KickPlayerCoopRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetPlayerIdentifier() string {
	if x != nil && x.PlayerIdentifier != nil {
		return *x.PlayerIdentifier
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetRequestingUserId() string {
	if x != nil && x.RequestingUserId != nil {
		return *x.RequestingUserId
	}
	return ""
}

func (x *KickPlayerCoopRequest) GetReason() KickPlayerCoopRequest_Reason {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return KickPlayerCoopRequest_INVALID
}

func (x *KickPlayerCoopRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type IdleSessionSummary struct {
	state                  protoimpl.MessageState     `protogen:"open.v1"`
	Success                *bool                      `protobuf:"varint,11,opt,name=success" json:"success,omitempty"`
	TimeAway               *float64                   `protobuf:"fixed64,1,opt,name=time_away,json=timeAway" json:"time_away,omitempty"`
	TimeSimulated          *float64                   `protobuf:"fixed64,2,opt,name=time_simulated,json=timeSimulated" json:"time_simulated,omitempty"`
	SilosOwned             *uint32                    `protobuf:"varint,3,opt,name=silos_owned,json=silosOwned" json:"silos_owned,omitempty"`
	AverageElr             *float64                   `protobuf:"fixed64,4,opt,name=average_elr,json=averageElr" json:"average_elr,omitempty"`
	AverageMsr             *float64                   `protobuf:"fixed64,5,opt,name=average_msr,json=averageMsr" json:"average_msr,omitempty"`
	AverageEggDeliveryRate *float64                   `protobuf:"fixed64,6,opt,name=average_egg_delivery_rate,json=averageEggDeliveryRate" json:"average_egg_delivery_rate,omitempty"`
	LastEggDeliveryRate    *float64                   `protobuf:"fixed64,8,opt,name=last_egg_delivery_rate,json=lastEggDeliveryRate" json:"last_egg_delivery_rate,omitempty"`
	EggsDelivered          *float64                   `protobuf:"fixed64,9,opt,name=eggs_delivered,json=eggsDelivered" json:"eggs_delivered,omitempty"`
	Stats                  []*IdleSessionSummary_Stat `protobuf:"bytes,10,rep,name=stats" json:"stats,omitempty"`
	FarmIndex              *uint32                    `protobuf:"varint,7,opt,name=farm_index,json=farmIndex" json:"farm_index,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *IdleSessionSummary) Reset() {
	*x = IdleSessionSummary{}
	mi := &file_go_ei_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdleSessionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleSessionSummary) ProtoMessage() {}

func (x *IdleSessionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleSessionSummary.ProtoReflect.Descriptor instead.
func (*IdleSessionSummary) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{61}
}

func (x *IdleSessionSummary) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *IdleSessionSummary) GetTimeAway() float64 {
	if x != nil && x.TimeAway != nil {
		return *x.TimeAway
	}
	return 0
}

func (x *IdleSessionSummary) GetTimeSimulated() float64 {
	if x != nil && x.TimeSimulated != nil {
		return *x.TimeSimulated
	}
	return 0
}

func (x *IdleSessionSummary) GetSilosOwned() uint32 {
	if x != nil && x.SilosOwned != nil {
		return *x.SilosOwned
	}
	return 0
}

func (x *IdleSessionSummary) GetAverageElr() float64 {
	if x != nil && x.AverageElr != nil {
		return *x.AverageElr
	}
	return 0
}

func (x *IdleSessionSummary) GetAverageMsr() float64 {
	if x != nil && x.AverageMsr != nil {
		return *x.AverageMsr
	}
	return 0
}

func (x *IdleSessionSummary) GetAverageEggDeliveryRate() float64 {
	if x != nil && x.AverageEggDeliveryRate != nil {
		return *x.AverageEggDeliveryRate
	}
	return 0
}

func (x *IdleSessionSummary) GetLastEggDeliveryRate() float64 {
	if x != nil && x.LastEggDeliveryRate != nil {
		return *x.LastEggDeliveryRate
	}
	return 0
}

func (x *IdleSessionSummary) GetEggsDelivered() float64 {
	if x != nil && x.EggsDelivered != nil {
		return *x.EggsDelivered
	}
	return 0
}

func (x *IdleSessionSummary) GetStats() []*IdleSessionSummary_Stat {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *IdleSessionSummary) GetFarmIndex() uint32 {
	if x != nil && x.FarmIndex != nil {
		return *x.FarmIndex
	}
	return 0
}

type ContractCoopStatusUpdateRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,12,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId             *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,2,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	CoopIdentifier     *string                `protobuf:"bytes,3,opt,name=coop_identifier,json=coopIdentifier" json:"coop_identifier,omitempty"`
	PushUserId         *string                `protobuf:"bytes,8,opt,name=push_user_id,json=pushUserId" json:"push_user_id,omitempty"`
	Amount             *float64               `protobuf:"fixed64,4,opt,name=amount" json:"amount,omitempty"`
	Rate               *float64               `protobuf:"fixed64,5,opt,name=rate" json:"rate,omitempty"`
	TimeCheatsDetected *uint32                `protobuf:"varint,6,opt,name=time_cheats_detected,json=timeCheatsDetected" json:"time_cheats_detected,omitempty"`
	SoulPower          *float64               `protobuf:"fixed64,7,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	Eop                *uint32                `protobuf:"varint,15,opt,name=eop" json:"eop,omitempty"`
	BoostTokens        *uint32                `protobuf:"varint,9,opt,name=boost_tokens,json=boostTokens" json:"boost_tokens,omitempty"`
	BoostTokensSpent   *uint32                `protobuf:"varint,13,opt,name=boost_tokens_spent,json=boostTokensSpent" json:"boost_tokens_spent,omitempty"`
	HideCcStatus       *bool                  `protobuf:"varint,17,opt,name=hide_cc_status,json=hideCcStatus" json:"hide_cc_status,omitempty"`
	ProductionParams   *FarmProductionParams  `protobuf:"bytes,14,opt,name=production_params,json=productionParams" json:"production_params,omitempty"`
	FarmInfo           *PlayerFarmInfo        `protobuf:"bytes,16,opt,name=farm_info,json=farmInfo" json:"farm_info,omitempty"`
	LastIdleSummary    *IdleSessionSummary    `protobuf:"bytes,18,opt,name=last_idle_summary,json=lastIdleSummary" json:"last_idle_summary,omitempty"`
	EggLayingRateBuff  *float64               `protobuf:"fixed64,10,opt,name=egg_laying_rate_buff,json=eggLayingRateBuff,def=1" json:"egg_laying_rate_buff,omitempty"`
	EarningsBuff       *float64               `protobuf:"fixed64,11,opt,name=earnings_buff,json=earningsBuff,def=1" json:"earnings_buff,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for ContractCoopStatusUpdateRequest fields.
const (
	Default_ContractCoopStatusUpdateRequest_EggLayingRateBuff = float64(1)
	Default_ContractCoopStatusUpdateRequest_EarningsBuff      = float64(1)
)

func (x *ContractCoopStatusUpdateRequest) Reset() {
	*x = ContractCoopStatusUpdateRequest{}
	mi := &file_go_ei_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCoopStatusUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusUpdateRequest) ProtoMessage() {}

func (x *ContractCoopStatusUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusUpdateRequest.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusUpdateRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{62}
}

func (x *ContractCoopStatusUpdateRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ContractCoopStatusUpdateRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetCoopIdentifier() string {
	if x != nil && x.CoopIdentifier != nil {
		return *x.CoopIdentifier
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetPushUserId() string {
	if x != nil && x.PushUserId != nil {
		return *x.PushUserId
	}
	return ""
}

func (x *ContractCoopStatusUpdateRequest) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetRate() float64 {
	if x != nil && x.Rate != nil {
		return *x.Rate
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetTimeCheatsDetected() uint32 {
	if x != nil && x.TimeCheatsDetected != nil {
		return *x.TimeCheatsDetected
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetEop() uint32 {
	if x != nil && x.Eop != nil {
		return *x.Eop
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetBoostTokens() uint32 {
	if x != nil && x.BoostTokens != nil {
		return *x.BoostTokens
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetBoostTokensSpent() uint32 {
	if x != nil && x.BoostTokensSpent != nil {
		return *x.BoostTokensSpent
	}
	return 0
}

func (x *ContractCoopStatusUpdateRequest) GetHideCcStatus() bool {
	if x != nil && x.HideCcStatus != nil {
		return *x.HideCcStatus
	}
	return false
}

func (x *ContractCoopStatusUpdateRequest) GetProductionParams() *FarmProductionParams {
	if x != nil {
		return x.ProductionParams
	}
	return nil
}

func (x *ContractCoopStatusUpdateRequest) GetFarmInfo() *PlayerFarmInfo {
	if x != nil {
		return x.FarmInfo
	}
	return nil
}

func (x *ContractCoopStatusUpdateRequest) GetLastIdleSummary() *IdleSessionSummary {
	if x != nil {
		return x.LastIdleSummary
	}
	return nil
}

func (x *ContractCoopStatusUpdateRequest) GetEggLayingRateBuff() float64 {
	if x != nil && x.EggLayingRateBuff != nil {
		return *x.EggLayingRateBuff
	}
	return Default_ContractCoopStatusUpdateRequest_EggLayingRateBuff
}

func (x *ContractCoopStatusUpdateRequest) GetEarningsBuff() float64 {
	if x != nil && x.EarningsBuff != nil {
		return *x.EarningsBuff
	}
	return Default_ContractCoopStatusUpdateRequest_EarningsBuff
}

type ContractCoopStatusUpdateResponse struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Finalized     *bool                                    `protobuf:"varint,1,opt,name=finalized" json:"finalized,omitempty"`
	Exists        *bool                                    `protobuf:"varint,2,opt,name=exists" json:"exists,omitempty"`
	Status        *ContractCoopStatusResponse_MemberStatus `protobuf:"varint,3,opt,name=status,enum=ei.ContractCoopStatusResponse_MemberStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractCoopStatusUpdateResponse) Reset() {
	*x = ContractCoopStatusUpdateResponse{}
	mi := &file_go_ei_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCoopStatusUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusUpdateResponse) ProtoMessage() {}

func (x *ContractCoopStatusUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusUpdateResponse.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusUpdateResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{63}
}

func (x *ContractCoopStatusUpdateResponse) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *ContractCoopStatusUpdateResponse) GetExists() bool {
	if x != nil && x.Exists != nil {
		return *x.Exists
	}
	return false
}

func (x *ContractCoopStatusUpdateResponse) GetStatus() ContractCoopStatusResponse_MemberStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ContractCoopStatusResponse_VALID
}

type CoopBuffState struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	EggLayingRate   *float64               `protobuf:"fixed64,1,opt,name=egg_laying_rate,json=eggLayingRate,def=1" json:"egg_laying_rate,omitempty"`
	Earnings        *float64               `protobuf:"fixed64,2,opt,name=earnings,def=1" json:"earnings,omitempty"`
	ServerTimestamp *float64               `protobuf:"fixed64,3,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

// Default values for CoopBuffState fields.
const (
	Default_CoopBuffState_EggLayingRate = float64(1)
	Default_CoopBuffState_Earnings      = float64(1)
)

func (x *CoopBuffState) Reset() {
	*x = CoopBuffState{}
	mi := &file_go_ei_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoopBuffState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopBuffState) ProtoMessage() {}

func (x *CoopBuffState) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopBuffState.ProtoReflect.Descriptor instead.
func (*CoopBuffState) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{64}
}

func (x *CoopBuffState) GetEggLayingRate() float64 {
	if x != nil && x.EggLayingRate != nil {
		return *x.EggLayingRate
	}
	return Default_CoopBuffState_EggLayingRate
}

func (x *CoopBuffState) GetEarnings() float64 {
	if x != nil && x.Earnings != nil {
		return *x.Earnings
	}
	return Default_CoopBuffState_Earnings
}

func (x *CoopBuffState) GetServerTimestamp() float64 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

type CoopBuffHistory struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	History       []*CoopBuffState       `protobuf:"bytes,1,rep,name=history" json:"history,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoopBuffHistory) Reset() {
	*x = CoopBuffHistory{}
	mi := &file_go_ei_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoopBuffHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopBuffHistory) ProtoMessage() {}

func (x *CoopBuffHistory) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopBuffHistory.ProtoReflect.Descriptor instead.
func (*CoopBuffHistory) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{65}
}

func (x *CoopBuffHistory) GetHistory() []*CoopBuffState {
	if x != nil {
		return x.History
	}
	return nil
}

type CoopChickenRunEntry struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	UserId          *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ServerTimestamp *float64               `protobuf:"fixed64,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CoopChickenRunEntry) Reset() {
	*x = CoopChickenRunEntry{}
	mi := &file_go_ei_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoopChickenRunEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopChickenRunEntry) ProtoMessage() {}

func (x *CoopChickenRunEntry) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopChickenRunEntry.ProtoReflect.Descriptor instead.
func (*CoopChickenRunEntry) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{66}
}

func (x *CoopChickenRunEntry) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CoopChickenRunEntry) GetServerTimestamp() float64 {
	if x != nil && x.ServerTimestamp != nil {
		return *x.ServerTimestamp
	}
	return 0
}

type CoopLastChickenRunTimes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*CoopChickenRunEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoopLastChickenRunTimes) Reset() {
	*x = CoopLastChickenRunTimes{}
	mi := &file_go_ei_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoopLastChickenRunTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopLastChickenRunTimes) ProtoMessage() {}

func (x *CoopLastChickenRunTimes) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopLastChickenRunTimes.ProtoReflect.Descriptor instead.
func (*CoopLastChickenRunTimes) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{67}
}

func (x *CoopLastChickenRunTimes) GetEntries() []*CoopChickenRunEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type LeaderboardAnalysis struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Chunks        []*LeaderboardAnalysis_Chunk `protobuf:"bytes,1,rep,name=chunks" json:"chunks,omitempty"`
	Count         *uint32                      `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	HighScore     *float64                     `protobuf:"fixed64,3,opt,name=high_score,json=highScore" json:"high_score,omitempty"`
	LowScore      *float64                     `protobuf:"fixed64,4,opt,name=low_score,json=lowScore" json:"low_score,omitempty"`
	Cursor        *string                      `protobuf:"bytes,5,opt,name=cursor" json:"cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardAnalysis) Reset() {
	*x = LeaderboardAnalysis{}
	mi := &file_go_ei_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardAnalysis) ProtoMessage() {}

func (x *LeaderboardAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardAnalysis.ProtoReflect.Descriptor instead.
func (*LeaderboardAnalysis) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{68}
}

func (x *LeaderboardAnalysis) GetChunks() []*LeaderboardAnalysis_Chunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *LeaderboardAnalysis) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LeaderboardAnalysis) GetHighScore() float64 {
	if x != nil && x.HighScore != nil {
		return *x.HighScore
	}
	return 0
}

func (x *LeaderboardAnalysis) GetLowScore() float64 {
	if x != nil && x.LowScore != nil {
		return *x.LowScore
	}
	return 0
}

func (x *LeaderboardAnalysis) GetCursor() string {
	if x != nil && x.Cursor != nil {
		return *x.Cursor
	}
	return ""
}

type LeaderboardInfo struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Seasons       []*LeaderboardInfo_Season `protobuf:"bytes,1,rep,name=seasons" json:"seasons,omitempty"`
	AllTimeScope  *string                   `protobuf:"bytes,2,opt,name=all_time_scope,json=allTimeScope" json:"all_time_scope,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardInfo) Reset() {
	*x = LeaderboardInfo{}
	mi := &file_go_ei_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardInfo) ProtoMessage() {}

func (x *LeaderboardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardInfo.ProtoReflect.Descriptor instead.
func (*LeaderboardInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{69}
}

func (x *LeaderboardInfo) GetSeasons() []*LeaderboardInfo_Season {
	if x != nil {
		return x.Seasons
	}
	return nil
}

func (x *LeaderboardInfo) GetAllTimeScope() string {
	if x != nil && x.AllTimeScope != nil {
		return *x.AllTimeScope
	}
	return ""
}

type LeaderboardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	Scope         *string                `protobuf:"bytes,2,opt,name=scope" json:"scope,omitempty"`
	Grade         *Contract_PlayerGrade  `protobuf:"varint,3,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardRequest) Reset() {
	*x = LeaderboardRequest{}
	mi := &file_go_ei_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardRequest) ProtoMessage() {}

func (x *LeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardRequest.ProtoReflect.Descriptor instead.
func (*LeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{70}
}

func (x *LeaderboardRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *LeaderboardRequest) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *LeaderboardRequest) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

type LeaderboardResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Scope         *string                      `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Grade         *Contract_PlayerGrade        `protobuf:"varint,2,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	TopEntries    []*LeaderboardResponse_Entry `protobuf:"bytes,3,rep,name=top_entries,json=topEntries" json:"top_entries,omitempty"`
	Count         *uint32                      `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Rank          *uint32                      `protobuf:"varint,5,opt,name=rank" json:"rank,omitempty"`
	Score         *float64                     `protobuf:"fixed64,6,opt,name=score" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardResponse) Reset() {
	*x = LeaderboardResponse{}
	mi := &file_go_ei_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardResponse) ProtoMessage() {}

func (x *LeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardResponse.ProtoReflect.Descriptor instead.
func (*LeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{71}
}

func (x *LeaderboardResponse) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *LeaderboardResponse) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *LeaderboardResponse) GetTopEntries() []*LeaderboardResponse_Entry {
	if x != nil {
		return x.TopEntries
	}
	return nil
}

func (x *LeaderboardResponse) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

func (x *LeaderboardResponse) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *LeaderboardResponse) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type ContractsArchive struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Archive       []*LocalContract       `protobuf:"bytes,1,rep,name=archive" json:"archive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractsArchive) Reset() {
	*x = ContractsArchive{}
	mi := &file_go_ei_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractsArchive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractsArchive) ProtoMessage() {}

func (x *ContractsArchive) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractsArchive.ProtoReflect.Descriptor instead.
func (*ContractsArchive) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{72}
}

func (x *ContractsArchive) GetArchive() []*LocalContract {
	if x != nil {
		return x.Archive
	}
	return nil
}

type ContractAction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ActionName    *string                `protobuf:"bytes,2,opt,name=action_name,json=actionName" json:"action_name,omitempty"`
	ApproxTime    *float64               `protobuf:"fixed64,3,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	DestUserId    *string                `protobuf:"bytes,4,opt,name=dest_user_id,json=destUserId" json:"dest_user_id,omitempty"`
	ContractId    *string                `protobuf:"bytes,5,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	CoopId        *string                `protobuf:"bytes,6,opt,name=coop_id,json=coopId" json:"coop_id,omitempty"`
	Autojoin      *bool                  `protobuf:"varint,7,opt,name=autojoin" json:"autojoin,omitempty"`
	Grade         *uint32                `protobuf:"varint,8,opt,name=grade" json:"grade,omitempty"`
	Replay        *bool                  `protobuf:"varint,9,opt,name=replay" json:"replay,omitempty"`
	PointsReplay  *bool                  `protobuf:"varint,10,opt,name=points_replay,json=pointsReplay" json:"points_replay,omitempty"`
	RewardType    *uint32                `protobuf:"varint,11,opt,name=reward_type,json=rewardType" json:"reward_type,omitempty"`
	RewardSubtype *string                `protobuf:"bytes,12,opt,name=reward_subtype,json=rewardSubtype" json:"reward_subtype,omitempty"`
	RewardAmount  *float64               `protobuf:"fixed64,13,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
	GoalIndex     *uint32                `protobuf:"varint,14,opt,name=goal_index,json=goalIndex" json:"goal_index,omitempty"`
	BoostId       *string                `protobuf:"bytes,15,opt,name=boost_id,json=boostId" json:"boost_id,omitempty"`
	Tokens        *uint32                `protobuf:"varint,16,opt,name=tokens" json:"tokens,omitempty"`
	KickReason    *uint32                `protobuf:"varint,17,opt,name=kick_reason,json=kickReason" json:"kick_reason,omitempty"`
	Public        *bool                  `protobuf:"varint,18,opt,name=public" json:"public,omitempty"`
	CcOnly        *bool                  `protobuf:"varint,19,opt,name=cc_only,json=ccOnly" json:"cc_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractAction) Reset() {
	*x = ContractAction{}
	mi := &file_go_ei_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractAction) ProtoMessage() {}

func (x *ContractAction) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractAction.ProtoReflect.Descriptor instead.
func (*ContractAction) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{73}
}

func (x *ContractAction) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractAction) GetActionName() string {
	if x != nil && x.ActionName != nil {
		return *x.ActionName
	}
	return ""
}

func (x *ContractAction) GetApproxTime() float64 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

func (x *ContractAction) GetDestUserId() string {
	if x != nil && x.DestUserId != nil {
		return *x.DestUserId
	}
	return ""
}

func (x *ContractAction) GetContractId() string {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return ""
}

func (x *ContractAction) GetCoopId() string {
	if x != nil && x.CoopId != nil {
		return *x.CoopId
	}
	return ""
}

func (x *ContractAction) GetAutojoin() bool {
	if x != nil && x.Autojoin != nil {
		return *x.Autojoin
	}
	return false
}

func (x *ContractAction) GetGrade() uint32 {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return 0
}

func (x *ContractAction) GetReplay() bool {
	if x != nil && x.Replay != nil {
		return *x.Replay
	}
	return false
}

func (x *ContractAction) GetPointsReplay() bool {
	if x != nil && x.PointsReplay != nil {
		return *x.PointsReplay
	}
	return false
}

func (x *ContractAction) GetRewardType() uint32 {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return 0
}

func (x *ContractAction) GetRewardSubtype() string {
	if x != nil && x.RewardSubtype != nil {
		return *x.RewardSubtype
	}
	return ""
}

func (x *ContractAction) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *ContractAction) GetGoalIndex() uint32 {
	if x != nil && x.GoalIndex != nil {
		return *x.GoalIndex
	}
	return 0
}

func (x *ContractAction) GetBoostId() string {
	if x != nil && x.BoostId != nil {
		return *x.BoostId
	}
	return ""
}

func (x *ContractAction) GetTokens() uint32 {
	if x != nil && x.Tokens != nil {
		return *x.Tokens
	}
	return 0
}

func (x *ContractAction) GetKickReason() uint32 {
	if x != nil && x.KickReason != nil {
		return *x.KickReason
	}
	return 0
}

func (x *ContractAction) GetPublic() bool {
	if x != nil && x.Public != nil {
		return *x.Public
	}
	return false
}

func (x *ContractAction) GetCcOnly() bool {
	if x != nil && x.CcOnly != nil {
		return *x.CcOnly
	}
	return false
}

type UserDataInfoRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Rinfo          *BasicRequestInfo      `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId         *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceId       *string                `protobuf:"bytes,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	BackupChecksum *uint64                `protobuf:"varint,3,opt,name=backup_checksum,json=backupChecksum" json:"backup_checksum,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UserDataInfoRequest) Reset() {
	*x = UserDataInfoRequest{}
	mi := &file_go_ei_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDataInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataInfoRequest) ProtoMessage() {}

func (x *UserDataInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataInfoRequest.ProtoReflect.Descriptor instead.
func (*UserDataInfoRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{74}
}

func (x *UserDataInfoRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *UserDataInfoRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *UserDataInfoRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *UserDataInfoRequest) GetBackupChecksum() uint64 {
	if x != nil && x.BackupChecksum != nil {
		return *x.BackupChecksum
	}
	return 0
}

type UserDataInfoResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BackupChecksum  *uint64                `protobuf:"varint,1,opt,name=backup_checksum,json=backupChecksum" json:"backup_checksum,omitempty"`
	BackupTotalCash *float64               `protobuf:"fixed64,2,opt,name=backup_total_cash,json=backupTotalCash" json:"backup_total_cash,omitempty"`
	CoopMemberships []string               `protobuf:"bytes,3,rep,name=coop_memberships,json=coopMemberships" json:"coop_memberships,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UserDataInfoResponse) Reset() {
	*x = UserDataInfoResponse{}
	mi := &file_go_ei_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDataInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataInfoResponse) ProtoMessage() {}

func (x *UserDataInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataInfoResponse.ProtoReflect.Descriptor instead.
func (*UserDataInfoResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{75}
}

func (x *UserDataInfoResponse) GetBackupChecksum() uint64 {
	if x != nil && x.BackupChecksum != nil {
		return *x.BackupChecksum
	}
	return 0
}

func (x *UserDataInfoResponse) GetBackupTotalCash() float64 {
	if x != nil && x.BackupTotalCash != nil {
		return *x.BackupTotalCash
	}
	return 0
}

func (x *UserDataInfoResponse) GetCoopMemberships() []string {
	if x != nil {
		return x.CoopMemberships
	}
	return nil
}

type ClearAllUserDataRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Rinfo          *BasicRequestInfo      `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId         *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceId       *string                `protobuf:"bytes,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	BackupChecksum *uint64                `protobuf:"varint,3,opt,name=backup_checksum,json=backupChecksum" json:"backup_checksum,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ClearAllUserDataRequest) Reset() {
	*x = ClearAllUserDataRequest{}
	mi := &file_go_ei_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClearAllUserDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearAllUserDataRequest) ProtoMessage() {}

func (x *ClearAllUserDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearAllUserDataRequest.ProtoReflect.Descriptor instead.
func (*ClearAllUserDataRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{76}
}

func (x *ClearAllUserDataRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ClearAllUserDataRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ClearAllUserDataRequest) GetDeviceId() string {
	if x != nil && x.DeviceId != nil {
		return *x.DeviceId
	}
	return ""
}

func (x *ClearAllUserDataRequest) GetBackupChecksum() uint64 {
	if x != nil && x.BackupChecksum != nil {
		return *x.BackupChecksum
	}
	return 0
}

type ServerGift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	RewardType    *RewardType            `protobuf:"varint,3,opt,name=reward_type,json=rewardType,enum=ei.RewardType" json:"reward_type,omitempty"`
	RewardSubType *string                `protobuf:"bytes,4,opt,name=reward_sub_type,json=rewardSubType" json:"reward_sub_type,omitempty"`
	RewardAmount  *float64               `protobuf:"fixed64,5,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerGift) Reset() {
	*x = ServerGift{}
	mi := &file_go_ei_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerGift) ProtoMessage() {}

func (x *ServerGift) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerGift.ProtoReflect.Descriptor instead.
func (*ServerGift) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{77}
}

func (x *ServerGift) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ServerGift) GetRewardType() RewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return RewardType_CASH
}

func (x *ServerGift) GetRewardSubType() string {
	if x != nil && x.RewardSubType != nil {
		return *x.RewardSubType
	}
	return ""
}

func (x *ServerGift) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

type LiveConfig struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	ConfigId      *string                  `protobuf:"bytes,1,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	BoostsConfig  *LiveConfig_BoostsConfig `protobuf:"bytes,2,opt,name=boosts_config,json=boostsConfig" json:"boosts_config,omitempty"`
	GiftConfig    *LiveConfig_GiftConfig   `protobuf:"bytes,3,opt,name=gift_config,json=giftConfig" json:"gift_config,omitempty"`
	MiscConfig    *LiveConfig_MiscConfig   `protobuf:"bytes,4,opt,name=misc_config,json=miscConfig" json:"misc_config,omitempty"`
	HelpConfig    *LiveConfig_HelpConfig   `protobuf:"bytes,5,opt,name=help_config,json=helpConfig" json:"help_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveConfig) Reset() {
	*x = LiveConfig{}
	mi := &file_go_ei_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig) ProtoMessage() {}

func (x *LiveConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78}
}

func (x *LiveConfig) GetConfigId() string {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return ""
}

func (x *LiveConfig) GetBoostsConfig() *LiveConfig_BoostsConfig {
	if x != nil {
		return x.BoostsConfig
	}
	return nil
}

func (x *LiveConfig) GetGiftConfig() *LiveConfig_GiftConfig {
	if x != nil {
		return x.GiftConfig
	}
	return nil
}

func (x *LiveConfig) GetMiscConfig() *LiveConfig_MiscConfig {
	if x != nil {
		return x.MiscConfig
	}
	return nil
}

func (x *LiveConfig) GetHelpConfig() *LiveConfig_HelpConfig {
	if x != nil {
		return x.HelpConfig
	}
	return nil
}

type InGameMail struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Title               *string                `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Date                *string                `protobuf:"bytes,8,opt,name=date" json:"date,omitempty"`
	Message             *string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Action              *string                `protobuf:"bytes,4,opt,name=action" json:"action,omitempty"`
	Url                 *string                `protobuf:"bytes,5,opt,name=url" json:"url,omitempty"`
	AppLink             *UILocation            `protobuf:"varint,14,opt,name=app_link,json=appLink,enum=ei.UILocation" json:"app_link,omitempty"`
	AppLinkExtra        *string                `protobuf:"bytes,15,opt,name=app_link_extra,json=appLinkExtra" json:"app_link_extra,omitempty"`
	Image               *DLCItem               `protobuf:"bytes,16,opt,name=image" json:"image,omitempty"`
	ImageWidth          *float64               `protobuf:"fixed64,21,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight         *float64               `protobuf:"fixed64,22,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	Platform            *uint32                `protobuf:"varint,7,opt,name=platform" json:"platform,omitempty"`
	Builds              []string               `protobuf:"bytes,9,rep,name=builds" json:"builds,omitempty"`
	MinClientVersion    *uint32                `protobuf:"varint,10,opt,name=min_client_version,json=minClientVersion" json:"min_client_version,omitempty"`
	MaxClientVersion    *uint32                `protobuf:"varint,12,opt,name=max_client_version,json=maxClientVersion" json:"max_client_version,omitempty"`
	MinSoulEggs         *float64               `protobuf:"fixed64,11,opt,name=min_soul_eggs,json=minSoulEggs" json:"min_soul_eggs,omitempty"`
	MaxSoulEggs         *float64               `protobuf:"fixed64,29,opt,name=max_soul_eggs,json=maxSoulEggs" json:"max_soul_eggs,omitempty"`
	MinMysticalBonus    *float64               `protobuf:"fixed64,13,opt,name=min_mystical_bonus,json=minMysticalBonus" json:"min_mystical_bonus,omitempty"`
	UserType            *UserType              `protobuf:"varint,17,opt,name=user_type,json=userType,enum=ei.UserType" json:"user_type,omitempty"`
	MinPiggyBreaks      *uint32                `protobuf:"varint,20,opt,name=min_piggy_breaks,json=minPiggyBreaks" json:"min_piggy_breaks,omitempty"`
	GoldTip             *float64               `protobuf:"fixed64,6,opt,name=gold_tip,json=goldTip" json:"gold_tip,omitempty"`
	Tip                 *bool                  `protobuf:"varint,23,opt,name=tip" json:"tip,omitempty"`
	Priority            *uint32                `protobuf:"varint,27,opt,name=priority" json:"priority,omitempty"`
	MinDaysSinceLastTip *float64               `protobuf:"fixed64,24,opt,name=min_days_since_last_tip,json=minDaysSinceLastTip" json:"min_days_since_last_tip,omitempty"`
	MaxRetries          *uint32                `protobuf:"varint,25,opt,name=max_retries,json=maxRetries" json:"max_retries,omitempty"`
	DaysUntilRetry      *float64               `protobuf:"fixed64,26,opt,name=days_until_retry,json=daysUntilRetry" json:"days_until_retry,omitempty"`
	Category            *string                `protobuf:"bytes,28,opt,name=category" json:"category,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *InGameMail) Reset() {
	*x = InGameMail{}
	mi := &file_go_ei_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InGameMail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InGameMail) ProtoMessage() {}

func (x *InGameMail) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InGameMail.ProtoReflect.Descriptor instead.
func (*InGameMail) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{79}
}

func (x *InGameMail) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *InGameMail) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *InGameMail) GetDate() string {
	if x != nil && x.Date != nil {
		return *x.Date
	}
	return ""
}

func (x *InGameMail) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *InGameMail) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *InGameMail) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *InGameMail) GetAppLink() UILocation {
	if x != nil && x.AppLink != nil {
		return *x.AppLink
	}
	return UILocation_NONE
}

func (x *InGameMail) GetAppLinkExtra() string {
	if x != nil && x.AppLinkExtra != nil {
		return *x.AppLinkExtra
	}
	return ""
}

func (x *InGameMail) GetImage() *DLCItem {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *InGameMail) GetImageWidth() float64 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *InGameMail) GetImageHeight() float64 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *InGameMail) GetPlatform() uint32 {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return 0
}

func (x *InGameMail) GetBuilds() []string {
	if x != nil {
		return x.Builds
	}
	return nil
}

func (x *InGameMail) GetMinClientVersion() uint32 {
	if x != nil && x.MinClientVersion != nil {
		return *x.MinClientVersion
	}
	return 0
}

func (x *InGameMail) GetMaxClientVersion() uint32 {
	if x != nil && x.MaxClientVersion != nil {
		return *x.MaxClientVersion
	}
	return 0
}

func (x *InGameMail) GetMinSoulEggs() float64 {
	if x != nil && x.MinSoulEggs != nil {
		return *x.MinSoulEggs
	}
	return 0
}

func (x *InGameMail) GetMaxSoulEggs() float64 {
	if x != nil && x.MaxSoulEggs != nil {
		return *x.MaxSoulEggs
	}
	return 0
}

func (x *InGameMail) GetMinMysticalBonus() float64 {
	if x != nil && x.MinMysticalBonus != nil {
		return *x.MinMysticalBonus
	}
	return 0
}

func (x *InGameMail) GetUserType() UserType {
	if x != nil && x.UserType != nil {
		return *x.UserType
	}
	return UserType_ALL_USERS
}

func (x *InGameMail) GetMinPiggyBreaks() uint32 {
	if x != nil && x.MinPiggyBreaks != nil {
		return *x.MinPiggyBreaks
	}
	return 0
}

func (x *InGameMail) GetGoldTip() float64 {
	if x != nil && x.GoldTip != nil {
		return *x.GoldTip
	}
	return 0
}

func (x *InGameMail) GetTip() bool {
	if x != nil && x.Tip != nil {
		return *x.Tip
	}
	return false
}

func (x *InGameMail) GetPriority() uint32 {
	if x != nil && x.Priority != nil {
		return *x.Priority
	}
	return 0
}

func (x *InGameMail) GetMinDaysSinceLastTip() float64 {
	if x != nil && x.MinDaysSinceLastTip != nil {
		return *x.MinDaysSinceLastTip
	}
	return 0
}

func (x *InGameMail) GetMaxRetries() uint32 {
	if x != nil && x.MaxRetries != nil {
		return *x.MaxRetries
	}
	return 0
}

func (x *InGameMail) GetDaysUntilRetry() float64 {
	if x != nil && x.DaysUntilRetry != nil {
		return *x.DaysUntilRetry
	}
	return 0
}

func (x *InGameMail) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

type MailDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mail          []*InGameMail          `protobuf:"bytes,1,rep,name=mail" json:"mail,omitempty"`
	TipsDbData    []byte                 `protobuf:"bytes,2,opt,name=tips_db_data,json=tipsDbData" json:"tips_db_data,omitempty"`
	TipsChecksum  *string                `protobuf:"bytes,3,opt,name=tips_checksum,json=tipsChecksum" json:"tips_checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MailDB) Reset() {
	*x = MailDB{}
	mi := &file_go_ei_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailDB) ProtoMessage() {}

func (x *MailDB) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailDB.ProtoReflect.Descriptor instead.
func (*MailDB) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{80}
}

func (x *MailDB) GetMail() []*InGameMail {
	if x != nil {
		return x.Mail
	}
	return nil
}

func (x *MailDB) GetTipsDbData() []byte {
	if x != nil {
		return x.TipsDbData
	}
	return nil
}

func (x *MailDB) GetTipsChecksum() string {
	if x != nil && x.TipsChecksum != nil {
		return *x.TipsChecksum
	}
	return ""
}

type TipsDB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tips          []*InGameMail          `protobuf:"bytes,1,rep,name=tips" json:"tips,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TipsDB) Reset() {
	*x = TipsDB{}
	mi := &file_go_ei_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TipsDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TipsDB) ProtoMessage() {}

func (x *TipsDB) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TipsDB.ProtoReflect.Descriptor instead.
func (*TipsDB) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{81}
}

func (x *TipsDB) GetTips() []*InGameMail {
	if x != nil {
		return x.Tips
	}
	return nil
}

type MailState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReadMailIds   []string               `protobuf:"bytes,1,rep,name=read_mail_ids,json=readMailIds" json:"read_mail_ids,omitempty"`
	TipsStates    []*MailState_TipState  `protobuf:"bytes,2,rep,name=tips_states,json=tipsStates" json:"tips_states,omitempty"`
	TipsChecksum  *string                `protobuf:"bytes,3,opt,name=tips_checksum,json=tipsChecksum" json:"tips_checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MailState) Reset() {
	*x = MailState{}
	mi := &file_go_ei_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailState) ProtoMessage() {}

func (x *MailState) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailState.ProtoReflect.Descriptor instead.
func (*MailState) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{82}
}

func (x *MailState) GetReadMailIds() []string {
	if x != nil {
		return x.ReadMailIds
	}
	return nil
}

func (x *MailState) GetTipsStates() []*MailState_TipState {
	if x != nil {
		return x.TipsStates
	}
	return nil
}

func (x *MailState) GetTipsChecksum() string {
	if x != nil && x.TipsChecksum != nil {
		return *x.TipsChecksum
	}
	return ""
}

type PeriodicalsResponse struct {
	state              protoimpl.MessageState             `protogen:"open.v1"`
	Sales              *SalesInfo                         `protobuf:"bytes,1,opt,name=sales" json:"sales,omitempty"`
	Events             *EggIncCurrentEvents               `protobuf:"bytes,2,opt,name=events" json:"events,omitempty"`
	Contracts          *ContractsResponse                 `protobuf:"bytes,3,opt,name=contracts" json:"contracts,omitempty"`
	Evaluations        []*ContractEvaluation              `protobuf:"bytes,8,rep,name=evaluations" json:"evaluations,omitempty"`
	Gifts              []*ServerGift                      `protobuf:"bytes,4,rep,name=gifts" json:"gifts,omitempty"`
	ArtifactCases      []*CompleteMissionResponse         `protobuf:"bytes,9,rep,name=artifact_cases,json=artifactCases" json:"artifact_cases,omitempty"`
	LiveConfig         *LiveConfig                        `protobuf:"bytes,5,opt,name=live_config,json=liveConfig" json:"live_config,omitempty"`
	MailBag            *MailDB                            `protobuf:"bytes,6,opt,name=mail_bag,json=mailBag" json:"mail_bag,omitempty"`
	ContractPlayerInfo *ContractPlayerInfo                `protobuf:"bytes,7,opt,name=contract_player_info,json=contractPlayerInfo" json:"contract_player_info,omitempty"`
	ShowcaseRoyalties  []*PeriodicalsResponse_RoyaltyInfo `protobuf:"bytes,10,rep,name=showcase_royalties,json=showcaseRoyalties" json:"showcase_royalties,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PeriodicalsResponse) Reset() {
	*x = PeriodicalsResponse{}
	mi := &file_go_ei_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodicalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicalsResponse) ProtoMessage() {}

func (x *PeriodicalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicalsResponse.ProtoReflect.Descriptor instead.
func (*PeriodicalsResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{83}
}

func (x *PeriodicalsResponse) GetSales() *SalesInfo {
	if x != nil {
		return x.Sales
	}
	return nil
}

func (x *PeriodicalsResponse) GetEvents() *EggIncCurrentEvents {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PeriodicalsResponse) GetContracts() *ContractsResponse {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *PeriodicalsResponse) GetEvaluations() []*ContractEvaluation {
	if x != nil {
		return x.Evaluations
	}
	return nil
}

func (x *PeriodicalsResponse) GetGifts() []*ServerGift {
	if x != nil {
		return x.Gifts
	}
	return nil
}

func (x *PeriodicalsResponse) GetArtifactCases() []*CompleteMissionResponse {
	if x != nil {
		return x.ArtifactCases
	}
	return nil
}

func (x *PeriodicalsResponse) GetLiveConfig() *LiveConfig {
	if x != nil {
		return x.LiveConfig
	}
	return nil
}

func (x *PeriodicalsResponse) GetMailBag() *MailDB {
	if x != nil {
		return x.MailBag
	}
	return nil
}

func (x *PeriodicalsResponse) GetContractPlayerInfo() *ContractPlayerInfo {
	if x != nil {
		return x.ContractPlayerInfo
	}
	return nil
}

func (x *PeriodicalsResponse) GetShowcaseRoyalties() []*PeriodicalsResponse_RoyaltyInfo {
	if x != nil {
		return x.ShowcaseRoyalties
	}
	return nil
}

type GetPeriodicalsRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Rinfo                *BasicRequestInfo      `protobuf:"bytes,12,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId               *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PiggyFull            *bool                  `protobuf:"varint,2,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull       *bool                  `protobuf:"varint,3,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	SecondsFullRealtime  *float64               `protobuf:"fixed64,4,opt,name=seconds_full_realtime,json=secondsFullRealtime" json:"seconds_full_realtime,omitempty"`
	SecondsFullGametime  *float64               `protobuf:"fixed64,5,opt,name=seconds_full_gametime,json=secondsFullGametime" json:"seconds_full_gametime,omitempty"`
	LostIncrements       *uint32                `protobuf:"varint,7,opt,name=lost_increments,json=lostIncrements" json:"lost_increments,omitempty"`
	SoulEggs             *float64               `protobuf:"fixed64,8,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	MysticalEarningsMult *float64               `protobuf:"fixed64,13,opt,name=mystical_earnings_mult,json=mysticalEarningsMult" json:"mystical_earnings_mult,omitempty"`
	Eop                  *uint32                `protobuf:"varint,14,opt,name=eop" json:"eop,omitempty"`
	ContractsUnlocked    *bool                  `protobuf:"varint,15,opt,name=contracts_unlocked,json=contractsUnlocked" json:"contracts_unlocked,omitempty"`
	ArtifactsUnlocked    *bool                  `protobuf:"varint,16,opt,name=artifacts_unlocked,json=artifactsUnlocked" json:"artifacts_unlocked,omitempty"`
	CurrentClientVersion *uint32                `protobuf:"varint,10,opt,name=current_client_version,json=currentClientVersion" json:"current_client_version,omitempty"`
	Debug                *bool                  `protobuf:"varint,11,opt,name=debug" json:"debug,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetPeriodicalsRequest) Reset() {
	*x = GetPeriodicalsRequest{}
	mi := &file_go_ei_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeriodicalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeriodicalsRequest) ProtoMessage() {}

func (x *GetPeriodicalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeriodicalsRequest.ProtoReflect.Descriptor instead.
func (*GetPeriodicalsRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{84}
}

func (x *GetPeriodicalsRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *GetPeriodicalsRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetPeriodicalsRequest) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *GetPeriodicalsRequest) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *GetPeriodicalsRequest) GetSecondsFullRealtime() float64 {
	if x != nil && x.SecondsFullRealtime != nil {
		return *x.SecondsFullRealtime
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetSecondsFullGametime() float64 {
	if x != nil && x.SecondsFullGametime != nil {
		return *x.SecondsFullGametime
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetLostIncrements() uint32 {
	if x != nil && x.LostIncrements != nil {
		return *x.LostIncrements
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetMysticalEarningsMult() float64 {
	if x != nil && x.MysticalEarningsMult != nil {
		return *x.MysticalEarningsMult
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetEop() uint32 {
	if x != nil && x.Eop != nil {
		return *x.Eop
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetContractsUnlocked() bool {
	if x != nil && x.ContractsUnlocked != nil {
		return *x.ContractsUnlocked
	}
	return false
}

func (x *GetPeriodicalsRequest) GetArtifactsUnlocked() bool {
	if x != nil && x.ArtifactsUnlocked != nil {
		return *x.ArtifactsUnlocked
	}
	return false
}

func (x *GetPeriodicalsRequest) GetCurrentClientVersion() uint32 {
	if x != nil && x.CurrentClientVersion != nil {
		return *x.CurrentClientVersion
	}
	return 0
}

func (x *GetPeriodicalsRequest) GetDebug() bool {
	if x != nil && x.Debug != nil {
		return *x.Debug
	}
	return false
}

type ConfigRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Rinfo             *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	SoulEggs          *float64               `protobuf:"fixed64,2,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	ContractsUnlocked *bool                  `protobuf:"varint,5,opt,name=contracts_unlocked,json=contractsUnlocked" json:"contracts_unlocked,omitempty"`
	ArtifactsUnlocked *bool                  `protobuf:"varint,3,opt,name=artifacts_unlocked,json=artifactsUnlocked" json:"artifacts_unlocked,omitempty"`
	FuelTankUnlocked  *bool                  `protobuf:"varint,4,opt,name=fuel_tank_unlocked,json=fuelTankUnlocked" json:"fuel_tank_unlocked,omitempty"`
	ProPermit         *bool                  `protobuf:"varint,6,opt,name=pro_permit,json=proPermit" json:"pro_permit,omitempty"`
	Ultra             *bool                  `protobuf:"varint,7,opt,name=ultra" json:"ultra,omitempty"`
	TipsChecksum      *string                `protobuf:"bytes,8,opt,name=tips_checksum,json=tipsChecksum" json:"tips_checksum,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConfigRequest) Reset() {
	*x = ConfigRequest{}
	mi := &file_go_ei_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRequest) ProtoMessage() {}

func (x *ConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRequest.ProtoReflect.Descriptor instead.
func (*ConfigRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{85}
}

func (x *ConfigRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ConfigRequest) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *ConfigRequest) GetContractsUnlocked() bool {
	if x != nil && x.ContractsUnlocked != nil {
		return *x.ContractsUnlocked
	}
	return false
}

func (x *ConfigRequest) GetArtifactsUnlocked() bool {
	if x != nil && x.ArtifactsUnlocked != nil {
		return *x.ArtifactsUnlocked
	}
	return false
}

func (x *ConfigRequest) GetFuelTankUnlocked() bool {
	if x != nil && x.FuelTankUnlocked != nil {
		return *x.FuelTankUnlocked
	}
	return false
}

func (x *ConfigRequest) GetProPermit() bool {
	if x != nil && x.ProPermit != nil {
		return *x.ProPermit
	}
	return false
}

func (x *ConfigRequest) GetUltra() bool {
	if x != nil && x.Ultra != nil {
		return *x.Ultra
	}
	return false
}

func (x *ConfigRequest) GetTipsChecksum() string {
	if x != nil && x.TipsChecksum != nil {
		return *x.TipsChecksum
	}
	return ""
}

type ConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LiveConfig    *LiveConfig            `protobuf:"bytes,1,opt,name=live_config,json=liveConfig" json:"live_config,omitempty"`
	MailBag       *MailDB                `protobuf:"bytes,2,opt,name=mail_bag,json=mailBag" json:"mail_bag,omitempty"`
	DlcCatalog    *DLCCatalog            `protobuf:"bytes,3,opt,name=dlc_catalog,json=dlcCatalog" json:"dlc_catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigResponse) Reset() {
	*x = ConfigResponse{}
	mi := &file_go_ei_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigResponse) ProtoMessage() {}

func (x *ConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigResponse.ProtoReflect.Descriptor instead.
func (*ConfigResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{86}
}

func (x *ConfigResponse) GetLiveConfig() *LiveConfig {
	if x != nil {
		return x.LiveConfig
	}
	return nil
}

func (x *ConfigResponse) GetMailBag() *MailDB {
	if x != nil {
		return x.MailBag
	}
	return nil
}

func (x *ConfigResponse) GetDlcCatalog() *DLCCatalog {
	if x != nil {
		return x.DlcCatalog
	}
	return nil
}

type AdAttributionRawData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeviceAdId    *string                `protobuf:"bytes,1,opt,name=device_ad_id,json=deviceAdId" json:"device_ad_id,omitempty"`
	UserId        *string                `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AdNetwork     *string                `protobuf:"bytes,2,opt,name=ad_network,json=adNetwork" json:"ad_network,omitempty"`
	JsonData      *string                `protobuf:"bytes,3,opt,name=json_data,json=jsonData" json:"json_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdAttributionRawData) Reset() {
	*x = AdAttributionRawData{}
	mi := &file_go_ei_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdAttributionRawData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAttributionRawData) ProtoMessage() {}

func (x *AdAttributionRawData) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAttributionRawData.ProtoReflect.Descriptor instead.
func (*AdAttributionRawData) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{87}
}

func (x *AdAttributionRawData) GetDeviceAdId() string {
	if x != nil && x.DeviceAdId != nil {
		return *x.DeviceAdId
	}
	return ""
}

func (x *AdAttributionRawData) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AdAttributionRawData) GetAdNetwork() string {
	if x != nil && x.AdNetwork != nil {
		return *x.AdNetwork
	}
	return ""
}

func (x *AdAttributionRawData) GetJsonData() string {
	if x != nil && x.JsonData != nil {
		return *x.JsonData
	}
	return ""
}

type AdAttributionRow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	AdId          *string                `protobuf:"bytes,2,opt,name=ad_id,json=adId" json:"ad_id,omitempty"`
	AdNetwork     *string                `protobuf:"bytes,3,opt,name=ad_network,json=adNetwork" json:"ad_network,omitempty"`
	Campaign      *string                `protobuf:"bytes,4,opt,name=campaign" json:"campaign,omitempty"`
	Keyword       *string                `protobuf:"bytes,5,opt,name=keyword" json:"keyword,omitempty"`
	Extra         *string                `protobuf:"bytes,6,opt,name=extra" json:"extra,omitempty"`
	ClickDate     *float32               `protobuf:"fixed32,7,opt,name=click_date,json=clickDate" json:"click_date,omitempty"`
	DownloadDate  *float32               `protobuf:"fixed32,8,opt,name=download_date,json=downloadDate" json:"download_date,omitempty"`
	ApproxTime    *float32               `protobuf:"fixed32,9,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdAttributionRow) Reset() {
	*x = AdAttributionRow{}
	mi := &file_go_ei_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdAttributionRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAttributionRow) ProtoMessage() {}

func (x *AdAttributionRow) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAttributionRow.ProtoReflect.Descriptor instead.
func (*AdAttributionRow) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{88}
}

func (x *AdAttributionRow) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AdAttributionRow) GetAdId() string {
	if x != nil && x.AdId != nil {
		return *x.AdId
	}
	return ""
}

func (x *AdAttributionRow) GetAdNetwork() string {
	if x != nil && x.AdNetwork != nil {
		return *x.AdNetwork
	}
	return ""
}

func (x *AdAttributionRow) GetCampaign() string {
	if x != nil && x.Campaign != nil {
		return *x.Campaign
	}
	return ""
}

func (x *AdAttributionRow) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *AdAttributionRow) GetExtra() string {
	if x != nil && x.Extra != nil {
		return *x.Extra
	}
	return ""
}

func (x *AdAttributionRow) GetClickDate() float32 {
	if x != nil && x.ClickDate != nil {
		return *x.ClickDate
	}
	return 0
}

func (x *AdAttributionRow) GetDownloadDate() float32 {
	if x != nil && x.DownloadDate != nil {
		return *x.DownloadDate
	}
	return 0
}

func (x *AdAttributionRow) GetApproxTime() float32 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

type AdAttributionInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	DeviceAdId      *string                `protobuf:"bytes,1,opt,name=device_ad_id,json=deviceAdId" json:"device_ad_id,omitempty"`
	NetworkName     *string                `protobuf:"bytes,2,opt,name=network_name,json=networkName" json:"network_name,omitempty"`
	Attribution     *bool                  `protobuf:"varint,3,opt,name=attribution" json:"attribution,omitempty"`
	OrgName         *string                `protobuf:"bytes,4,opt,name=org_name,json=orgName" json:"org_name,omitempty"`
	OrgId           *string                `protobuf:"bytes,5,opt,name=org_id,json=orgId" json:"org_id,omitempty"`
	CampaignName    *string                `protobuf:"bytes,6,opt,name=campaign_name,json=campaignName" json:"campaign_name,omitempty"`
	CampaignId      *string                `protobuf:"bytes,7,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	ClickDate       *string                `protobuf:"bytes,8,opt,name=click_date,json=clickDate" json:"click_date,omitempty"`
	ConversionDate  *string                `protobuf:"bytes,9,opt,name=conversion_date,json=conversionDate" json:"conversion_date,omitempty"`
	ConversionType  *string                `protobuf:"bytes,10,opt,name=conversion_type,json=conversionType" json:"conversion_type,omitempty"`
	Geo             *string                `protobuf:"bytes,11,opt,name=geo" json:"geo,omitempty"`
	AdgroupName     *string                `protobuf:"bytes,12,opt,name=adgroup_name,json=adgroupName" json:"adgroup_name,omitempty"`
	AdgroupId       *string                `protobuf:"bytes,13,opt,name=adgroup_id,json=adgroupId" json:"adgroup_id,omitempty"`
	Keyword         *string                `protobuf:"bytes,14,opt,name=keyword" json:"keyword,omitempty"`
	KeywordId       *string                `protobuf:"bytes,15,opt,name=keyword_id,json=keywordId" json:"keyword_id,omitempty"`
	KeywordExtra    *string                `protobuf:"bytes,16,opt,name=keyword_extra,json=keywordExtra" json:"keyword_extra,omitempty"`
	CreativesetName *string                `protobuf:"bytes,17,opt,name=creativeset_name,json=creativesetName" json:"creativeset_name,omitempty"`
	CreativesetId   *string                `protobuf:"bytes,18,opt,name=creativeset_id,json=creativesetId" json:"creativeset_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdAttributionInfo) Reset() {
	*x = AdAttributionInfo{}
	mi := &file_go_ei_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdAttributionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdAttributionInfo) ProtoMessage() {}

func (x *AdAttributionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdAttributionInfo.ProtoReflect.Descriptor instead.
func (*AdAttributionInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{89}
}

func (x *AdAttributionInfo) GetDeviceAdId() string {
	if x != nil && x.DeviceAdId != nil {
		return *x.DeviceAdId
	}
	return ""
}

func (x *AdAttributionInfo) GetNetworkName() string {
	if x != nil && x.NetworkName != nil {
		return *x.NetworkName
	}
	return ""
}

func (x *AdAttributionInfo) GetAttribution() bool {
	if x != nil && x.Attribution != nil {
		return *x.Attribution
	}
	return false
}

func (x *AdAttributionInfo) GetOrgName() string {
	if x != nil && x.OrgName != nil {
		return *x.OrgName
	}
	return ""
}

func (x *AdAttributionInfo) GetOrgId() string {
	if x != nil && x.OrgId != nil {
		return *x.OrgId
	}
	return ""
}

func (x *AdAttributionInfo) GetCampaignName() string {
	if x != nil && x.CampaignName != nil {
		return *x.CampaignName
	}
	return ""
}

func (x *AdAttributionInfo) GetCampaignId() string {
	if x != nil && x.CampaignId != nil {
		return *x.CampaignId
	}
	return ""
}

func (x *AdAttributionInfo) GetClickDate() string {
	if x != nil && x.ClickDate != nil {
		return *x.ClickDate
	}
	return ""
}

func (x *AdAttributionInfo) GetConversionDate() string {
	if x != nil && x.ConversionDate != nil {
		return *x.ConversionDate
	}
	return ""
}

func (x *AdAttributionInfo) GetConversionType() string {
	if x != nil && x.ConversionType != nil {
		return *x.ConversionType
	}
	return ""
}

func (x *AdAttributionInfo) GetGeo() string {
	if x != nil && x.Geo != nil {
		return *x.Geo
	}
	return ""
}

func (x *AdAttributionInfo) GetAdgroupName() string {
	if x != nil && x.AdgroupName != nil {
		return *x.AdgroupName
	}
	return ""
}

func (x *AdAttributionInfo) GetAdgroupId() string {
	if x != nil && x.AdgroupId != nil {
		return *x.AdgroupId
	}
	return ""
}

func (x *AdAttributionInfo) GetKeyword() string {
	if x != nil && x.Keyword != nil {
		return *x.Keyword
	}
	return ""
}

func (x *AdAttributionInfo) GetKeywordId() string {
	if x != nil && x.KeywordId != nil {
		return *x.KeywordId
	}
	return ""
}

func (x *AdAttributionInfo) GetKeywordExtra() string {
	if x != nil && x.KeywordExtra != nil {
		return *x.KeywordExtra
	}
	return ""
}

func (x *AdAttributionInfo) GetCreativesetName() string {
	if x != nil && x.CreativesetName != nil {
		return *x.CreativesetName
	}
	return ""
}

func (x *AdAttributionInfo) GetCreativesetId() string {
	if x != nil && x.CreativesetId != nil {
		return *x.CreativesetId
	}
	return ""
}

type ArtifactsClientInfo struct {
	state                          protoimpl.MessageState             `protogen:"open.v1"`
	MissionCapacityMult            *float64                           `protobuf:"fixed64,1,opt,name=mission_capacity_mult,json=missionCapacityMult" json:"mission_capacity_mult,omitempty"`
	MissionDurationMult            *float64                           `protobuf:"fixed64,2,opt,name=mission_duration_mult,json=missionDurationMult" json:"mission_duration_mult,omitempty"`
	MissionFtlDurationResearchMult *float64                           `protobuf:"fixed64,4,opt,name=mission_ftl_duration_research_mult,json=missionFtlDurationResearchMult" json:"mission_ftl_duration_research_mult,omitempty"`
	MissionCapacityResearchMult    *float64                           `protobuf:"fixed64,6,opt,name=mission_capacity_research_mult,json=missionCapacityResearchMult" json:"mission_capacity_research_mult,omitempty"`
	LaunchCounts                   []*ArtifactsClientInfo_LaunchCount `protobuf:"bytes,3,rep,name=launch_counts,json=launchCounts" json:"launch_counts,omitempty"`
	LastServerLaunchCountSumTime   *float64                           `protobuf:"fixed64,5,opt,name=last_server_launch_count_sum_time,json=lastServerLaunchCountSumTime" json:"last_server_launch_count_sum_time,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ArtifactsClientInfo) Reset() {
	*x = ArtifactsClientInfo{}
	mi := &file_go_ei_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsClientInfo) ProtoMessage() {}

func (x *ArtifactsClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsClientInfo.ProtoReflect.Descriptor instead.
func (*ArtifactsClientInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{90}
}

func (x *ArtifactsClientInfo) GetMissionCapacityMult() float64 {
	if x != nil && x.MissionCapacityMult != nil {
		return *x.MissionCapacityMult
	}
	return 0
}

func (x *ArtifactsClientInfo) GetMissionDurationMult() float64 {
	if x != nil && x.MissionDurationMult != nil {
		return *x.MissionDurationMult
	}
	return 0
}

func (x *ArtifactsClientInfo) GetMissionFtlDurationResearchMult() float64 {
	if x != nil && x.MissionFtlDurationResearchMult != nil {
		return *x.MissionFtlDurationResearchMult
	}
	return 0
}

func (x *ArtifactsClientInfo) GetMissionCapacityResearchMult() float64 {
	if x != nil && x.MissionCapacityResearchMult != nil {
		return *x.MissionCapacityResearchMult
	}
	return 0
}

func (x *ArtifactsClientInfo) GetLaunchCounts() []*ArtifactsClientInfo_LaunchCount {
	if x != nil {
		return x.LaunchCounts
	}
	return nil
}

func (x *ArtifactsClientInfo) GetLastServerLaunchCountSumTime() float64 {
	if x != nil && x.LastServerLaunchCountSumTime != nil {
		return *x.LastServerLaunchCountSumTime
	}
	return 0
}

type MissionInfo struct {
	state            protoimpl.MessageState    `protogen:"open.v1"`
	Ship             *MissionInfo_Spaceship    `protobuf:"varint,1,opt,name=ship,enum=ei.MissionInfo_Spaceship" json:"ship,omitempty"`
	Status           *MissionInfo_Status       `protobuf:"varint,2,opt,name=status,enum=ei.MissionInfo_Status" json:"status,omitempty"`
	DurationType     *MissionInfo_DurationType `protobuf:"varint,3,opt,name=duration_type,json=durationType,enum=ei.MissionInfo_DurationType" json:"duration_type,omitempty"`
	Fuel             []*MissionInfo_Fuel       `protobuf:"bytes,4,rep,name=fuel" json:"fuel,omitempty"`
	Level            *uint32                   `protobuf:"varint,12,opt,name=level" json:"level,omitempty"`
	DurationSeconds  *float64                  `protobuf:"fixed64,5,opt,name=duration_seconds,json=durationSeconds" json:"duration_seconds,omitempty"`
	Capacity         *uint32                   `protobuf:"varint,9,opt,name=capacity" json:"capacity,omitempty"`
	QualityBump      *float64                  `protobuf:"fixed64,11,opt,name=quality_bump,json=qualityBump" json:"quality_bump,omitempty"`
	TargetArtifact   *ArtifactSpec_Name        `protobuf:"varint,13,opt,name=target_artifact,json=targetArtifact,enum=ei.ArtifactSpec_Name" json:"target_artifact,omitempty"`
	SecondsRemaining *float64                  `protobuf:"fixed64,6,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	StartTimeDerived *float64                  `protobuf:"fixed64,8,opt,name=start_time_derived,json=startTimeDerived" json:"start_time_derived,omitempty"`
	MissionLog       *string                   `protobuf:"bytes,10,opt,name=mission_log,json=missionLog" json:"mission_log,omitempty"`
	Identifier       *string                   `protobuf:"bytes,7,opt,name=identifier" json:"identifier,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MissionInfo) Reset() {
	*x = MissionInfo{}
	mi := &file_go_ei_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo) ProtoMessage() {}

func (x *MissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo.ProtoReflect.Descriptor instead.
func (*MissionInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{91}
}

func (x *MissionInfo) GetShip() MissionInfo_Spaceship {
	if x != nil && x.Ship != nil {
		return *x.Ship
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *MissionInfo) GetStatus() MissionInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return MissionInfo_FUELING
}

func (x *MissionInfo) GetDurationType() MissionInfo_DurationType {
	if x != nil && x.DurationType != nil {
		return *x.DurationType
	}
	return MissionInfo_SHORT
}

func (x *MissionInfo) GetFuel() []*MissionInfo_Fuel {
	if x != nil {
		return x.Fuel
	}
	return nil
}

func (x *MissionInfo) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *MissionInfo) GetDurationSeconds() float64 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *MissionInfo) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *MissionInfo) GetQualityBump() float64 {
	if x != nil && x.QualityBump != nil {
		return *x.QualityBump
	}
	return 0
}

func (x *MissionInfo) GetTargetArtifact() ArtifactSpec_Name {
	if x != nil && x.TargetArtifact != nil {
		return *x.TargetArtifact
	}
	return ArtifactSpec_LUNAR_TOTEM
}

func (x *MissionInfo) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *MissionInfo) GetStartTimeDerived() float64 {
	if x != nil && x.StartTimeDerived != nil {
		return *x.StartTimeDerived
	}
	return 0
}

func (x *MissionInfo) GetMissionLog() string {
	if x != nil && x.MissionLog != nil {
		return *x.MissionLog
	}
	return ""
}

func (x *MissionInfo) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

type ArtifactSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *ArtifactSpec_Name     `protobuf:"varint,1,opt,name=name,enum=ei.ArtifactSpec_Name" json:"name,omitempty"`
	Level         *ArtifactSpec_Level    `protobuf:"varint,2,opt,name=level,enum=ei.ArtifactSpec_Level" json:"level,omitempty"`
	Rarity        *ArtifactSpec_Rarity   `protobuf:"varint,3,opt,name=rarity,enum=ei.ArtifactSpec_Rarity" json:"rarity,omitempty"`
	Egg           *Egg                   `protobuf:"varint,4,opt,name=egg,enum=ei.Egg" json:"egg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactSpec) Reset() {
	*x = ArtifactSpec{}
	mi := &file_go_ei_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSpec) ProtoMessage() {}

func (x *ArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSpec.ProtoReflect.Descriptor instead.
func (*ArtifactSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{92}
}

func (x *ArtifactSpec) GetName() ArtifactSpec_Name {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ArtifactSpec_LUNAR_TOTEM
}

func (x *ArtifactSpec) GetLevel() ArtifactSpec_Level {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return ArtifactSpec_INFERIOR
}

func (x *ArtifactSpec) GetRarity() ArtifactSpec_Rarity {
	if x != nil && x.Rarity != nil {
		return *x.Rarity
	}
	return ArtifactSpec_COMMON
}

func (x *ArtifactSpec) GetEgg() Egg {
	if x != nil && x.Egg != nil {
		return *x.Egg
	}
	return Egg_EDIBLE
}

type CompleteArtifact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *ArtifactSpec          `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Stones        []*ArtifactSpec        `protobuf:"bytes,2,rep,name=stones" json:"stones,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteArtifact) Reset() {
	*x = CompleteArtifact{}
	mi := &file_go_ei_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteArtifact) ProtoMessage() {}

func (x *CompleteArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteArtifact.ProtoReflect.Descriptor instead.
func (*CompleteArtifact) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{93}
}

func (x *CompleteArtifact) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CompleteArtifact) GetStones() []*ArtifactSpec {
	if x != nil {
		return x.Stones
	}
	return nil
}

type ArtifactInventoryItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ItemId        *uint64                `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	Artifact      *CompleteArtifact      `protobuf:"bytes,2,opt,name=artifact" json:"artifact,omitempty"`
	Quantity      *float64               `protobuf:"fixed64,3,opt,name=quantity" json:"quantity,omitempty"`
	ServerId      *string                `protobuf:"bytes,4,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactInventoryItem) Reset() {
	*x = ArtifactInventoryItem{}
	mi := &file_go_ei_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactInventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactInventoryItem) ProtoMessage() {}

func (x *ArtifactInventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactInventoryItem.ProtoReflect.Descriptor instead.
func (*ArtifactInventoryItem) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{94}
}

func (x *ArtifactInventoryItem) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *ArtifactInventoryItem) GetArtifact() *CompleteArtifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *ArtifactInventoryItem) GetQuantity() float64 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

func (x *ArtifactInventoryItem) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

type InventorySlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Occupied      *bool                  `protobuf:"varint,1,opt,name=occupied" json:"occupied,omitempty"`
	ItemId        *uint32                `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InventorySlot) Reset() {
	*x = InventorySlot{}
	mi := &file_go_ei_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InventorySlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InventorySlot) ProtoMessage() {}

func (x *InventorySlot) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InventorySlot.ProtoReflect.Descriptor instead.
func (*InventorySlot) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{95}
}

func (x *InventorySlot) GetOccupied() bool {
	if x != nil && x.Occupied != nil {
		return *x.Occupied
	}
	return false
}

func (x *InventorySlot) GetItemId() uint32 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type ArtifactsConfigurationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,2,opt,name=rinfo" json:"rinfo,omitempty"`
	ClientVersion *uint32                `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactsConfigurationRequest) Reset() {
	*x = ArtifactsConfigurationRequest{}
	mi := &file_go_ei_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationRequest) ProtoMessage() {}

func (x *ArtifactsConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{96}
}

func (x *ArtifactsConfigurationRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ArtifactsConfigurationRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

type ArtifactsConfigurationResponse struct {
	state              protoimpl.MessageState                               `protogen:"open.v1"`
	MissionParameters  []*ArtifactsConfigurationResponse_MissionParameters  `protobuf:"bytes,1,rep,name=mission_parameters,json=missionParameters" json:"mission_parameters,omitempty"`
	ArtifactParameters []*ArtifactsConfigurationResponse_ArtifactParameters `protobuf:"bytes,2,rep,name=artifact_parameters,json=artifactParameters" json:"artifact_parameters,omitempty"`
	CraftingLevelInfos []*ArtifactsConfigurationResponse_CraftingLevelInfo  `protobuf:"bytes,3,rep,name=crafting_level_infos,json=craftingLevelInfos" json:"crafting_level_infos,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ArtifactsConfigurationResponse) Reset() {
	*x = ArtifactsConfigurationResponse{}
	mi := &file_go_ei_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{97}
}

func (x *ArtifactsConfigurationResponse) GetMissionParameters() []*ArtifactsConfigurationResponse_MissionParameters {
	if x != nil {
		return x.MissionParameters
	}
	return nil
}

func (x *ArtifactsConfigurationResponse) GetArtifactParameters() []*ArtifactsConfigurationResponse_ArtifactParameters {
	if x != nil {
		return x.ArtifactParameters
	}
	return nil
}

func (x *ArtifactsConfigurationResponse) GetCraftingLevelInfos() []*ArtifactsConfigurationResponse_CraftingLevelInfo {
	if x != nil {
		return x.CraftingLevelInfos
	}
	return nil
}

type MissionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	ClientVersion *uint32                `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	EiUserId      *string                `protobuf:"bytes,3,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	Info          *MissionInfo           `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	ClientInfo    *ArtifactsClientInfo   `protobuf:"bytes,5,opt,name=client_info,json=clientInfo" json:"client_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MissionRequest) Reset() {
	*x = MissionRequest{}
	mi := &file_go_ei_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionRequest) ProtoMessage() {}

func (x *MissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionRequest.ProtoReflect.Descriptor instead.
func (*MissionRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{98}
}

func (x *MissionRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *MissionRequest) GetClientVersion() uint32 {
	if x != nil && x.ClientVersion != nil {
		return *x.ClientVersion
	}
	return 0
}

func (x *MissionRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *MissionRequest) GetInfo() *MissionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *MissionRequest) GetClientInfo() *ArtifactsClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

type MissionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Info          *MissionInfo           `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MissionResponse) Reset() {
	*x = MissionResponse{}
	mi := &file_go_ei_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionResponse) ProtoMessage() {}

func (x *MissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionResponse.ProtoReflect.Descriptor instead.
func (*MissionResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{99}
}

func (x *MissionResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *MissionResponse) GetInfo() *MissionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetActiveMissionsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ActiveMissions []*MissionInfo         `protobuf:"bytes,2,rep,name=active_missions,json=activeMissions" json:"active_missions,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetActiveMissionsResponse) Reset() {
	*x = GetActiveMissionsResponse{}
	mi := &file_go_ei_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetActiveMissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveMissionsResponse) ProtoMessage() {}

func (x *GetActiveMissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveMissionsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveMissionsResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{100}
}

func (x *GetActiveMissionsResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *GetActiveMissionsResponse) GetActiveMissions() []*MissionInfo {
	if x != nil {
		return x.ActiveMissions
	}
	return nil
}

type CompleteMissionResponse struct {
	state         protoimpl.MessageState                        `protogen:"open.v1"`
	Success       *bool                                         `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Info          *MissionInfo                                  `protobuf:"bytes,2,opt,name=info" json:"info,omitempty"`
	Artifacts     []*CompleteMissionResponse_SecureArtifactSpec `protobuf:"bytes,3,rep,name=artifacts" json:"artifacts,omitempty"`
	OtherRewards  []*Reward                                     `protobuf:"bytes,4,rep,name=other_rewards,json=otherRewards" json:"other_rewards,omitempty"`
	EiUserId      *string                                       `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteMissionResponse) Reset() {
	*x = CompleteMissionResponse{}
	mi := &file_go_ei_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMissionResponse) ProtoMessage() {}

func (x *CompleteMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMissionResponse.ProtoReflect.Descriptor instead.
func (*CompleteMissionResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{101}
}

func (x *CompleteMissionResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *CompleteMissionResponse) GetInfo() *MissionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *CompleteMissionResponse) GetArtifacts() []*CompleteMissionResponse_SecureArtifactSpec {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *CompleteMissionResponse) GetOtherRewards() []*Reward {
	if x != nil {
		return x.OtherRewards
	}
	return nil
}

func (x *CompleteMissionResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type CollectContractArtifactRewardsRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Rinfo              *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,2,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	League             *uint32                `protobuf:"varint,5,opt,name=league" json:"league,omitempty"`
	Grade              *Contract_PlayerGrade  `protobuf:"varint,6,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	GoalIndex          *uint32                `protobuf:"varint,3,opt,name=goal_index,json=goalIndex" json:"goal_index,omitempty"`
	BestShip           *MissionInfo_Spaceship `protobuf:"varint,4,opt,name=best_ship,json=bestShip,enum=ei.MissionInfo_Spaceship" json:"best_ship,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CollectContractArtifactRewardsRequest) Reset() {
	*x = CollectContractArtifactRewardsRequest{}
	mi := &file_go_ei_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectContractArtifactRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectContractArtifactRewardsRequest) ProtoMessage() {}

func (x *CollectContractArtifactRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectContractArtifactRewardsRequest.ProtoReflect.Descriptor instead.
func (*CollectContractArtifactRewardsRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{102}
}

func (x *CollectContractArtifactRewardsRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *CollectContractArtifactRewardsRequest) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *CollectContractArtifactRewardsRequest) GetLeague() uint32 {
	if x != nil && x.League != nil {
		return *x.League
	}
	return 0
}

func (x *CollectContractArtifactRewardsRequest) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *CollectContractArtifactRewardsRequest) GetGoalIndex() uint32 {
	if x != nil && x.GoalIndex != nil {
		return *x.GoalIndex
	}
	return 0
}

func (x *CollectContractArtifactRewardsRequest) GetBestShip() MissionInfo_Spaceship {
	if x != nil && x.BestShip != nil {
		return *x.BestShip
	}
	return MissionInfo_CHICKEN_ONE
}

type CollectSeasonArtifactRewardsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Rinfo            *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	SeasonIdentifier *string                `protobuf:"bytes,2,opt,name=season_identifier,json=seasonIdentifier" json:"season_identifier,omitempty"`
	Cxp              *float64               `protobuf:"fixed64,3,opt,name=cxp" json:"cxp,omitempty"`
	BestShip         *MissionInfo_Spaceship `protobuf:"varint,4,opt,name=best_ship,json=bestShip,enum=ei.MissionInfo_Spaceship" json:"best_ship,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CollectSeasonArtifactRewardsRequest) Reset() {
	*x = CollectSeasonArtifactRewardsRequest{}
	mi := &file_go_ei_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectSeasonArtifactRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectSeasonArtifactRewardsRequest) ProtoMessage() {}

func (x *CollectSeasonArtifactRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectSeasonArtifactRewardsRequest.ProtoReflect.Descriptor instead.
func (*CollectSeasonArtifactRewardsRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{103}
}

func (x *CollectSeasonArtifactRewardsRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *CollectSeasonArtifactRewardsRequest) GetSeasonIdentifier() string {
	if x != nil && x.SeasonIdentifier != nil {
		return *x.SeasonIdentifier
	}
	return ""
}

func (x *CollectSeasonArtifactRewardsRequest) GetCxp() float64 {
	if x != nil && x.Cxp != nil {
		return *x.Cxp
	}
	return 0
}

func (x *CollectSeasonArtifactRewardsRequest) GetBestShip() MissionInfo_Spaceship {
	if x != nil && x.BestShip != nil {
		return *x.BestShip
	}
	return MissionInfo_CHICKEN_ONE
}

type CraftArtifactRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo        `protobuf:"bytes,5,opt,name=rinfo" json:"rinfo,omitempty"`
	EiUserId      *string                  `protobuf:"bytes,1,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	Spec          *ArtifactSpec            `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	ItemId        *uint64                  `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	GoldPricePaid *float64                 `protobuf:"fixed64,6,opt,name=gold_price_paid,json=goldPricePaid" json:"gold_price_paid,omitempty"`
	CraftingCount *uint32                  `protobuf:"varint,7,opt,name=crafting_count,json=craftingCount" json:"crafting_count,omitempty"`
	CraftingXp    *float64                 `protobuf:"fixed64,8,opt,name=crafting_xp,json=craftingXp" json:"crafting_xp,omitempty"`
	Ingredients   []*ArtifactInventoryItem `protobuf:"bytes,4,rep,name=ingredients" json:"ingredients,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CraftArtifactRequest) Reset() {
	*x = CraftArtifactRequest{}
	mi := &file_go_ei_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CraftArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftArtifactRequest) ProtoMessage() {}

func (x *CraftArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftArtifactRequest.ProtoReflect.Descriptor instead.
func (*CraftArtifactRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{104}
}

func (x *CraftArtifactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *CraftArtifactRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *CraftArtifactRequest) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CraftArtifactRequest) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CraftArtifactRequest) GetGoldPricePaid() float64 {
	if x != nil && x.GoldPricePaid != nil {
		return *x.GoldPricePaid
	}
	return 0
}

func (x *CraftArtifactRequest) GetCraftingCount() uint32 {
	if x != nil && x.CraftingCount != nil {
		return *x.CraftingCount
	}
	return 0
}

func (x *CraftArtifactRequest) GetCraftingXp() float64 {
	if x != nil && x.CraftingXp != nil {
		return *x.CraftingXp
	}
	return 0
}

func (x *CraftArtifactRequest) GetIngredients() []*ArtifactInventoryItem {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

type CraftArtifactResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ItemId         *uint64                `protobuf:"varint,1,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	EiUserId       *string                `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	RarityAchieved *ArtifactSpec_Rarity   `protobuf:"varint,2,opt,name=rarity_achieved,json=rarityAchieved,enum=ei.ArtifactSpec_Rarity,def=0" json:"rarity_achieved,omitempty"`
	ServerId       *string                `protobuf:"bytes,3,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

// Default values for CraftArtifactResponse fields.
const (
	Default_CraftArtifactResponse_RarityAchieved = ArtifactSpec_COMMON
)

func (x *CraftArtifactResponse) Reset() {
	*x = CraftArtifactResponse{}
	mi := &file_go_ei_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CraftArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CraftArtifactResponse) ProtoMessage() {}

func (x *CraftArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CraftArtifactResponse.ProtoReflect.Descriptor instead.
func (*CraftArtifactResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{105}
}

func (x *CraftArtifactResponse) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

func (x *CraftArtifactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *CraftArtifactResponse) GetRarityAchieved() ArtifactSpec_Rarity {
	if x != nil && x.RarityAchieved != nil {
		return *x.RarityAchieved
	}
	return Default_CraftArtifactResponse_RarityAchieved
}

func (x *CraftArtifactResponse) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

type ConsumeArtifactRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Rinfo               *BasicRequestInfo      `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	EiUserId            *string                `protobuf:"bytes,3,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	Spec                *ArtifactSpec          `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	ArtifactServerId    *string                `protobuf:"bytes,5,opt,name=artifact_server_id,json=artifactServerId" json:"artifact_server_id,omitempty"`
	OriginalItemId      *uint64                `protobuf:"varint,2,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	AdditionalServerIds []string               `protobuf:"bytes,7,rep,name=additional_server_ids,json=additionalServerIds" json:"additional_server_ids,omitempty"`
	AdditionalItemIds   []uint64               `protobuf:"varint,8,rep,name=additional_item_ids,json=additionalItemIds" json:"additional_item_ids,omitempty"`
	Quantity            *uint32                `protobuf:"varint,6,opt,name=quantity" json:"quantity,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ConsumeArtifactRequest) Reset() {
	*x = ConsumeArtifactRequest{}
	mi := &file_go_ei_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumeArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeArtifactRequest) ProtoMessage() {}

func (x *ConsumeArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeArtifactRequest.ProtoReflect.Descriptor instead.
func (*ConsumeArtifactRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{106}
}

func (x *ConsumeArtifactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ConsumeArtifactRequest) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

func (x *ConsumeArtifactRequest) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ConsumeArtifactRequest) GetArtifactServerId() string {
	if x != nil && x.ArtifactServerId != nil {
		return *x.ArtifactServerId
	}
	return ""
}

func (x *ConsumeArtifactRequest) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *ConsumeArtifactRequest) GetAdditionalServerIds() []string {
	if x != nil {
		return x.AdditionalServerIds
	}
	return nil
}

func (x *ConsumeArtifactRequest) GetAdditionalItemIds() []uint64 {
	if x != nil {
		return x.AdditionalItemIds
	}
	return nil
}

func (x *ConsumeArtifactRequest) GetQuantity() uint32 {
	if x != nil && x.Quantity != nil {
		return *x.Quantity
	}
	return 0
}

type ConsumeArtifactResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Success           *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	OriginalItemId    *uint64                `protobuf:"varint,2,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	AdditionalItemIds []uint64               `protobuf:"varint,6,rep,name=additional_item_ids,json=additionalItemIds" json:"additional_item_ids,omitempty"`
	Byproducts        []*ArtifactSpec        `protobuf:"bytes,3,rep,name=byproducts" json:"byproducts,omitempty"`
	OtherRewards      []*Reward              `protobuf:"bytes,4,rep,name=other_rewards,json=otherRewards" json:"other_rewards,omitempty"`
	EiUserId          *string                `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ConsumeArtifactResponse) Reset() {
	*x = ConsumeArtifactResponse{}
	mi := &file_go_ei_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsumeArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeArtifactResponse) ProtoMessage() {}

func (x *ConsumeArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeArtifactResponse.ProtoReflect.Descriptor instead.
func (*ConsumeArtifactResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{107}
}

func (x *ConsumeArtifactResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *ConsumeArtifactResponse) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *ConsumeArtifactResponse) GetAdditionalItemIds() []uint64 {
	if x != nil {
		return x.AdditionalItemIds
	}
	return nil
}

func (x *ConsumeArtifactResponse) GetByproducts() []*ArtifactSpec {
	if x != nil {
		return x.Byproducts
	}
	return nil
}

func (x *ConsumeArtifactResponse) GetOtherRewards() []*Reward {
	if x != nil {
		return x.OtherRewards
	}
	return nil
}

func (x *ConsumeArtifactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type AuthenticateArtifactResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	OriginalItemId *uint64                `protobuf:"varint,2,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	Demote         *bool                  `protobuf:"varint,3,opt,name=demote" json:"demote,omitempty"`
	Delete         *bool                  `protobuf:"varint,4,opt,name=delete" json:"delete,omitempty"`
	EiUserId       *string                `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AuthenticateArtifactResponse) Reset() {
	*x = AuthenticateArtifactResponse{}
	mi := &file_go_ei_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticateArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateArtifactResponse) ProtoMessage() {}

func (x *AuthenticateArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateArtifactResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateArtifactResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{108}
}

func (x *AuthenticateArtifactResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *AuthenticateArtifactResponse) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *AuthenticateArtifactResponse) GetDemote() bool {
	if x != nil && x.Demote != nil {
		return *x.Demote
	}
	return false
}

func (x *AuthenticateArtifactResponse) GetDelete() bool {
	if x != nil && x.Delete != nil {
		return *x.Delete
	}
	return false
}

func (x *AuthenticateArtifactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type SetArtifactRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	Artifact      *ArtifactInventoryItem `protobuf:"bytes,2,opt,name=artifact" json:"artifact,omitempty"`
	Stones        []*ArtifactSpec        `protobuf:"bytes,3,rep,name=stones" json:"stones,omitempty"`
	GoldPricePaid *float64               `protobuf:"fixed64,4,opt,name=gold_price_paid,json=goldPricePaid" json:"gold_price_paid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetArtifactRequest) Reset() {
	*x = SetArtifactRequest{}
	mi := &file_go_ei_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArtifactRequest) ProtoMessage() {}

func (x *SetArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArtifactRequest.ProtoReflect.Descriptor instead.
func (*SetArtifactRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{109}
}

func (x *SetArtifactRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *SetArtifactRequest) GetArtifact() *ArtifactInventoryItem {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *SetArtifactRequest) GetStones() []*ArtifactSpec {
	if x != nil {
		return x.Stones
	}
	return nil
}

func (x *SetArtifactRequest) GetGoldPricePaid() float64 {
	if x != nil && x.GoldPricePaid != nil {
		return *x.GoldPricePaid
	}
	return 0
}

type SetArtifactResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	OriginalItemId *uint64                `protobuf:"varint,2,opt,name=original_item_id,json=originalItemId" json:"original_item_id,omitempty"`
	EiUserId       *string                `protobuf:"bytes,5,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SetArtifactResponse) Reset() {
	*x = SetArtifactResponse{}
	mi := &file_go_ei_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetArtifactResponse) ProtoMessage() {}

func (x *SetArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetArtifactResponse.ProtoReflect.Descriptor instead.
func (*SetArtifactResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{110}
}

func (x *SetArtifactResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *SetArtifactResponse) GetOriginalItemId() uint64 {
	if x != nil && x.OriginalItemId != nil {
		return *x.OriginalItemId
	}
	return 0
}

func (x *SetArtifactResponse) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type ArtifactsDB struct {
	state                          protoimpl.MessageState            `protogen:"open.v1"`
	InventoryItems                 []*ArtifactInventoryItem          `protobuf:"bytes,1,rep,name=inventory_items,json=inventoryItems" json:"inventory_items,omitempty"`
	ItemSequence                   *uint64                           `protobuf:"varint,2,opt,name=item_sequence,json=itemSequence" json:"item_sequence,omitempty"`
	InventorySlots                 []*InventorySlot                  `protobuf:"bytes,3,rep,name=inventory_slots,json=inventorySlots" json:"inventory_slots,omitempty"`
	ActiveArtifacts_DEPRECATED     []*ArtifactsDB_ActiveArtifactSlot `protobuf:"bytes,7,rep,name=active_artifacts_DEPRECATED,json=activeArtifactsDEPRECATED" json:"active_artifacts_DEPRECATED,omitempty"`
	ActiveArtifactSets             []*ArtifactsDB_ActiveArtifactSet  `protobuf:"bytes,11,rep,name=active_artifact_sets,json=activeArtifactSets" json:"active_artifact_sets,omitempty"`
	SavedArtifactSets              []*ArtifactsDB_ActiveArtifactSet  `protobuf:"bytes,13,rep,name=saved_artifact_sets,json=savedArtifactSets" json:"saved_artifact_sets,omitempty"`
	ArtifactStatus                 []*ArtifactsDB_CraftableArtifact  `protobuf:"bytes,12,rep,name=artifact_status,json=artifactStatus" json:"artifact_status,omitempty"`
	FuelingMission                 *MissionInfo                      `protobuf:"bytes,14,opt,name=fueling_mission,json=fuelingMission" json:"fueling_mission,omitempty"`
	MissionInfos                   []*MissionInfo                    `protobuf:"bytes,4,rep,name=mission_infos,json=missionInfos" json:"mission_infos,omitempty"`
	MissionArchive                 []*MissionInfo                    `protobuf:"bytes,5,rep,name=mission_archive,json=missionArchive" json:"mission_archive,omitempty"`
	DiscoveredArtifacts_DEPRECATED []*ArtifactSpec                   `protobuf:"bytes,8,rep,name=discovered_artifacts_DEPRECATED,json=discoveredArtifactsDEPRECATED" json:"discovered_artifacts_DEPRECATED,omitempty"`
	CraftableArtifacts_DEPRECATED  []*ArtifactsDB_CraftableArtifact  `protobuf:"bytes,9,rep,name=craftable_artifacts_DEPRECATED,json=craftableArtifactsDEPRECATED" json:"craftable_artifacts_DEPRECATED,omitempty"`
	CraftingCounts_DEPRECATED      []*ArtifactsDB_CraftableArtifact  `protobuf:"bytes,10,rep,name=crafting_counts_DEPRECATED,json=craftingCountsDEPRECATED" json:"crafting_counts_DEPRECATED,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ArtifactsDB) Reset() {
	*x = ArtifactsDB{}
	mi := &file_go_ei_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB) ProtoMessage() {}

func (x *ArtifactsDB) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB.ProtoReflect.Descriptor instead.
func (*ArtifactsDB) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{111}
}

func (x *ArtifactsDB) GetInventoryItems() []*ArtifactInventoryItem {
	if x != nil {
		return x.InventoryItems
	}
	return nil
}

func (x *ArtifactsDB) GetItemSequence() uint64 {
	if x != nil && x.ItemSequence != nil {
		return *x.ItemSequence
	}
	return 0
}

func (x *ArtifactsDB) GetInventorySlots() []*InventorySlot {
	if x != nil {
		return x.InventorySlots
	}
	return nil
}

func (x *ArtifactsDB) GetActiveArtifacts_DEPRECATED() []*ArtifactsDB_ActiveArtifactSlot {
	if x != nil {
		return x.ActiveArtifacts_DEPRECATED
	}
	return nil
}

func (x *ArtifactsDB) GetActiveArtifactSets() []*ArtifactsDB_ActiveArtifactSet {
	if x != nil {
		return x.ActiveArtifactSets
	}
	return nil
}

func (x *ArtifactsDB) GetSavedArtifactSets() []*ArtifactsDB_ActiveArtifactSet {
	if x != nil {
		return x.SavedArtifactSets
	}
	return nil
}

func (x *ArtifactsDB) GetArtifactStatus() []*ArtifactsDB_CraftableArtifact {
	if x != nil {
		return x.ArtifactStatus
	}
	return nil
}

func (x *ArtifactsDB) GetFuelingMission() *MissionInfo {
	if x != nil {
		return x.FuelingMission
	}
	return nil
}

func (x *ArtifactsDB) GetMissionInfos() []*MissionInfo {
	if x != nil {
		return x.MissionInfos
	}
	return nil
}

func (x *ArtifactsDB) GetMissionArchive() []*MissionInfo {
	if x != nil {
		return x.MissionArchive
	}
	return nil
}

func (x *ArtifactsDB) GetDiscoveredArtifacts_DEPRECATED() []*ArtifactSpec {
	if x != nil {
		return x.DiscoveredArtifacts_DEPRECATED
	}
	return nil
}

func (x *ArtifactsDB) GetCraftableArtifacts_DEPRECATED() []*ArtifactsDB_CraftableArtifact {
	if x != nil {
		return x.CraftableArtifacts_DEPRECATED
	}
	return nil
}

func (x *ArtifactsDB) GetCraftingCounts_DEPRECATED() []*ArtifactsDB_CraftableArtifact {
	if x != nil {
		return x.CraftingCounts_DEPRECATED
	}
	return nil
}

type AuthenticatedMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       []byte                 `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Version       *uint32                `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	Code          *string                `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Compressed    *bool                  `protobuf:"varint,4,opt,name=compressed" json:"compressed,omitempty"`
	OriginalSize  *uint32                `protobuf:"varint,5,opt,name=original_size,json=originalSize" json:"original_size,omitempty"`
	UserId        *string                `protobuf:"bytes,6,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthenticatedMessage) Reset() {
	*x = AuthenticatedMessage{}
	mi := &file_go_ei_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthenticatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticatedMessage) ProtoMessage() {}

func (x *AuthenticatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticatedMessage.ProtoReflect.Descriptor instead.
func (*AuthenticatedMessage) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{112}
}

func (x *AuthenticatedMessage) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AuthenticatedMessage) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *AuthenticatedMessage) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

func (x *AuthenticatedMessage) GetCompressed() bool {
	if x != nil && x.Compressed != nil {
		return *x.Compressed
	}
	return false
}

func (x *AuthenticatedMessage) GetOriginalSize() uint32 {
	if x != nil && x.OriginalSize != nil {
		return *x.OriginalSize
	}
	return 0
}

func (x *AuthenticatedMessage) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type LogCompleteMissionPayload struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Req           *MissionRequest          `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res           *CompleteMissionResponse `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogCompleteMissionPayload) Reset() {
	*x = LogCompleteMissionPayload{}
	mi := &file_go_ei_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogCompleteMissionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCompleteMissionPayload) ProtoMessage() {}

func (x *LogCompleteMissionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCompleteMissionPayload.ProtoReflect.Descriptor instead.
func (*LogCompleteMissionPayload) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{113}
}

func (x *LogCompleteMissionPayload) GetReq() *MissionRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogCompleteMissionPayload) GetRes() *CompleteMissionResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type LogCraftArtifactPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Req           *CraftArtifactRequest  `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res           *CraftArtifactResponse `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogCraftArtifactPayload) Reset() {
	*x = LogCraftArtifactPayload{}
	mi := &file_go_ei_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogCraftArtifactPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogCraftArtifactPayload) ProtoMessage() {}

func (x *LogCraftArtifactPayload) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogCraftArtifactPayload.ProtoReflect.Descriptor instead.
func (*LogCraftArtifactPayload) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{114}
}

func (x *LogCraftArtifactPayload) GetReq() *CraftArtifactRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogCraftArtifactPayload) GetRes() *CraftArtifactResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type LogConsumeArtifactPayload struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Req           *ConsumeArtifactRequest  `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res           *ConsumeArtifactResponse `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogConsumeArtifactPayload) Reset() {
	*x = LogConsumeArtifactPayload{}
	mi := &file_go_ei_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogConsumeArtifactPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogConsumeArtifactPayload) ProtoMessage() {}

func (x *LogConsumeArtifactPayload) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogConsumeArtifactPayload.ProtoReflect.Descriptor instead.
func (*LogConsumeArtifactPayload) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{115}
}

func (x *LogConsumeArtifactPayload) GetReq() *ConsumeArtifactRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogConsumeArtifactPayload) GetRes() *ConsumeArtifactResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type LogSetArtifactPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Req           *SetArtifactRequest    `protobuf:"bytes,1,opt,name=req" json:"req,omitempty"`
	Res           *SetArtifactResponse   `protobuf:"bytes,2,opt,name=res" json:"res,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogSetArtifactPayload) Reset() {
	*x = LogSetArtifactPayload{}
	mi := &file_go_ei_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogSetArtifactPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogSetArtifactPayload) ProtoMessage() {}

func (x *LogSetArtifactPayload) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogSetArtifactPayload.ProtoReflect.Descriptor instead.
func (*LogSetArtifactPayload) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{116}
}

func (x *LogSetArtifactPayload) GetReq() *SetArtifactRequest {
	if x != nil {
		return x.Req
	}
	return nil
}

func (x *LogSetArtifactPayload) GetRes() *SetArtifactResponse {
	if x != nil {
		return x.Res
	}
	return nil
}

type AccountTransferPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FromId        *string                `protobuf:"bytes,1,opt,name=from_id,json=fromId" json:"from_id,omitempty"`
	ToEiUserId    *string                `protobuf:"bytes,2,opt,name=to_ei_user_id,json=toEiUserId" json:"to_ei_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountTransferPayload) Reset() {
	*x = AccountTransferPayload{}
	mi := &file_go_ei_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountTransferPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTransferPayload) ProtoMessage() {}

func (x *AccountTransferPayload) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTransferPayload.ProtoReflect.Descriptor instead.
func (*AccountTransferPayload) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{117}
}

func (x *AccountTransferPayload) GetFromId() string {
	if x != nil && x.FromId != nil {
		return *x.FromId
	}
	return ""
}

func (x *AccountTransferPayload) GetToEiUserId() string {
	if x != nil && x.ToEiUserId != nil {
		return *x.ToEiUserId
	}
	return ""
}

type SaveBackupResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorCode      *uint32                `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	Message        *string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	ExistingBackup *Backup                `protobuf:"bytes,4,opt,name=existing_backup,json=existingBackup" json:"existing_backup,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SaveBackupResponse) Reset() {
	*x = SaveBackupResponse{}
	mi := &file_go_ei_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBackupResponse) ProtoMessage() {}

func (x *SaveBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveBackupResponse.ProtoReflect.Descriptor instead.
func (*SaveBackupResponse) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{118}
}

func (x *SaveBackupResponse) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

func (x *SaveBackupResponse) GetErrorCode() uint32 {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return 0
}

func (x *SaveBackupResponse) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *SaveBackupResponse) GetExistingBackup() *Backup {
	if x != nil {
		return x.ExistingBackup
	}
	return nil
}

type CleanAccountRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	EiUserIdToKeep *string                `protobuf:"bytes,1,opt,name=ei_user_id_to_keep,json=eiUserIdToKeep" json:"ei_user_id_to_keep,omitempty"`
	GameServicesId *string                `protobuf:"bytes,2,opt,name=game_services_id,json=gameServicesId" json:"game_services_id,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CleanAccountRequest) Reset() {
	*x = CleanAccountRequest{}
	mi := &file_go_ei_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CleanAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanAccountRequest) ProtoMessage() {}

func (x *CleanAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanAccountRequest.ProtoReflect.Descriptor instead.
func (*CleanAccountRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{119}
}

func (x *CleanAccountRequest) GetEiUserIdToKeep() string {
	if x != nil && x.EiUserIdToKeep != nil {
		return *x.EiUserIdToKeep
	}
	return ""
}

func (x *CleanAccountRequest) GetGameServicesId() string {
	if x != nil && x.GameServicesId != nil {
		return *x.GameServicesId
	}
	return ""
}

type ReturnEDTPayload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EiUserId      *string                `protobuf:"bytes,1,opt,name=ei_user_id,json=eiUserId" json:"ei_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReturnEDTPayload) Reset() {
	*x = ReturnEDTPayload{}
	mi := &file_go_ei_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReturnEDTPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnEDTPayload) ProtoMessage() {}

func (x *ReturnEDTPayload) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnEDTPayload.ProtoReflect.Descriptor instead.
func (*ReturnEDTPayload) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{120}
}

func (x *ReturnEDTPayload) GetEiUserId() string {
	if x != nil && x.EiUserId != nil {
		return *x.EiUserId
	}
	return ""
}

type DLCItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Directory     *string                `protobuf:"bytes,2,opt,name=directory" json:"directory,omitempty"`
	Ext           *string                `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
	Compressed    *bool                  `protobuf:"varint,6,opt,name=compressed" json:"compressed,omitempty"`
	OriginalSize  *uint64                `protobuf:"varint,7,opt,name=original_size,json=originalSize" json:"original_size,omitempty"`
	Url           *string                `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Checksum      *string                `protobuf:"bytes,5,opt,name=checksum" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DLCItem) Reset() {
	*x = DLCItem{}
	mi := &file_go_ei_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DLCItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCItem) ProtoMessage() {}

func (x *DLCItem) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLCItem.ProtoReflect.Descriptor instead.
func (*DLCItem) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{121}
}

func (x *DLCItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DLCItem) GetDirectory() string {
	if x != nil && x.Directory != nil {
		return *x.Directory
	}
	return ""
}

func (x *DLCItem) GetExt() string {
	if x != nil && x.Ext != nil {
		return *x.Ext
	}
	return ""
}

func (x *DLCItem) GetCompressed() bool {
	if x != nil && x.Compressed != nil {
		return *x.Compressed
	}
	return false
}

func (x *DLCItem) GetOriginalSize() uint64 {
	if x != nil && x.OriginalSize != nil {
		return *x.OriginalSize
	}
	return 0
}

func (x *DLCItem) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *DLCItem) GetChecksum() string {
	if x != nil && x.Checksum != nil {
		return *x.Checksum
	}
	return ""
}

type ShellSpec struct {
	state                 protoimpl.MessageState  `protogen:"open.v1"`
	Identifier            *string                 `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	PrimaryPiece          *ShellSpec_ShellPiece   `protobuf:"bytes,12,opt,name=primary_piece,json=primaryPiece" json:"primary_piece,omitempty"`
	Pieces                []*ShellSpec_ShellPiece `protobuf:"bytes,11,rep,name=pieces" json:"pieces,omitempty"`
	AltAssets             []*DLCItem              `protobuf:"bytes,18,rep,name=alt_assets,json=altAssets" json:"alt_assets,omitempty"`
	Name                  *string                 `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	SetIdentifier         *string                 `protobuf:"bytes,13,opt,name=set_identifier,json=setIdentifier" json:"set_identifier,omitempty"`
	ModifiedGeometry      *bool                   `protobuf:"varint,19,opt,name=modified_geometry,json=modifiedGeometry" json:"modified_geometry,omitempty"`
	Price                 *uint32                 `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	RequiredEop           *uint32                 `protobuf:"varint,5,opt,name=required_eop,json=requiredEop" json:"required_eop,omitempty"`
	RequiredSoulEggs      *float64                `protobuf:"fixed64,6,opt,name=required_soul_eggs,json=requiredSoulEggs" json:"required_soul_eggs,omitempty"`
	RequiredParentShell   *string                 `protobuf:"bytes,20,opt,name=required_parent_shell,json=requiredParentShell" json:"required_parent_shell,omitempty"`
	IsNew                 *bool                   `protobuf:"varint,14,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	Expires               *bool                   `protobuf:"varint,15,opt,name=expires" json:"expires,omitempty"`
	SecondsUntilAvailable *float64                `protobuf:"fixed64,17,opt,name=seconds_until_available,json=secondsUntilAvailable" json:"seconds_until_available,omitempty"`
	SecondsRemaining      *float64                `protobuf:"fixed64,16,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Popularity            *uint64                 `protobuf:"varint,21,opt,name=popularity" json:"popularity,omitempty"`
	DefaultAppearance     *bool                   `protobuf:"varint,8,opt,name=default_appearance,json=defaultAppearance" json:"default_appearance,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ShellSpec) Reset() {
	*x = ShellSpec{}
	mi := &file_go_ei_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellSpec) ProtoMessage() {}

func (x *ShellSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellSpec.ProtoReflect.Descriptor instead.
func (*ShellSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{122}
}

func (x *ShellSpec) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ShellSpec) GetPrimaryPiece() *ShellSpec_ShellPiece {
	if x != nil {
		return x.PrimaryPiece
	}
	return nil
}

func (x *ShellSpec) GetPieces() []*ShellSpec_ShellPiece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *ShellSpec) GetAltAssets() []*DLCItem {
	if x != nil {
		return x.AltAssets
	}
	return nil
}

func (x *ShellSpec) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ShellSpec) GetSetIdentifier() string {
	if x != nil && x.SetIdentifier != nil {
		return *x.SetIdentifier
	}
	return ""
}

func (x *ShellSpec) GetModifiedGeometry() bool {
	if x != nil && x.ModifiedGeometry != nil {
		return *x.ModifiedGeometry
	}
	return false
}

func (x *ShellSpec) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ShellSpec) GetRequiredEop() uint32 {
	if x != nil && x.RequiredEop != nil {
		return *x.RequiredEop
	}
	return 0
}

func (x *ShellSpec) GetRequiredSoulEggs() float64 {
	if x != nil && x.RequiredSoulEggs != nil {
		return *x.RequiredSoulEggs
	}
	return 0
}

func (x *ShellSpec) GetRequiredParentShell() string {
	if x != nil && x.RequiredParentShell != nil {
		return *x.RequiredParentShell
	}
	return ""
}

func (x *ShellSpec) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

func (x *ShellSpec) GetExpires() bool {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return false
}

func (x *ShellSpec) GetSecondsUntilAvailable() float64 {
	if x != nil && x.SecondsUntilAvailable != nil {
		return *x.SecondsUntilAvailable
	}
	return 0
}

func (x *ShellSpec) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *ShellSpec) GetPopularity() uint64 {
	if x != nil && x.Popularity != nil {
		return *x.Popularity
	}
	return 0
}

func (x *ShellSpec) GetDefaultAppearance() bool {
	if x != nil && x.DefaultAppearance != nil {
		return *x.DefaultAppearance
	}
	return false
}

type ShellSetSpec struct {
	state                 protoimpl.MessageState        `protogen:"open.v1"`
	Identifier            *string                       `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Name                  *string                       `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price                 *uint32                       `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	PriceMult_DEPRECATED  *float64                      `protobuf:"fixed64,8,opt,name=price_mult_DEPRECATED,json=priceMultDEPRECATED,def=1" json:"price_mult_DEPRECATED,omitempty"`
	Discount              *float64                      `protobuf:"fixed64,17,opt,name=discount" json:"discount,omitempty"`
	RequiredEop           *uint32                       `protobuf:"varint,4,opt,name=required_eop,json=requiredEop" json:"required_eop,omitempty"`
	RequiredSoulEggs      *float64                      `protobuf:"fixed64,5,opt,name=required_soul_eggs,json=requiredSoulEggs" json:"required_soul_eggs,omitempty"`
	RequiredParentSet     *string                       `protobuf:"bytes,20,opt,name=required_parent_set,json=requiredParentSet" json:"required_parent_set,omitempty"`
	IsNew                 *bool                         `protobuf:"varint,9,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	Expires               *bool                         `protobuf:"varint,10,opt,name=expires" json:"expires,omitempty"`
	SecondsUntilAvailable *float64                      `protobuf:"fixed64,18,opt,name=seconds_until_available,json=secondsUntilAvailable" json:"seconds_until_available,omitempty"`
	SecondsRemaining      *float64                      `protobuf:"fixed64,11,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Popularity            *uint64                       `protobuf:"varint,21,opt,name=popularity" json:"popularity,omitempty"`
	Decorator             *bool                         `protobuf:"varint,14,opt,name=decorator" json:"decorator,omitempty"`
	ModifiedGeometry      *bool                         `protobuf:"varint,13,opt,name=modified_geometry,json=modifiedGeometry" json:"modified_geometry,omitempty"`
	ElementSet            *bool                         `protobuf:"varint,7,opt,name=element_set,json=elementSet" json:"element_set,omitempty"`
	HexBaseColor          *string                       `protobuf:"bytes,16,opt,name=hex_base_color,json=hexBaseColor" json:"hex_base_color,omitempty"`
	Variations            []*ShellSetSpec_VariationSpec `protobuf:"bytes,15,rep,name=variations" json:"variations,omitempty"`
	Icon                  *DLCItem                      `protobuf:"bytes,19,opt,name=icon" json:"icon,omitempty"`
	DefaultAppearance     *bool                         `protobuf:"varint,6,opt,name=default_appearance,json=defaultAppearance" json:"default_appearance,omitempty"`
	CustomAppearance      *bool                         `protobuf:"varint,12,opt,name=custom_appearance,json=customAppearance" json:"custom_appearance,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

// Default values for ShellSetSpec fields.
const (
	Default_ShellSetSpec_PriceMult_DEPRECATED = float64(1)
)

func (x *ShellSetSpec) Reset() {
	*x = ShellSetSpec{}
	mi := &file_go_ei_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellSetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellSetSpec) ProtoMessage() {}

func (x *ShellSetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellSetSpec.ProtoReflect.Descriptor instead.
func (*ShellSetSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{123}
}

func (x *ShellSetSpec) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ShellSetSpec) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ShellSetSpec) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ShellSetSpec) GetPriceMult_DEPRECATED() float64 {
	if x != nil && x.PriceMult_DEPRECATED != nil {
		return *x.PriceMult_DEPRECATED
	}
	return Default_ShellSetSpec_PriceMult_DEPRECATED
}

func (x *ShellSetSpec) GetDiscount() float64 {
	if x != nil && x.Discount != nil {
		return *x.Discount
	}
	return 0
}

func (x *ShellSetSpec) GetRequiredEop() uint32 {
	if x != nil && x.RequiredEop != nil {
		return *x.RequiredEop
	}
	return 0
}

func (x *ShellSetSpec) GetRequiredSoulEggs() float64 {
	if x != nil && x.RequiredSoulEggs != nil {
		return *x.RequiredSoulEggs
	}
	return 0
}

func (x *ShellSetSpec) GetRequiredParentSet() string {
	if x != nil && x.RequiredParentSet != nil {
		return *x.RequiredParentSet
	}
	return ""
}

func (x *ShellSetSpec) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

func (x *ShellSetSpec) GetExpires() bool {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return false
}

func (x *ShellSetSpec) GetSecondsUntilAvailable() float64 {
	if x != nil && x.SecondsUntilAvailable != nil {
		return *x.SecondsUntilAvailable
	}
	return 0
}

func (x *ShellSetSpec) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *ShellSetSpec) GetPopularity() uint64 {
	if x != nil && x.Popularity != nil {
		return *x.Popularity
	}
	return 0
}

func (x *ShellSetSpec) GetDecorator() bool {
	if x != nil && x.Decorator != nil {
		return *x.Decorator
	}
	return false
}

func (x *ShellSetSpec) GetModifiedGeometry() bool {
	if x != nil && x.ModifiedGeometry != nil {
		return *x.ModifiedGeometry
	}
	return false
}

func (x *ShellSetSpec) GetElementSet() bool {
	if x != nil && x.ElementSet != nil {
		return *x.ElementSet
	}
	return false
}

func (x *ShellSetSpec) GetHexBaseColor() string {
	if x != nil && x.HexBaseColor != nil {
		return *x.HexBaseColor
	}
	return ""
}

func (x *ShellSetSpec) GetVariations() []*ShellSetSpec_VariationSpec {
	if x != nil {
		return x.Variations
	}
	return nil
}

func (x *ShellSetSpec) GetIcon() *DLCItem {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *ShellSetSpec) GetDefaultAppearance() bool {
	if x != nil && x.DefaultAppearance != nil {
		return *x.DefaultAppearance
	}
	return false
}

func (x *ShellSetSpec) GetCustomAppearance() bool {
	if x != nil && x.CustomAppearance != nil {
		return *x.CustomAppearance
	}
	return false
}

type ShellObjectSpec struct {
	state                 protoimpl.MessageState            `protogen:"open.v1"`
	Identifier            *string                           `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Name                  *string                           `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AssetType             *ShellSpec_AssetType              `protobuf:"varint,3,opt,name=asset_type,json=assetType,enum=ei.ShellSpec_AssetType" json:"asset_type,omitempty"`
	ObjectClass           *string                           `protobuf:"bytes,14,opt,name=object_class,json=objectClass" json:"object_class,omitempty"`
	IconColors            []string                          `protobuf:"bytes,15,rep,name=icon_colors,json=iconColors" json:"icon_colors,omitempty"`
	Price                 *uint32                           `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	RequiredEop           *uint32                           `protobuf:"varint,5,opt,name=required_eop,json=requiredEop" json:"required_eop,omitempty"`
	RequiredSoulEggs      *float64                          `protobuf:"fixed64,6,opt,name=required_soul_eggs,json=requiredSoulEggs" json:"required_soul_eggs,omitempty"`
	IsNew                 *bool                             `protobuf:"varint,10,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	Expires               *bool                             `protobuf:"varint,11,opt,name=expires" json:"expires,omitempty"`
	SecondsUntilAvailable *float64                          `protobuf:"fixed64,18,opt,name=seconds_until_available,json=secondsUntilAvailable" json:"seconds_until_available,omitempty"`
	SecondsRemaining      *float64                          `protobuf:"fixed64,12,opt,name=seconds_remaining,json=secondsRemaining" json:"seconds_remaining,omitempty"`
	Popularity            *uint64                           `protobuf:"varint,19,opt,name=popularity" json:"popularity,omitempty"`
	Metadata              []float64                         `protobuf:"fixed64,7,rep,name=metadata" json:"metadata,omitempty"`
	NoHats                *bool                             `protobuf:"varint,13,opt,name=no_hats,json=noHats" json:"no_hats,omitempty"`
	ChickenAnimation      *ShellObjectSpec_ChickenAnimation `protobuf:"varint,16,opt,name=chicken_animation,json=chickenAnimation,enum=ei.ShellObjectSpec_ChickenAnimation" json:"chicken_animation,omitempty"`
	SortPriority          *int32                            `protobuf:"varint,17,opt,name=sort_priority,json=sortPriority" json:"sort_priority,omitempty"`
	Pieces                []*ShellObjectSpec_LODPiece       `protobuf:"bytes,8,rep,name=pieces" json:"pieces,omitempty"`
	DefaultAppearance     *bool                             `protobuf:"varint,9,opt,name=default_appearance,json=defaultAppearance" json:"default_appearance,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ShellObjectSpec) Reset() {
	*x = ShellObjectSpec{}
	mi := &file_go_ei_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellObjectSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellObjectSpec) ProtoMessage() {}

func (x *ShellObjectSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellObjectSpec.ProtoReflect.Descriptor instead.
func (*ShellObjectSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{124}
}

func (x *ShellObjectSpec) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ShellObjectSpec) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ShellObjectSpec) GetAssetType() ShellSpec_AssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return ShellSpec_COOP
}

func (x *ShellObjectSpec) GetObjectClass() string {
	if x != nil && x.ObjectClass != nil {
		return *x.ObjectClass
	}
	return ""
}

func (x *ShellObjectSpec) GetIconColors() []string {
	if x != nil {
		return x.IconColors
	}
	return nil
}

func (x *ShellObjectSpec) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ShellObjectSpec) GetRequiredEop() uint32 {
	if x != nil && x.RequiredEop != nil {
		return *x.RequiredEop
	}
	return 0
}

func (x *ShellObjectSpec) GetRequiredSoulEggs() float64 {
	if x != nil && x.RequiredSoulEggs != nil {
		return *x.RequiredSoulEggs
	}
	return 0
}

func (x *ShellObjectSpec) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

func (x *ShellObjectSpec) GetExpires() bool {
	if x != nil && x.Expires != nil {
		return *x.Expires
	}
	return false
}

func (x *ShellObjectSpec) GetSecondsUntilAvailable() float64 {
	if x != nil && x.SecondsUntilAvailable != nil {
		return *x.SecondsUntilAvailable
	}
	return 0
}

func (x *ShellObjectSpec) GetSecondsRemaining() float64 {
	if x != nil && x.SecondsRemaining != nil {
		return *x.SecondsRemaining
	}
	return 0
}

func (x *ShellObjectSpec) GetPopularity() uint64 {
	if x != nil && x.Popularity != nil {
		return *x.Popularity
	}
	return 0
}

func (x *ShellObjectSpec) GetMetadata() []float64 {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ShellObjectSpec) GetNoHats() bool {
	if x != nil && x.NoHats != nil {
		return *x.NoHats
	}
	return false
}

func (x *ShellObjectSpec) GetChickenAnimation() ShellObjectSpec_ChickenAnimation {
	if x != nil && x.ChickenAnimation != nil {
		return *x.ChickenAnimation
	}
	return ShellObjectSpec_STANDARD_RUN
}

func (x *ShellObjectSpec) GetSortPriority() int32 {
	if x != nil && x.SortPriority != nil {
		return *x.SortPriority
	}
	return 0
}

func (x *ShellObjectSpec) GetPieces() []*ShellObjectSpec_LODPiece {
	if x != nil {
		return x.Pieces
	}
	return nil
}

func (x *ShellObjectSpec) GetDefaultAppearance() bool {
	if x != nil && x.DefaultAppearance != nil {
		return *x.DefaultAppearance
	}
	return false
}

type ShellGroupSpec struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Identifier           *string                `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Name                 *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AssetType            *ShellSpec_AssetType   `protobuf:"varint,5,opt,name=asset_type,json=assetType,enum=ei.ShellSpec_AssetType" json:"asset_type,omitempty"`
	MemberIds            []string               `protobuf:"bytes,3,rep,name=member_ids,json=memberIds" json:"member_ids,omitempty"`
	PriceMult_DEPRECATED *float64               `protobuf:"fixed64,4,opt,name=price_mult_DEPRECATED,json=priceMultDEPRECATED" json:"price_mult_DEPRECATED,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ShellGroupSpec) Reset() {
	*x = ShellGroupSpec{}
	mi := &file_go_ei_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellGroupSpec) ProtoMessage() {}

func (x *ShellGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellGroupSpec.ProtoReflect.Descriptor instead.
func (*ShellGroupSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{125}
}

func (x *ShellGroupSpec) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ShellGroupSpec) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ShellGroupSpec) GetAssetType() ShellSpec_AssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return ShellSpec_COOP
}

func (x *ShellGroupSpec) GetMemberIds() []string {
	if x != nil {
		return x.MemberIds
	}
	return nil
}

func (x *ShellGroupSpec) GetPriceMult_DEPRECATED() float64 {
	if x != nil && x.PriceMult_DEPRECATED != nil {
		return *x.PriceMult_DEPRECATED
	}
	return 0
}

type DLCCatalog struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Items                          []*DLCItem             `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	Shells                         []*ShellSpec           `protobuf:"bytes,2,rep,name=shells" json:"shells,omitempty"`
	ShellSets                      []*ShellSetSpec        `protobuf:"bytes,3,rep,name=shell_sets,json=shellSets" json:"shell_sets,omitempty"`
	Decorators                     []*ShellSetSpec        `protobuf:"bytes,6,rep,name=decorators" json:"decorators,omitempty"`
	ShellObjects                   []*ShellObjectSpec     `protobuf:"bytes,4,rep,name=shell_objects,json=shellObjects" json:"shell_objects,omitempty"`
	ShellGroups                    []*ShellGroupSpec      `protobuf:"bytes,5,rep,name=shell_groups,json=shellGroups" json:"shell_groups,omitempty"`
	ShellsShowcaseLastFeaturedTime *float64               `protobuf:"fixed64,7,opt,name=shells_showcase_last_featured_time,json=shellsShowcaseLastFeaturedTime" json:"shells_showcase_last_featured_time,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *DLCCatalog) Reset() {
	*x = DLCCatalog{}
	mi := &file_go_ei_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DLCCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLCCatalog) ProtoMessage() {}

func (x *DLCCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLCCatalog.ProtoReflect.Descriptor instead.
func (*DLCCatalog) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{126}
}

func (x *DLCCatalog) GetItems() []*DLCItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *DLCCatalog) GetShells() []*ShellSpec {
	if x != nil {
		return x.Shells
	}
	return nil
}

func (x *DLCCatalog) GetShellSets() []*ShellSetSpec {
	if x != nil {
		return x.ShellSets
	}
	return nil
}

func (x *DLCCatalog) GetDecorators() []*ShellSetSpec {
	if x != nil {
		return x.Decorators
	}
	return nil
}

func (x *DLCCatalog) GetShellObjects() []*ShellObjectSpec {
	if x != nil {
		return x.ShellObjects
	}
	return nil
}

func (x *DLCCatalog) GetShellGroups() []*ShellGroupSpec {
	if x != nil {
		return x.ShellGroups
	}
	return nil
}

func (x *DLCCatalog) GetShellsShowcaseLastFeaturedTime() float64 {
	if x != nil && x.ShellsShowcaseLastFeaturedTime != nil {
		return *x.ShellsShowcaseLastFeaturedTime
	}
	return 0
}

type ShellDB struct {
	state                        protoimpl.MessageState             `protogen:"open.v1"`
	ShellInventory               []*ShellDB_ShellStatus             `protobuf:"bytes,1,rep,name=shell_inventory,json=shellInventory" json:"shell_inventory,omitempty"`
	ShellElementInventory        []*ShellDB_ShellElementStatus      `protobuf:"bytes,5,rep,name=shell_element_inventory,json=shellElementInventory" json:"shell_element_inventory,omitempty"`
	ShellVariationInventory      []*ShellDB_ShellSetVariationStatus `protobuf:"bytes,8,rep,name=shell_variation_inventory,json=shellVariationInventory" json:"shell_variation_inventory,omitempty"`
	ShellSetInventory            []*ShellDB_ShellStatus             `protobuf:"bytes,2,rep,name=shell_set_inventory,json=shellSetInventory" json:"shell_set_inventory,omitempty"`
	ShellObjectInventory         []*ShellDB_ShellStatus             `protobuf:"bytes,4,rep,name=shell_object_inventory,json=shellObjectInventory" json:"shell_object_inventory,omitempty"`
	FarmConfigs                  []*ShellDB_FarmConfiguration       `protobuf:"bytes,3,rep,name=farm_configs,json=farmConfigs" json:"farm_configs,omitempty"`
	SavedConfigs                 []*ShellDB_SavedFarmConfiguration  `protobuf:"bytes,9,rep,name=saved_configs,json=savedConfigs" json:"saved_configs,omitempty"`
	NewShellsDownloaded          []string                           `protobuf:"bytes,6,rep,name=new_shells_downloaded,json=newShellsDownloaded" json:"new_shells_downloaded,omitempty"`
	NewShellsSeen                []string                           `protobuf:"bytes,7,rep,name=new_shells_seen,json=newShellsSeen" json:"new_shells_seen,omitempty"`
	LastShowcaseFeaturedTimeSeen *float64                           `protobuf:"fixed64,11,opt,name=last_showcase_featured_time_seen,json=lastShowcaseFeaturedTimeSeen" json:"last_showcase_featured_time_seen,omitempty"`
	LightingControlsUnlocked     *bool                              `protobuf:"varint,10,opt,name=lighting_controls_unlocked,json=lightingControlsUnlocked" json:"lighting_controls_unlocked,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ShellDB) Reset() {
	*x = ShellDB{}
	mi := &file_go_ei_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB) ProtoMessage() {}

func (x *ShellDB) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB.ProtoReflect.Descriptor instead.
func (*ShellDB) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127}
}

func (x *ShellDB) GetShellInventory() []*ShellDB_ShellStatus {
	if x != nil {
		return x.ShellInventory
	}
	return nil
}

func (x *ShellDB) GetShellElementInventory() []*ShellDB_ShellElementStatus {
	if x != nil {
		return x.ShellElementInventory
	}
	return nil
}

func (x *ShellDB) GetShellVariationInventory() []*ShellDB_ShellSetVariationStatus {
	if x != nil {
		return x.ShellVariationInventory
	}
	return nil
}

func (x *ShellDB) GetShellSetInventory() []*ShellDB_ShellStatus {
	if x != nil {
		return x.ShellSetInventory
	}
	return nil
}

func (x *ShellDB) GetShellObjectInventory() []*ShellDB_ShellStatus {
	if x != nil {
		return x.ShellObjectInventory
	}
	return nil
}

func (x *ShellDB) GetFarmConfigs() []*ShellDB_FarmConfiguration {
	if x != nil {
		return x.FarmConfigs
	}
	return nil
}

func (x *ShellDB) GetSavedConfigs() []*ShellDB_SavedFarmConfiguration {
	if x != nil {
		return x.SavedConfigs
	}
	return nil
}

func (x *ShellDB) GetNewShellsDownloaded() []string {
	if x != nil {
		return x.NewShellsDownloaded
	}
	return nil
}

func (x *ShellDB) GetNewShellsSeen() []string {
	if x != nil {
		return x.NewShellsSeen
	}
	return nil
}

func (x *ShellDB) GetLastShowcaseFeaturedTimeSeen() float64 {
	if x != nil && x.LastShowcaseFeaturedTimeSeen != nil {
		return *x.LastShowcaseFeaturedTimeSeen
	}
	return 0
}

func (x *ShellDB) GetLightingControlsUnlocked() bool {
	if x != nil && x.LightingControlsUnlocked != nil {
		return *x.LightingControlsUnlocked
	}
	return false
}

type ShellPopularityStats struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Data          []*ShellPopularityStats_Entry `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellPopularityStats) Reset() {
	*x = ShellPopularityStats{}
	mi := &file_go_ei_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellPopularityStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellPopularityStats) ProtoMessage() {}

func (x *ShellPopularityStats) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellPopularityStats.ProtoReflect.Descriptor instead.
func (*ShellPopularityStats) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{128}
}

func (x *ShellPopularityStats) GetData() []*ShellPopularityStats_Entry {
	if x != nil {
		return x.Data
	}
	return nil
}

type ShellsActionLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,8,opt,name=rinfo" json:"rinfo,omitempty"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Action        *string                `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	SubId         *string                `protobuf:"bytes,3,opt,name=sub_id,json=subId" json:"sub_id,omitempty"`
	FarmElement   *ShellDB_FarmElement   `protobuf:"varint,9,opt,name=farm_element,json=farmElement,enum=ei.ShellDB_FarmElement" json:"farm_element,omitempty"`
	Cost          *uint32                `protobuf:"varint,4,opt,name=cost" json:"cost,omitempty"`
	ApproxTime    *float64               `protobuf:"fixed64,5,opt,name=approx_time,json=approxTime" json:"approx_time,omitempty"`
	Version       *string                `protobuf:"bytes,6,opt,name=version" json:"version,omitempty"`
	FarmIndex     *int32                 `protobuf:"varint,7,opt,name=farm_index,json=farmIndex" json:"farm_index,omitempty"`
	SoulEggs      *float64               `protobuf:"fixed64,10,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	TicketsSpent  *uint64                `protobuf:"varint,11,opt,name=tickets_spent,json=ticketsSpent" json:"tickets_spent,omitempty"`
	GoldSpent     *uint64                `protobuf:"varint,12,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellsActionLog) Reset() {
	*x = ShellsActionLog{}
	mi := &file_go_ei_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellsActionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellsActionLog) ProtoMessage() {}

func (x *ShellsActionLog) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellsActionLog.ProtoReflect.Descriptor instead.
func (*ShellsActionLog) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{129}
}

func (x *ShellsActionLog) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ShellsActionLog) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ShellsActionLog) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *ShellsActionLog) GetSubId() string {
	if x != nil && x.SubId != nil {
		return *x.SubId
	}
	return ""
}

func (x *ShellsActionLog) GetFarmElement() ShellDB_FarmElement {
	if x != nil && x.FarmElement != nil {
		return *x.FarmElement
	}
	return ShellDB_HEN_HOUSE
}

func (x *ShellsActionLog) GetCost() uint32 {
	if x != nil && x.Cost != nil {
		return *x.Cost
	}
	return 0
}

func (x *ShellsActionLog) GetApproxTime() float64 {
	if x != nil && x.ApproxTime != nil {
		return *x.ApproxTime
	}
	return 0
}

func (x *ShellsActionLog) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *ShellsActionLog) GetFarmIndex() int32 {
	if x != nil && x.FarmIndex != nil {
		return *x.FarmIndex
	}
	return 0
}

func (x *ShellsActionLog) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *ShellsActionLog) GetTicketsSpent() uint64 {
	if x != nil && x.TicketsSpent != nil {
		return *x.TicketsSpent
	}
	return 0
}

func (x *ShellsActionLog) GetGoldSpent() uint64 {
	if x != nil && x.GoldSpent != nil {
		return *x.GoldSpent
	}
	return 0
}

type SubmitShellShowcaseRequest struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	Rinfo          *BasicRequestInfo          `protobuf:"bytes,4,opt,name=rinfo" json:"rinfo,omitempty"`
	LocalId        *string                    `protobuf:"bytes,1,opt,name=local_id,json=localId" json:"local_id,omitempty"`
	UserId         *string                    `protobuf:"bytes,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	PublicUsername *bool                      `protobuf:"varint,5,opt,name=public_username,json=publicUsername" json:"public_username,omitempty"`
	FarmConfig     *ShellDB_FarmConfiguration `protobuf:"bytes,3,opt,name=farm_config,json=farmConfig" json:"farm_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubmitShellShowcaseRequest) Reset() {
	*x = SubmitShellShowcaseRequest{}
	mi := &file_go_ei_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitShellShowcaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitShellShowcaseRequest) ProtoMessage() {}

func (x *SubmitShellShowcaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitShellShowcaseRequest.ProtoReflect.Descriptor instead.
func (*SubmitShellShowcaseRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{130}
}

func (x *SubmitShellShowcaseRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *SubmitShellShowcaseRequest) GetLocalId() string {
	if x != nil && x.LocalId != nil {
		return *x.LocalId
	}
	return ""
}

func (x *SubmitShellShowcaseRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *SubmitShellShowcaseRequest) GetPublicUsername() bool {
	if x != nil && x.PublicUsername != nil {
		return *x.PublicUsername
	}
	return false
}

func (x *SubmitShellShowcaseRequest) GetFarmConfig() *ShellDB_FarmConfiguration {
	if x != nil {
		return x.FarmConfig
	}
	return nil
}

type ShellShowcase struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Top           []*ShellShowcaseListingInfo `protobuf:"bytes,1,rep,name=top" json:"top,omitempty"`
	Featured      []*ShellShowcaseListingInfo `protobuf:"bytes,2,rep,name=featured" json:"featured,omitempty"`
	Fresh         []*ShellShowcaseListingInfo `protobuf:"bytes,3,rep,name=fresh" json:"fresh,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellShowcase) Reset() {
	*x = ShellShowcase{}
	mi := &file_go_ei_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellShowcase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellShowcase) ProtoMessage() {}

func (x *ShellShowcase) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellShowcase.ProtoReflect.Descriptor instead.
func (*ShellShowcase) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{131}
}

func (x *ShellShowcase) GetTop() []*ShellShowcaseListingInfo {
	if x != nil {
		return x.Top
	}
	return nil
}

func (x *ShellShowcase) GetFeatured() []*ShellShowcaseListingInfo {
	if x != nil {
		return x.Featured
	}
	return nil
}

func (x *ShellShowcase) GetFresh() []*ShellShowcaseListingInfo {
	if x != nil {
		return x.Fresh
	}
	return nil
}

type ShellShowcaseListingInfo struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Id            *string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	LocalId       *string                          `protobuf:"bytes,12,opt,name=local_id,json=localId" json:"local_id,omitempty"`
	Name          *string                          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description   *string                          `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	IsNew         *bool                            `protobuf:"varint,15,opt,name=is_new,json=isNew" json:"is_new,omitempty"`
	CreatorName   *string                          `protobuf:"bytes,14,opt,name=creator_name,json=creatorName" json:"creator_name,omitempty"`
	Status        *ShellShowcaseListingInfo_Status `protobuf:"varint,11,opt,name=status,enum=ei.ShellShowcaseListingInfo_Status" json:"status,omitempty"`
	FarmConfig    *ShellDB_FarmConfiguration       `protobuf:"bytes,4,opt,name=farm_config,json=farmConfig" json:"farm_config,omitempty"`
	Sales         *uint32                          `protobuf:"varint,5,opt,name=sales" json:"sales,omitempty"`
	Gross         *uint64                          `protobuf:"varint,6,opt,name=gross" json:"gross,omitempty"`
	Views         *uint64                          `protobuf:"varint,7,opt,name=views" json:"views,omitempty"`
	Equips        *uint64                          `protobuf:"varint,13,opt,name=equips" json:"equips,omitempty"`
	Likes         *uint32                          `protobuf:"varint,8,opt,name=likes" json:"likes,omitempty"`
	Dislikes      *uint32                          `protobuf:"varint,9,opt,name=dislikes" json:"dislikes,omitempty"`
	ShareUrl      *string                          `protobuf:"bytes,10,opt,name=share_url,json=shareUrl" json:"share_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellShowcaseListingInfo) Reset() {
	*x = ShellShowcaseListingInfo{}
	mi := &file_go_ei_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellShowcaseListingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellShowcaseListingInfo) ProtoMessage() {}

func (x *ShellShowcaseListingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellShowcaseListingInfo.ProtoReflect.Descriptor instead.
func (*ShellShowcaseListingInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{132}
}

func (x *ShellShowcaseListingInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ShellShowcaseListingInfo) GetLocalId() string {
	if x != nil && x.LocalId != nil {
		return *x.LocalId
	}
	return ""
}

func (x *ShellShowcaseListingInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ShellShowcaseListingInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *ShellShowcaseListingInfo) GetIsNew() bool {
	if x != nil && x.IsNew != nil {
		return *x.IsNew
	}
	return false
}

func (x *ShellShowcaseListingInfo) GetCreatorName() string {
	if x != nil && x.CreatorName != nil {
		return *x.CreatorName
	}
	return ""
}

func (x *ShellShowcaseListingInfo) GetStatus() ShellShowcaseListingInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ShellShowcaseListingInfo_NONE
}

func (x *ShellShowcaseListingInfo) GetFarmConfig() *ShellDB_FarmConfiguration {
	if x != nil {
		return x.FarmConfig
	}
	return nil
}

func (x *ShellShowcaseListingInfo) GetSales() uint32 {
	if x != nil && x.Sales != nil {
		return *x.Sales
	}
	return 0
}

func (x *ShellShowcaseListingInfo) GetGross() uint64 {
	if x != nil && x.Gross != nil {
		return *x.Gross
	}
	return 0
}

func (x *ShellShowcaseListingInfo) GetViews() uint64 {
	if x != nil && x.Views != nil {
		return *x.Views
	}
	return 0
}

func (x *ShellShowcaseListingInfo) GetEquips() uint64 {
	if x != nil && x.Equips != nil {
		return *x.Equips
	}
	return 0
}

func (x *ShellShowcaseListingInfo) GetLikes() uint32 {
	if x != nil && x.Likes != nil {
		return *x.Likes
	}
	return 0
}

func (x *ShellShowcaseListingInfo) GetDislikes() uint32 {
	if x != nil && x.Dislikes != nil {
		return *x.Dislikes
	}
	return 0
}

func (x *ShellShowcaseListingInfo) GetShareUrl() string {
	if x != nil && x.ShareUrl != nil {
		return *x.ShareUrl
	}
	return ""
}

type ShowcaseRoyaltyDeliveryConfirmation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,3,opt,name=rinfo" json:"rinfo,omitempty"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Amount        *uint32                `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShowcaseRoyaltyDeliveryConfirmation) Reset() {
	*x = ShowcaseRoyaltyDeliveryConfirmation{}
	mi := &file_go_ei_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowcaseRoyaltyDeliveryConfirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowcaseRoyaltyDeliveryConfirmation) ProtoMessage() {}

func (x *ShowcaseRoyaltyDeliveryConfirmation) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowcaseRoyaltyDeliveryConfirmation.ProtoReflect.Descriptor instead.
func (*ShowcaseRoyaltyDeliveryConfirmation) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{133}
}

func (x *ShowcaseRoyaltyDeliveryConfirmation) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ShowcaseRoyaltyDeliveryConfirmation) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ShowcaseRoyaltyDeliveryConfirmation) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type ShellShowcaseListingSet struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Listings      []*ShellShowcaseListingInfo `protobuf:"bytes,1,rep,name=listings" json:"listings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellShowcaseListingSet) Reset() {
	*x = ShellShowcaseListingSet{}
	mi := &file_go_ei_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellShowcaseListingSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellShowcaseListingSet) ProtoMessage() {}

func (x *ShellShowcaseListingSet) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellShowcaseListingSet.ProtoReflect.Descriptor instead.
func (*ShellShowcaseListingSet) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{134}
}

func (x *ShellShowcaseListingSet) GetListings() []*ShellShowcaseListingInfo {
	if x != nil {
		return x.Listings
	}
	return nil
}

type ShellsActionBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rinfo         *BasicRequestInfo      `protobuf:"bytes,1,opt,name=rinfo" json:"rinfo,omitempty"`
	Actions       []*ShellsActionLog     `protobuf:"bytes,2,rep,name=actions" json:"actions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellsActionBatch) Reset() {
	*x = ShellsActionBatch{}
	mi := &file_go_ei_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellsActionBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellsActionBatch) ProtoMessage() {}

func (x *ShellsActionBatch) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellsActionBatch.ProtoReflect.Descriptor instead.
func (*ShellsActionBatch) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{135}
}

func (x *ShellsActionBatch) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *ShellsActionBatch) GetActions() []*ShellsActionLog {
	if x != nil {
		return x.Actions
	}
	return nil
}

type UserVerificationAnalysis struct {
	state                         protoimpl.MessageState           `protogen:"open.v1"`
	OverallStatus                 *UserVerificationAnalysis_Status `protobuf:"varint,1,opt,name=overall_status,json=overallStatus,enum=ei.UserVerificationAnalysis_Status" json:"overall_status,omitempty"`
	StartTime                     *float64                         `protobuf:"fixed64,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	CompletionTime                *float64                         `protobuf:"fixed64,3,opt,name=completion_time,json=completionTime" json:"completion_time,omitempty"`
	VerificationCount             *int32                           `protobuf:"varint,37,opt,name=verification_count,json=verificationCount" json:"verification_count,omitempty"`
	NumPrestiges                  *float64                         `protobuf:"fixed64,14,opt,name=num_prestiges,json=numPrestiges" json:"num_prestiges,omitempty"`
	SoulEggs                      *float64                         `protobuf:"fixed64,15,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	EggsOfProphecy                *uint32                          `protobuf:"varint,27,opt,name=eggs_of_prophecy,json=eggsOfProphecy" json:"eggs_of_prophecy,omitempty"`
	IapStatus                     *UserVerificationAnalysis_Status `protobuf:"varint,18,opt,name=iap_status,json=iapStatus,enum=ei.UserVerificationAnalysis_Status" json:"iap_status,omitempty"`
	VerifiedProPermit             *bool                            `protobuf:"varint,4,opt,name=verified_pro_permit,json=verifiedProPermit" json:"verified_pro_permit,omitempty"`
	VerifiedPiggyBreaks           *uint32                          `protobuf:"varint,5,opt,name=verified_piggy_breaks,json=verifiedPiggyBreaks" json:"verified_piggy_breaks,omitempty"`
	VerifiedOtherIap              *uint32                          `protobuf:"varint,6,opt,name=verified_other_iap,json=verifiedOtherIap" json:"verified_other_iap,omitempty"`
	UnverifiedIap                 *uint32                          `protobuf:"varint,7,opt,name=unverified_iap,json=unverifiedIap" json:"unverified_iap,omitempty"`
	GoldEarned                    *float64                         `protobuf:"fixed64,13,opt,name=gold_earned,json=goldEarned" json:"gold_earned,omitempty"`
	RegularIapBuyer               *bool                            `protobuf:"varint,22,opt,name=regular_iap_buyer,json=regularIapBuyer" json:"regular_iap_buyer,omitempty"`
	RegularIapCheater             *bool                            `protobuf:"varint,23,opt,name=regular_iap_cheater,json=regularIapCheater" json:"regular_iap_cheater,omitempty"`
	ArtifactsStatus               *UserVerificationAnalysis_Status `protobuf:"varint,19,opt,name=artifacts_status,json=artifactsStatus,enum=ei.UserVerificationAnalysis_Status" json:"artifacts_status,omitempty"`
	MissionsCompleted             *uint32                          `protobuf:"varint,8,opt,name=missions_completed,json=missionsCompleted" json:"missions_completed,omitempty"`
	ArtifactsCollected            *float64                         `protobuf:"fixed64,9,opt,name=artifacts_collected,json=artifactsCollected" json:"artifacts_collected,omitempty"`
	ArtifactsConsumed             *float64                         `protobuf:"fixed64,10,opt,name=artifacts_consumed,json=artifactsConsumed" json:"artifacts_consumed,omitempty"`
	ArtifactsInInventory          *float64                         `protobuf:"fixed64,11,opt,name=artifacts_in_inventory,json=artifactsInInventory" json:"artifacts_in_inventory,omitempty"`
	RareArtifactsInInventory      *uint64                          `protobuf:"varint,33,opt,name=rare_artifacts_in_inventory,json=rareArtifactsInInventory" json:"rare_artifacts_in_inventory,omitempty"`
	RareArtifactsOnServer         *uint64                          `protobuf:"varint,34,opt,name=rare_artifacts_on_server,json=rareArtifactsOnServer" json:"rare_artifacts_on_server,omitempty"`
	LegendaryArtifactsInInventory *uint64                          `protobuf:"varint,35,opt,name=legendary_artifacts_in_inventory,json=legendaryArtifactsInInventory" json:"legendary_artifacts_in_inventory,omitempty"`
	LegendaryArtifactsOnServer    *uint64                          `protobuf:"varint,36,opt,name=legendary_artifacts_on_server,json=legendaryArtifactsOnServer" json:"legendary_artifacts_on_server,omitempty"`
	GoldSpentCrafting             *float64                         `protobuf:"fixed64,21,opt,name=gold_spent_crafting,json=goldSpentCrafting" json:"gold_spent_crafting,omitempty"`
	ExcessiveConsumes             *bool                            `protobuf:"varint,24,opt,name=excessive_consumes,json=excessiveConsumes" json:"excessive_consumes,omitempty"`
	ExcessiveInventory            *bool                            `protobuf:"varint,25,opt,name=excessive_inventory,json=excessiveInventory" json:"excessive_inventory,omitempty"`
	ExcessiveSpend                *bool                            `protobuf:"varint,26,opt,name=excessive_spend,json=excessiveSpend" json:"excessive_spend,omitempty"`
	ContractsStatus               *UserVerificationAnalysis_Status `protobuf:"varint,20,opt,name=contracts_status,json=contractsStatus,enum=ei.UserVerificationAnalysis_Status" json:"contracts_status,omitempty"`
	NumCoopMemberships            *uint32                          `protobuf:"varint,12,opt,name=num_coop_memberships,json=numCoopMemberships" json:"num_coop_memberships,omitempty"`
	ValidContracts                *uint32                          `protobuf:"varint,16,opt,name=valid_contracts,json=validContracts" json:"valid_contracts,omitempty"`
	InvalidContracts              []string                         `protobuf:"bytes,17,rep,name=invalid_contracts,json=invalidContracts" json:"invalid_contracts,omitempty"`
	ExcessiveEop                  *bool                            `protobuf:"varint,28,opt,name=excessive_eop,json=excessiveEop" json:"excessive_eop,omitempty"`
	ExcessiveInvalidContracts     *bool                            `protobuf:"varint,29,opt,name=excessive_invalid_contracts,json=excessiveInvalidContracts" json:"excessive_invalid_contracts,omitempty"`
	Verified                      *bool                            `protobuf:"varint,30,opt,name=verified" json:"verified,omitempty"`
	VerificationOverride          *bool                            `protobuf:"varint,31,opt,name=verification_override,json=verificationOverride" json:"verification_override,omitempty"`
	VerificationOverrideValue     *bool                            `protobuf:"varint,32,opt,name=verification_override_value,json=verificationOverrideValue" json:"verification_override_value,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *UserVerificationAnalysis) Reset() {
	*x = UserVerificationAnalysis{}
	mi := &file_go_ei_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserVerificationAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVerificationAnalysis) ProtoMessage() {}

func (x *UserVerificationAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVerificationAnalysis.ProtoReflect.Descriptor instead.
func (*UserVerificationAnalysis) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{136}
}

func (x *UserVerificationAnalysis) GetOverallStatus() UserVerificationAnalysis_Status {
	if x != nil && x.OverallStatus != nil {
		return *x.OverallStatus
	}
	return UserVerificationAnalysis_UNKNOWN
}

func (x *UserVerificationAnalysis) GetStartTime() float64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *UserVerificationAnalysis) GetCompletionTime() float64 {
	if x != nil && x.CompletionTime != nil {
		return *x.CompletionTime
	}
	return 0
}

func (x *UserVerificationAnalysis) GetVerificationCount() int32 {
	if x != nil && x.VerificationCount != nil {
		return *x.VerificationCount
	}
	return 0
}

func (x *UserVerificationAnalysis) GetNumPrestiges() float64 {
	if x != nil && x.NumPrestiges != nil {
		return *x.NumPrestiges
	}
	return 0
}

func (x *UserVerificationAnalysis) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *UserVerificationAnalysis) GetEggsOfProphecy() uint32 {
	if x != nil && x.EggsOfProphecy != nil {
		return *x.EggsOfProphecy
	}
	return 0
}

func (x *UserVerificationAnalysis) GetIapStatus() UserVerificationAnalysis_Status {
	if x != nil && x.IapStatus != nil {
		return *x.IapStatus
	}
	return UserVerificationAnalysis_UNKNOWN
}

func (x *UserVerificationAnalysis) GetVerifiedProPermit() bool {
	if x != nil && x.VerifiedProPermit != nil {
		return *x.VerifiedProPermit
	}
	return false
}

func (x *UserVerificationAnalysis) GetVerifiedPiggyBreaks() uint32 {
	if x != nil && x.VerifiedPiggyBreaks != nil {
		return *x.VerifiedPiggyBreaks
	}
	return 0
}

func (x *UserVerificationAnalysis) GetVerifiedOtherIap() uint32 {
	if x != nil && x.VerifiedOtherIap != nil {
		return *x.VerifiedOtherIap
	}
	return 0
}

func (x *UserVerificationAnalysis) GetUnverifiedIap() uint32 {
	if x != nil && x.UnverifiedIap != nil {
		return *x.UnverifiedIap
	}
	return 0
}

func (x *UserVerificationAnalysis) GetGoldEarned() float64 {
	if x != nil && x.GoldEarned != nil {
		return *x.GoldEarned
	}
	return 0
}

func (x *UserVerificationAnalysis) GetRegularIapBuyer() bool {
	if x != nil && x.RegularIapBuyer != nil {
		return *x.RegularIapBuyer
	}
	return false
}

func (x *UserVerificationAnalysis) GetRegularIapCheater() bool {
	if x != nil && x.RegularIapCheater != nil {
		return *x.RegularIapCheater
	}
	return false
}

func (x *UserVerificationAnalysis) GetArtifactsStatus() UserVerificationAnalysis_Status {
	if x != nil && x.ArtifactsStatus != nil {
		return *x.ArtifactsStatus
	}
	return UserVerificationAnalysis_UNKNOWN
}

func (x *UserVerificationAnalysis) GetMissionsCompleted() uint32 {
	if x != nil && x.MissionsCompleted != nil {
		return *x.MissionsCompleted
	}
	return 0
}

func (x *UserVerificationAnalysis) GetArtifactsCollected() float64 {
	if x != nil && x.ArtifactsCollected != nil {
		return *x.ArtifactsCollected
	}
	return 0
}

func (x *UserVerificationAnalysis) GetArtifactsConsumed() float64 {
	if x != nil && x.ArtifactsConsumed != nil {
		return *x.ArtifactsConsumed
	}
	return 0
}

func (x *UserVerificationAnalysis) GetArtifactsInInventory() float64 {
	if x != nil && x.ArtifactsInInventory != nil {
		return *x.ArtifactsInInventory
	}
	return 0
}

func (x *UserVerificationAnalysis) GetRareArtifactsInInventory() uint64 {
	if x != nil && x.RareArtifactsInInventory != nil {
		return *x.RareArtifactsInInventory
	}
	return 0
}

func (x *UserVerificationAnalysis) GetRareArtifactsOnServer() uint64 {
	if x != nil && x.RareArtifactsOnServer != nil {
		return *x.RareArtifactsOnServer
	}
	return 0
}

func (x *UserVerificationAnalysis) GetLegendaryArtifactsInInventory() uint64 {
	if x != nil && x.LegendaryArtifactsInInventory != nil {
		return *x.LegendaryArtifactsInInventory
	}
	return 0
}

func (x *UserVerificationAnalysis) GetLegendaryArtifactsOnServer() uint64 {
	if x != nil && x.LegendaryArtifactsOnServer != nil {
		return *x.LegendaryArtifactsOnServer
	}
	return 0
}

func (x *UserVerificationAnalysis) GetGoldSpentCrafting() float64 {
	if x != nil && x.GoldSpentCrafting != nil {
		return *x.GoldSpentCrafting
	}
	return 0
}

func (x *UserVerificationAnalysis) GetExcessiveConsumes() bool {
	if x != nil && x.ExcessiveConsumes != nil {
		return *x.ExcessiveConsumes
	}
	return false
}

func (x *UserVerificationAnalysis) GetExcessiveInventory() bool {
	if x != nil && x.ExcessiveInventory != nil {
		return *x.ExcessiveInventory
	}
	return false
}

func (x *UserVerificationAnalysis) GetExcessiveSpend() bool {
	if x != nil && x.ExcessiveSpend != nil {
		return *x.ExcessiveSpend
	}
	return false
}

func (x *UserVerificationAnalysis) GetContractsStatus() UserVerificationAnalysis_Status {
	if x != nil && x.ContractsStatus != nil {
		return *x.ContractsStatus
	}
	return UserVerificationAnalysis_UNKNOWN
}

func (x *UserVerificationAnalysis) GetNumCoopMemberships() uint32 {
	if x != nil && x.NumCoopMemberships != nil {
		return *x.NumCoopMemberships
	}
	return 0
}

func (x *UserVerificationAnalysis) GetValidContracts() uint32 {
	if x != nil && x.ValidContracts != nil {
		return *x.ValidContracts
	}
	return 0
}

func (x *UserVerificationAnalysis) GetInvalidContracts() []string {
	if x != nil {
		return x.InvalidContracts
	}
	return nil
}

func (x *UserVerificationAnalysis) GetExcessiveEop() bool {
	if x != nil && x.ExcessiveEop != nil {
		return *x.ExcessiveEop
	}
	return false
}

func (x *UserVerificationAnalysis) GetExcessiveInvalidContracts() bool {
	if x != nil && x.ExcessiveInvalidContracts != nil {
		return *x.ExcessiveInvalidContracts
	}
	return false
}

func (x *UserVerificationAnalysis) GetVerified() bool {
	if x != nil && x.Verified != nil {
		return *x.Verified
	}
	return false
}

func (x *UserVerificationAnalysis) GetVerificationOverride() bool {
	if x != nil && x.VerificationOverride != nil {
		return *x.VerificationOverride
	}
	return false
}

func (x *UserVerificationAnalysis) GetVerificationOverrideValue() bool {
	if x != nil && x.VerificationOverrideValue != nil {
		return *x.VerificationOverrideValue
	}
	return false
}

type UserSubscriptionInfo struct {
	state                     protoimpl.MessageState               `protogen:"open.v1"`
	SubscriptionLevel         *UserSubscriptionInfo_Level          `protobuf:"varint,13,opt,name=subscription_level,json=subscriptionLevel,enum=ei.UserSubscriptionInfo_Level" json:"subscription_level,omitempty"`
	NextSubscriptionLevel     *UserSubscriptionInfo_Level          `protobuf:"varint,15,opt,name=next_subscription_level,json=nextSubscriptionLevel,enum=ei.UserSubscriptionInfo_Level" json:"next_subscription_level,omitempty"`
	LockNextSubscriptionLevel *bool                                `protobuf:"varint,18,opt,name=lock_next_subscription_level,json=lockNextSubscriptionLevel" json:"lock_next_subscription_level,omitempty"`
	Platform                  *Platform                            `protobuf:"varint,10,opt,name=platform,enum=ei.Platform" json:"platform,omitempty"`
	OriginalTransactionId     *string                              `protobuf:"bytes,1,opt,name=original_transaction_id,json=originalTransactionId" json:"original_transaction_id,omitempty"`
	LinkedTransactionId       *string                              `protobuf:"bytes,16,opt,name=linked_transaction_id,json=linkedTransactionId" json:"linked_transaction_id,omitempty"`
	Acknowledged              *bool                                `protobuf:"varint,17,opt,name=acknowledged" json:"acknowledged,omitempty"`
	FirstSubscribed           *float64                             `protobuf:"fixed64,2,opt,name=first_subscribed,json=firstSubscribed" json:"first_subscribed,omitempty"`
	PeriodEnd                 *float64                             `protobuf:"fixed64,4,opt,name=period_end,json=periodEnd" json:"period_end,omitempty"`
	Status                    *UserSubscriptionInfo_Status         `protobuf:"varint,5,opt,name=status,enum=ei.UserSubscriptionInfo_Status" json:"status,omitempty"`
	StoreStatus               *string                              `protobuf:"bytes,14,opt,name=store_status,json=storeStatus" json:"store_status,omitempty"`
	AutoRenew                 *bool                                `protobuf:"varint,6,opt,name=auto_renew,json=autoRenew" json:"auto_renew,omitempty"`
	Sandbox                   *bool                                `protobuf:"varint,19,opt,name=sandbox" json:"sandbox,omitempty"`
	LastUpdated               *float64                             `protobuf:"fixed64,7,opt,name=last_updated,json=lastUpdated" json:"last_updated,omitempty"`
	History                   []*UserSubscriptionInfo_HistoryEntry `protobuf:"bytes,9,rep,name=history" json:"history,omitempty"`
	PastUserIds               []string                             `protobuf:"bytes,11,rep,name=past_user_ids,json=pastUserIds" json:"past_user_ids,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UserSubscriptionInfo) Reset() {
	*x = UserSubscriptionInfo{}
	mi := &file_go_ei_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSubscriptionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubscriptionInfo) ProtoMessage() {}

func (x *UserSubscriptionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubscriptionInfo.ProtoReflect.Descriptor instead.
func (*UserSubscriptionInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{137}
}

func (x *UserSubscriptionInfo) GetSubscriptionLevel() UserSubscriptionInfo_Level {
	if x != nil && x.SubscriptionLevel != nil {
		return *x.SubscriptionLevel
	}
	return UserSubscriptionInfo_STANDARD
}

func (x *UserSubscriptionInfo) GetNextSubscriptionLevel() UserSubscriptionInfo_Level {
	if x != nil && x.NextSubscriptionLevel != nil {
		return *x.NextSubscriptionLevel
	}
	return UserSubscriptionInfo_STANDARD
}

func (x *UserSubscriptionInfo) GetLockNextSubscriptionLevel() bool {
	if x != nil && x.LockNextSubscriptionLevel != nil {
		return *x.LockNextSubscriptionLevel
	}
	return false
}

func (x *UserSubscriptionInfo) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *UserSubscriptionInfo) GetOriginalTransactionId() string {
	if x != nil && x.OriginalTransactionId != nil {
		return *x.OriginalTransactionId
	}
	return ""
}

func (x *UserSubscriptionInfo) GetLinkedTransactionId() string {
	if x != nil && x.LinkedTransactionId != nil {
		return *x.LinkedTransactionId
	}
	return ""
}

func (x *UserSubscriptionInfo) GetAcknowledged() bool {
	if x != nil && x.Acknowledged != nil {
		return *x.Acknowledged
	}
	return false
}

func (x *UserSubscriptionInfo) GetFirstSubscribed() float64 {
	if x != nil && x.FirstSubscribed != nil {
		return *x.FirstSubscribed
	}
	return 0
}

func (x *UserSubscriptionInfo) GetPeriodEnd() float64 {
	if x != nil && x.PeriodEnd != nil {
		return *x.PeriodEnd
	}
	return 0
}

func (x *UserSubscriptionInfo) GetStatus() UserSubscriptionInfo_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return UserSubscriptionInfo_UNKNOWN
}

func (x *UserSubscriptionInfo) GetStoreStatus() string {
	if x != nil && x.StoreStatus != nil {
		return *x.StoreStatus
	}
	return ""
}

func (x *UserSubscriptionInfo) GetAutoRenew() bool {
	if x != nil && x.AutoRenew != nil {
		return *x.AutoRenew
	}
	return false
}

func (x *UserSubscriptionInfo) GetSandbox() bool {
	if x != nil && x.Sandbox != nil {
		return *x.Sandbox
	}
	return false
}

func (x *UserSubscriptionInfo) GetLastUpdated() float64 {
	if x != nil && x.LastUpdated != nil {
		return *x.LastUpdated
	}
	return 0
}

func (x *UserSubscriptionInfo) GetHistory() []*UserSubscriptionInfo_HistoryEntry {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *UserSubscriptionInfo) GetPastUserIds() []string {
	if x != nil {
		return x.PastUserIds
	}
	return nil
}

type SubscriptionChangeHintRequest struct {
	state                 protoimpl.MessageState      `protogen:"open.v1"`
	Rinfo                 *BasicRequestInfo           `protobuf:"bytes,3,opt,name=rinfo" json:"rinfo,omitempty"`
	OriginalTransactionId *string                     `protobuf:"bytes,1,opt,name=original_transaction_id,json=originalTransactionId" json:"original_transaction_id,omitempty"`
	NextSubscriptionLevel *UserSubscriptionInfo_Level `protobuf:"varint,2,opt,name=next_subscription_level,json=nextSubscriptionLevel,enum=ei.UserSubscriptionInfo_Level" json:"next_subscription_level,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *SubscriptionChangeHintRequest) Reset() {
	*x = SubscriptionChangeHintRequest{}
	mi := &file_go_ei_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscriptionChangeHintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionChangeHintRequest) ProtoMessage() {}

func (x *SubscriptionChangeHintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionChangeHintRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionChangeHintRequest) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{138}
}

func (x *SubscriptionChangeHintRequest) GetRinfo() *BasicRequestInfo {
	if x != nil {
		return x.Rinfo
	}
	return nil
}

func (x *SubscriptionChangeHintRequest) GetOriginalTransactionId() string {
	if x != nil && x.OriginalTransactionId != nil {
		return *x.OriginalTransactionId
	}
	return ""
}

func (x *SubscriptionChangeHintRequest) GetNextSubscriptionLevel() UserSubscriptionInfo_Level {
	if x != nil && x.NextSubscriptionLevel != nil {
		return *x.NextSubscriptionLevel
	}
	return UserSubscriptionInfo_STANDARD
}

type CXPEvalRolloutInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CurrentId     *string                `protobuf:"bytes,1,opt,name=current_id,json=currentId" json:"current_id,omitempty"`
	BasisPoints   *uint32                `protobuf:"varint,2,opt,name=basis_points,json=basisPoints" json:"basis_points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CXPEvalRolloutInfo) Reset() {
	*x = CXPEvalRolloutInfo{}
	mi := &file_go_ei_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CXPEvalRolloutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CXPEvalRolloutInfo) ProtoMessage() {}

func (x *CXPEvalRolloutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CXPEvalRolloutInfo.ProtoReflect.Descriptor instead.
func (*CXPEvalRolloutInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{139}
}

func (x *CXPEvalRolloutInfo) GetCurrentId() string {
	if x != nil && x.CurrentId != nil {
		return *x.CurrentId
	}
	return ""
}

func (x *CXPEvalRolloutInfo) GetBasisPoints() uint32 {
	if x != nil && x.BasisPoints != nil {
		return *x.BasisPoints
	}
	return 0
}

type Backup_Settings struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	Sfx                          *bool                  `protobuf:"varint,1,opt,name=sfx" json:"sfx,omitempty"`
	Music                        *bool                  `protobuf:"varint,2,opt,name=music" json:"music,omitempty"`
	LowBatteryMode               *bool                  `protobuf:"varint,3,opt,name=low_battery_mode,json=lowBatteryMode" json:"low_battery_mode,omitempty"`
	LowPerformanceMode           *bool                  `protobuf:"varint,4,opt,name=low_performance_mode,json=lowPerformanceMode" json:"low_performance_mode,omitempty"`
	ForceTouchChickenBtn         *bool                  `protobuf:"varint,9,opt,name=force_touch_chicken_btn,json=forceTouchChickenBtn" json:"force_touch_chicken_btn,omitempty"`
	NotificationsQueried         *bool                  `protobuf:"varint,5,opt,name=notifications_queried,json=notificationsQueried" json:"notifications_queried,omitempty"`
	LastNotificationQueryTime    *float64               `protobuf:"fixed64,27,opt,name=last_notification_query_time,json=lastNotificationQueryTime" json:"last_notification_query_time,omitempty"`
	NotificationsOn              *bool                  `protobuf:"varint,6,opt,name=notifications_on,json=notificationsOn" json:"notifications_on,omitempty"`
	NotifyDailyGift              *bool                  `protobuf:"varint,11,opt,name=notify_daily_gift,json=notifyDailyGift" json:"notify_daily_gift,omitempty"`
	LowPerformance               *bool                  `protobuf:"varint,10,opt,name=low_performance,json=lowPerformance" json:"low_performance,omitempty"`
	AutoStopFueling              *bool                  `protobuf:"varint,25,opt,name=auto_stop_fueling,json=autoStopFueling" json:"auto_stop_fueling,omitempty"`
	MaxEnabled                   *bool                  `protobuf:"varint,26,opt,name=max_enabled,json=maxEnabled" json:"max_enabled,omitempty"`
	HideCcStatus                 *bool                  `protobuf:"varint,28,opt,name=hide_cc_status,json=hideCcStatus" json:"hide_cc_status,omitempty"`
	ContractsWidgetEnabled       *bool                  `protobuf:"varint,29,opt,name=contracts_widget_enabled,json=contractsWidgetEnabled" json:"contracts_widget_enabled,omitempty"`
	ArtifactSparkle              *bool                  `protobuf:"varint,30,opt,name=artifact_sparkle,json=artifactSparkle" json:"artifact_sparkle,omitempty"`
	LastBackupTime               *float64               `protobuf:"fixed64,24,opt,name=last_backup_time,json=lastBackupTime" json:"last_backup_time,omitempty"`
	CoppaQueried                 *bool                  `protobuf:"varint,7,opt,name=coppa_queried,json=coppaQueried" json:"coppa_queried,omitempty"`
	CoppaRestricted              *bool                  `protobuf:"varint,8,opt,name=coppa_restricted,json=coppaRestricted" json:"coppa_restricted,omitempty"`
	GdprConsentQueried           *bool                  `protobuf:"varint,12,opt,name=gdpr_consent_queried,json=gdprConsentQueried" json:"gdpr_consent_queried,omitempty"`
	GdprAgeRestricted            *bool                  `protobuf:"varint,16,opt,name=gdpr_age_restricted,json=gdprAgeRestricted" json:"gdpr_age_restricted,omitempty"`
	GdprConsentGiven             *bool                  `protobuf:"varint,13,opt,name=gdpr_consent_given,json=gdprConsentGiven" json:"gdpr_consent_given,omitempty"`
	AgeQueried                   *bool                  `protobuf:"varint,18,opt,name=age_queried,json=ageQueried" json:"age_queried,omitempty"`
	AgeRestricted                *bool                  `protobuf:"varint,19,opt,name=age_restricted,json=ageRestricted,def=0" json:"age_restricted,omitempty"`
	DataCollectionConsentQueried *bool                  `protobuf:"varint,20,opt,name=data_collection_consent_queried,json=dataCollectionConsentQueried" json:"data_collection_consent_queried,omitempty"`
	DataCollectionConsentGiven   *bool                  `protobuf:"varint,21,opt,name=data_collection_consent_given,json=dataCollectionConsentGiven" json:"data_collection_consent_given,omitempty"`
	LastDayAgeQueried            *uint32                `protobuf:"varint,17,opt,name=last_day_age_queried,json=lastDayAgeQueried" json:"last_day_age_queried,omitempty"`
	UserAdsEnabled               *bool                  `protobuf:"varint,14,opt,name=user_ads_enabled,json=userAdsEnabled,def=1" json:"user_ads_enabled,omitempty"`
	UserCloudEnabled             *bool                  `protobuf:"varint,15,opt,name=user_cloud_enabled,json=userCloudEnabled,def=1" json:"user_cloud_enabled,omitempty"`
	UserAnalyticsEnabled         *bool                  `protobuf:"varint,22,opt,name=user_analytics_enabled,json=userAnalyticsEnabled,def=1" json:"user_analytics_enabled,omitempty"`
	UserPersonalizedAdsEnabled   *bool                  `protobuf:"varint,23,opt,name=user_personalized_ads_enabled,json=userPersonalizedAdsEnabled,def=1" json:"user_personalized_ads_enabled,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

// Default values for Backup_Settings fields.
const (
	Default_Backup_Settings_AgeRestricted              = bool(false)
	Default_Backup_Settings_UserAdsEnabled             = bool(true)
	Default_Backup_Settings_UserCloudEnabled           = bool(true)
	Default_Backup_Settings_UserAnalyticsEnabled       = bool(true)
	Default_Backup_Settings_UserPersonalizedAdsEnabled = bool(true)
)

func (x *Backup_Settings) Reset() {
	*x = Backup_Settings{}
	mi := &file_go_ei_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Settings) ProtoMessage() {}

func (x *Backup_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Settings.ProtoReflect.Descriptor instead.
func (*Backup_Settings) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Backup_Settings) GetSfx() bool {
	if x != nil && x.Sfx != nil {
		return *x.Sfx
	}
	return false
}

func (x *Backup_Settings) GetMusic() bool {
	if x != nil && x.Music != nil {
		return *x.Music
	}
	return false
}

func (x *Backup_Settings) GetLowBatteryMode() bool {
	if x != nil && x.LowBatteryMode != nil {
		return *x.LowBatteryMode
	}
	return false
}

func (x *Backup_Settings) GetLowPerformanceMode() bool {
	if x != nil && x.LowPerformanceMode != nil {
		return *x.LowPerformanceMode
	}
	return false
}

func (x *Backup_Settings) GetForceTouchChickenBtn() bool {
	if x != nil && x.ForceTouchChickenBtn != nil {
		return *x.ForceTouchChickenBtn
	}
	return false
}

func (x *Backup_Settings) GetNotificationsQueried() bool {
	if x != nil && x.NotificationsQueried != nil {
		return *x.NotificationsQueried
	}
	return false
}

func (x *Backup_Settings) GetLastNotificationQueryTime() float64 {
	if x != nil && x.LastNotificationQueryTime != nil {
		return *x.LastNotificationQueryTime
	}
	return 0
}

func (x *Backup_Settings) GetNotificationsOn() bool {
	if x != nil && x.NotificationsOn != nil {
		return *x.NotificationsOn
	}
	return false
}

func (x *Backup_Settings) GetNotifyDailyGift() bool {
	if x != nil && x.NotifyDailyGift != nil {
		return *x.NotifyDailyGift
	}
	return false
}

func (x *Backup_Settings) GetLowPerformance() bool {
	if x != nil && x.LowPerformance != nil {
		return *x.LowPerformance
	}
	return false
}

func (x *Backup_Settings) GetAutoStopFueling() bool {
	if x != nil && x.AutoStopFueling != nil {
		return *x.AutoStopFueling
	}
	return false
}

func (x *Backup_Settings) GetMaxEnabled() bool {
	if x != nil && x.MaxEnabled != nil {
		return *x.MaxEnabled
	}
	return false
}

func (x *Backup_Settings) GetHideCcStatus() bool {
	if x != nil && x.HideCcStatus != nil {
		return *x.HideCcStatus
	}
	return false
}

func (x *Backup_Settings) GetContractsWidgetEnabled() bool {
	if x != nil && x.ContractsWidgetEnabled != nil {
		return *x.ContractsWidgetEnabled
	}
	return false
}

func (x *Backup_Settings) GetArtifactSparkle() bool {
	if x != nil && x.ArtifactSparkle != nil {
		return *x.ArtifactSparkle
	}
	return false
}

func (x *Backup_Settings) GetLastBackupTime() float64 {
	if x != nil && x.LastBackupTime != nil {
		return *x.LastBackupTime
	}
	return 0
}

func (x *Backup_Settings) GetCoppaQueried() bool {
	if x != nil && x.CoppaQueried != nil {
		return *x.CoppaQueried
	}
	return false
}

func (x *Backup_Settings) GetCoppaRestricted() bool {
	if x != nil && x.CoppaRestricted != nil {
		return *x.CoppaRestricted
	}
	return false
}

func (x *Backup_Settings) GetGdprConsentQueried() bool {
	if x != nil && x.GdprConsentQueried != nil {
		return *x.GdprConsentQueried
	}
	return false
}

func (x *Backup_Settings) GetGdprAgeRestricted() bool {
	if x != nil && x.GdprAgeRestricted != nil {
		return *x.GdprAgeRestricted
	}
	return false
}

func (x *Backup_Settings) GetGdprConsentGiven() bool {
	if x != nil && x.GdprConsentGiven != nil {
		return *x.GdprConsentGiven
	}
	return false
}

func (x *Backup_Settings) GetAgeQueried() bool {
	if x != nil && x.AgeQueried != nil {
		return *x.AgeQueried
	}
	return false
}

func (x *Backup_Settings) GetAgeRestricted() bool {
	if x != nil && x.AgeRestricted != nil {
		return *x.AgeRestricted
	}
	return Default_Backup_Settings_AgeRestricted
}

func (x *Backup_Settings) GetDataCollectionConsentQueried() bool {
	if x != nil && x.DataCollectionConsentQueried != nil {
		return *x.DataCollectionConsentQueried
	}
	return false
}

func (x *Backup_Settings) GetDataCollectionConsentGiven() bool {
	if x != nil && x.DataCollectionConsentGiven != nil {
		return *x.DataCollectionConsentGiven
	}
	return false
}

func (x *Backup_Settings) GetLastDayAgeQueried() uint32 {
	if x != nil && x.LastDayAgeQueried != nil {
		return *x.LastDayAgeQueried
	}
	return 0
}

func (x *Backup_Settings) GetUserAdsEnabled() bool {
	if x != nil && x.UserAdsEnabled != nil {
		return *x.UserAdsEnabled
	}
	return Default_Backup_Settings_UserAdsEnabled
}

func (x *Backup_Settings) GetUserCloudEnabled() bool {
	if x != nil && x.UserCloudEnabled != nil {
		return *x.UserCloudEnabled
	}
	return Default_Backup_Settings_UserCloudEnabled
}

func (x *Backup_Settings) GetUserAnalyticsEnabled() bool {
	if x != nil && x.UserAnalyticsEnabled != nil {
		return *x.UserAnalyticsEnabled
	}
	return Default_Backup_Settings_UserAnalyticsEnabled
}

func (x *Backup_Settings) GetUserPersonalizedAdsEnabled() bool {
	if x != nil && x.UserPersonalizedAdsEnabled != nil {
		return *x.UserPersonalizedAdsEnabled
	}
	return Default_Backup_Settings_UserPersonalizedAdsEnabled
}

type Backup_Tutorial struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	IntroShown         *bool                  `protobuf:"varint,1,opt,name=intro_shown,json=introShown" json:"intro_shown,omitempty"`
	ClickTutorialShown *bool                  `protobuf:"varint,2,opt,name=click_tutorial_shown,json=clickTutorialShown" json:"click_tutorial_shown,omitempty"`
	BuyHabShown        *bool                  `protobuf:"varint,3,opt,name=buy_hab_shown,json=buyHabShown" json:"buy_hab_shown,omitempty"`
	HireVehicleShown   *bool                  `protobuf:"varint,4,opt,name=hire_vehicle_shown,json=hireVehicleShown" json:"hire_vehicle_shown,omitempty"`
	QNumShown          *bool                  `protobuf:"varint,5,opt,name=q_num_shown,json=qNumShown" json:"q_num_shown,omitempty"`
	SNumShown          *bool                  `protobuf:"varint,6,opt,name=s_num_shown,json=sNumShown" json:"s_num_shown,omitempty"`
	ContractsTabShown  *bool                  `protobuf:"varint,7,opt,name=contracts_tab_shown,json=contractsTabShown" json:"contracts_tab_shown,omitempty"`
	ContractInfoShown  *bool                  `protobuf:"varint,8,opt,name=contract_info_shown,json=contractInfoShown" json:"contract_info_shown,omitempty"`
	JoinCoopShown      *bool                  `protobuf:"varint,9,opt,name=join_coop_shown,json=joinCoopShown" json:"join_coop_shown,omitempty"`
	SwitchFarmShown    *bool                  `protobuf:"varint,10,opt,name=switch_farm_shown,json=switchFarmShown" json:"switch_farm_shown,omitempty"`
	TutorialShown      []bool                 `protobuf:"varint,11,rep,name=tutorial_shown,json=tutorialShown" json:"tutorial_shown,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Backup_Tutorial) Reset() {
	*x = Backup_Tutorial{}
	mi := &file_go_ei_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Tutorial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Tutorial) ProtoMessage() {}

func (x *Backup_Tutorial) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Tutorial.ProtoReflect.Descriptor instead.
func (*Backup_Tutorial) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Backup_Tutorial) GetIntroShown() bool {
	if x != nil && x.IntroShown != nil {
		return *x.IntroShown
	}
	return false
}

func (x *Backup_Tutorial) GetClickTutorialShown() bool {
	if x != nil && x.ClickTutorialShown != nil {
		return *x.ClickTutorialShown
	}
	return false
}

func (x *Backup_Tutorial) GetBuyHabShown() bool {
	if x != nil && x.BuyHabShown != nil {
		return *x.BuyHabShown
	}
	return false
}

func (x *Backup_Tutorial) GetHireVehicleShown() bool {
	if x != nil && x.HireVehicleShown != nil {
		return *x.HireVehicleShown
	}
	return false
}

func (x *Backup_Tutorial) GetQNumShown() bool {
	if x != nil && x.QNumShown != nil {
		return *x.QNumShown
	}
	return false
}

func (x *Backup_Tutorial) GetSNumShown() bool {
	if x != nil && x.SNumShown != nil {
		return *x.SNumShown
	}
	return false
}

func (x *Backup_Tutorial) GetContractsTabShown() bool {
	if x != nil && x.ContractsTabShown != nil {
		return *x.ContractsTabShown
	}
	return false
}

func (x *Backup_Tutorial) GetContractInfoShown() bool {
	if x != nil && x.ContractInfoShown != nil {
		return *x.ContractInfoShown
	}
	return false
}

func (x *Backup_Tutorial) GetJoinCoopShown() bool {
	if x != nil && x.JoinCoopShown != nil {
		return *x.JoinCoopShown
	}
	return false
}

func (x *Backup_Tutorial) GetSwitchFarmShown() bool {
	if x != nil && x.SwitchFarmShown != nil {
		return *x.SwitchFarmShown
	}
	return false
}

func (x *Backup_Tutorial) GetTutorialShown() []bool {
	if x != nil {
		return x.TutorialShown
	}
	return nil
}

type Backup_Stats struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	EggTotals_OLD           []uint64               `protobuf:"varint,1,rep,name=egg_totals_OLD,json=eggTotalsOLD" json:"egg_totals_OLD,omitempty"`
	EggTotals               []float64              `protobuf:"fixed64,8,rep,name=egg_totals,json=eggTotals" json:"egg_totals,omitempty"`
	UnlimitedChickensUses   *uint64                `protobuf:"varint,7,opt,name=unlimited_chickens_uses,json=unlimitedChickensUses" json:"unlimited_chickens_uses,omitempty"`
	RefillUses              *uint64                `protobuf:"varint,2,opt,name=refill_uses,json=refillUses" json:"refill_uses,omitempty"`
	Warp_1Uses              *uint64                `protobuf:"varint,4,opt,name=warp_1_uses,json=warp1Uses" json:"warp_1_uses,omitempty"`
	Warp_8Uses              *uint64                `protobuf:"varint,5,opt,name=warp_8_uses,json=warp8Uses" json:"warp_8_uses,omitempty"`
	BoostsUsed              *uint64                `protobuf:"varint,13,opt,name=boosts_used,json=boostsUsed" json:"boosts_used,omitempty"`
	VideoDoublerUses        *uint64                `protobuf:"varint,3,opt,name=video_doubler_uses,json=videoDoublerUses" json:"video_doubler_uses,omitempty"`
	DroneTakedowns          *uint64                `protobuf:"varint,6,opt,name=drone_takedowns,json=droneTakedowns" json:"drone_takedowns,omitempty"`
	DroneTakedownsElite     *uint64                `protobuf:"varint,10,opt,name=drone_takedowns_elite,json=droneTakedownsElite" json:"drone_takedowns_elite,omitempty"`
	NumPrestiges            *uint64                `protobuf:"varint,9,opt,name=num_prestiges,json=numPrestiges" json:"num_prestiges,omitempty"`
	NumPiggyBreaks          *uint64                `protobuf:"varint,11,opt,name=num_piggy_breaks,json=numPiggyBreaks" json:"num_piggy_breaks,omitempty"`
	IapPacksPurchased       *uint64                `protobuf:"varint,12,opt,name=iap_packs_purchased,json=iapPacksPurchased" json:"iap_packs_purchased,omitempty"`
	PiggyFull               *bool                  `protobuf:"varint,14,opt,name=piggy_full,json=piggyFull" json:"piggy_full,omitempty"`
	PiggyFoundFull          *bool                  `protobuf:"varint,15,opt,name=piggy_found_full,json=piggyFoundFull" json:"piggy_found_full,omitempty"`
	TimePiggyFilledRealtime *float64               `protobuf:"fixed64,16,opt,name=time_piggy_filled_realtime,json=timePiggyFilledRealtime" json:"time_piggy_filled_realtime,omitempty"`
	TimePiggyFullGametime   *float64               `protobuf:"fixed64,17,opt,name=time_piggy_full_gametime,json=timePiggyFullGametime" json:"time_piggy_full_gametime,omitempty"`
	LostPiggyIncrements     *uint64                `protobuf:"varint,18,opt,name=lost_piggy_increments,json=lostPiggyIncrements" json:"lost_piggy_increments,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Backup_Stats) Reset() {
	*x = Backup_Stats{}
	mi := &file_go_ei_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Stats) ProtoMessage() {}

func (x *Backup_Stats) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Stats.ProtoReflect.Descriptor instead.
func (*Backup_Stats) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 2}
}

func (x *Backup_Stats) GetEggTotals_OLD() []uint64 {
	if x != nil {
		return x.EggTotals_OLD
	}
	return nil
}

func (x *Backup_Stats) GetEggTotals() []float64 {
	if x != nil {
		return x.EggTotals
	}
	return nil
}

func (x *Backup_Stats) GetUnlimitedChickensUses() uint64 {
	if x != nil && x.UnlimitedChickensUses != nil {
		return *x.UnlimitedChickensUses
	}
	return 0
}

func (x *Backup_Stats) GetRefillUses() uint64 {
	if x != nil && x.RefillUses != nil {
		return *x.RefillUses
	}
	return 0
}

func (x *Backup_Stats) GetWarp_1Uses() uint64 {
	if x != nil && x.Warp_1Uses != nil {
		return *x.Warp_1Uses
	}
	return 0
}

func (x *Backup_Stats) GetWarp_8Uses() uint64 {
	if x != nil && x.Warp_8Uses != nil {
		return *x.Warp_8Uses
	}
	return 0
}

func (x *Backup_Stats) GetBoostsUsed() uint64 {
	if x != nil && x.BoostsUsed != nil {
		return *x.BoostsUsed
	}
	return 0
}

func (x *Backup_Stats) GetVideoDoublerUses() uint64 {
	if x != nil && x.VideoDoublerUses != nil {
		return *x.VideoDoublerUses
	}
	return 0
}

func (x *Backup_Stats) GetDroneTakedowns() uint64 {
	if x != nil && x.DroneTakedowns != nil {
		return *x.DroneTakedowns
	}
	return 0
}

func (x *Backup_Stats) GetDroneTakedownsElite() uint64 {
	if x != nil && x.DroneTakedownsElite != nil {
		return *x.DroneTakedownsElite
	}
	return 0
}

func (x *Backup_Stats) GetNumPrestiges() uint64 {
	if x != nil && x.NumPrestiges != nil {
		return *x.NumPrestiges
	}
	return 0
}

func (x *Backup_Stats) GetNumPiggyBreaks() uint64 {
	if x != nil && x.NumPiggyBreaks != nil {
		return *x.NumPiggyBreaks
	}
	return 0
}

func (x *Backup_Stats) GetIapPacksPurchased() uint64 {
	if x != nil && x.IapPacksPurchased != nil {
		return *x.IapPacksPurchased
	}
	return 0
}

func (x *Backup_Stats) GetPiggyFull() bool {
	if x != nil && x.PiggyFull != nil {
		return *x.PiggyFull
	}
	return false
}

func (x *Backup_Stats) GetPiggyFoundFull() bool {
	if x != nil && x.PiggyFoundFull != nil {
		return *x.PiggyFoundFull
	}
	return false
}

func (x *Backup_Stats) GetTimePiggyFilledRealtime() float64 {
	if x != nil && x.TimePiggyFilledRealtime != nil {
		return *x.TimePiggyFilledRealtime
	}
	return 0
}

func (x *Backup_Stats) GetTimePiggyFullGametime() float64 {
	if x != nil && x.TimePiggyFullGametime != nil {
		return *x.TimePiggyFullGametime
	}
	return 0
}

func (x *Backup_Stats) GetLostPiggyIncrements() uint64 {
	if x != nil && x.LostPiggyIncrements != nil {
		return *x.LostPiggyIncrements
	}
	return 0
}

type Backup_Game struct {
	state                         protoimpl.MessageState    `protogen:"open.v1"`
	CurrentFarm                   *uint32                   `protobuf:"varint,22,opt,name=current_farm,json=currentFarm,def=0" json:"current_farm,omitempty"`
	MaxEggReached                 *Egg                      `protobuf:"varint,1,opt,name=max_egg_reached,json=maxEggReached,enum=ei.Egg" json:"max_egg_reached,omitempty"`
	GoldenEggsEarned              *uint64                   `protobuf:"varint,2,opt,name=golden_eggs_earned,json=goldenEggsEarned" json:"golden_eggs_earned,omitempty"`
	GoldenEggsSpent               *uint64                   `protobuf:"varint,3,opt,name=golden_eggs_spent,json=goldenEggsSpent" json:"golden_eggs_spent,omitempty"`
	UncliamedGoldenEggs           *uint64                   `protobuf:"varint,16,opt,name=uncliamed_golden_eggs,json=uncliamedGoldenEggs" json:"uncliamed_golden_eggs,omitempty"`
	SoulEggs                      *uint64                   `protobuf:"varint,4,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	UnclaimedSoulEggs             *uint64                   `protobuf:"varint,17,opt,name=unclaimed_soul_eggs,json=unclaimedSoulEggs" json:"unclaimed_soul_eggs,omitempty"`
	SoulEggsD                     *float64                  `protobuf:"fixed64,34,opt,name=soul_eggs_d,json=soulEggsD" json:"soul_eggs_d,omitempty"`
	UnclaimedSoulEggsD            *float64                  `protobuf:"fixed64,35,opt,name=unclaimed_soul_eggs_d,json=unclaimedSoulEggsD" json:"unclaimed_soul_eggs_d,omitempty"`
	EggsOfProphecy                *uint64                   `protobuf:"varint,23,opt,name=eggs_of_prophecy,json=eggsOfProphecy" json:"eggs_of_prophecy,omitempty"`
	UnclaimedEggsOfProphecy       *uint64                   `protobuf:"varint,24,opt,name=unclaimed_eggs_of_prophecy,json=unclaimedEggsOfProphecy" json:"unclaimed_eggs_of_prophecy,omitempty"`
	ShellScriptsEarned            *uint64                   `protobuf:"varint,38,opt,name=shell_scripts_earned,json=shellScriptsEarned" json:"shell_scripts_earned,omitempty"`
	ShellScriptsSpent             *uint64                   `protobuf:"varint,39,opt,name=shell_scripts_spent,json=shellScriptsSpent" json:"shell_scripts_spent,omitempty"`
	UnclaimedShellScripts         *uint64                   `protobuf:"varint,40,opt,name=unclaimed_shell_scripts,json=unclaimedShellScripts" json:"unclaimed_shell_scripts,omitempty"`
	PrestigeCashEarned            *float64                  `protobuf:"fixed64,5,opt,name=prestige_cash_earned,json=prestigeCashEarned" json:"prestige_cash_earned,omitempty"`
	PrestigeSoulBoostCash         *float64                  `protobuf:"fixed64,33,opt,name=prestige_soul_boost_cash,json=prestigeSoulBoostCash" json:"prestige_soul_boost_cash,omitempty"`
	LifetimeCashEarned            *float64                  `protobuf:"fixed64,6,opt,name=lifetime_cash_earned,json=lifetimeCashEarned" json:"lifetime_cash_earned,omitempty"`
	PiggyBank                     *uint64                   `protobuf:"varint,7,opt,name=piggy_bank,json=piggyBank" json:"piggy_bank,omitempty"`
	PiggyFullAlertShown           *bool                     `protobuf:"varint,31,opt,name=piggy_full_alert_shown,json=piggyFullAlertShown" json:"piggy_full_alert_shown,omitempty"`
	PermitLevel                   *uint32                   `protobuf:"varint,8,opt,name=permit_level,json=permitLevel" json:"permit_level,omitempty"`
	EpicResearch                  []*Backup_ResearchItem    `protobuf:"bytes,9,rep,name=epic_research,json=epicResearch" json:"epic_research,omitempty"`
	HyperloopStation              *bool                     `protobuf:"varint,29,opt,name=hyperloop_station,json=hyperloopStation" json:"hyperloop_station,omitempty"`
	NextDailyGiftTime             *float64                  `protobuf:"fixed64,10,opt,name=next_daily_gift_time,json=nextDailyGiftTime" json:"next_daily_gift_time,omitempty"`
	LastDailyGiftCollectedDay     *uint32                   `protobuf:"varint,20,opt,name=last_daily_gift_collected_day,json=lastDailyGiftCollectedDay" json:"last_daily_gift_collected_day,omitempty"`
	NumDailyGiftsCollected        *uint32                   `protobuf:"varint,28,opt,name=num_daily_gifts_collected,json=numDailyGiftsCollected" json:"num_daily_gifts_collected,omitempty"`
	News                          []*Backup_NewsHeadline    `protobuf:"bytes,11,rep,name=news" json:"news,omitempty"`
	LastNewsTime                  *float64                  `protobuf:"fixed64,12,opt,name=last_news_time,json=lastNewsTime" json:"last_news_time,omitempty"`
	CurrentMultiplier             *float64                  `protobuf:"fixed64,13,opt,name=current_multiplier,json=currentMultiplier" json:"current_multiplier,omitempty"`
	CurrentMultiplierExpiration   *float64                  `protobuf:"fixed64,14,opt,name=current_multiplier_expiration,json=currentMultiplierExpiration" json:"current_multiplier_expiration,omitempty"`
	Achievements                  []*Backup_AchievementInfo `protobuf:"bytes,15,rep,name=achievements" json:"achievements,omitempty"`
	MaxFarmSizeReached            []uint64                  `protobuf:"varint,18,rep,name=max_farm_size_reached,json=maxFarmSizeReached" json:"max_farm_size_reached,omitempty"`
	EggMedalLevel                 []uint32                  `protobuf:"varint,19,rep,name=egg_medal_level,json=eggMedalLevel" json:"egg_medal_level,omitempty"`
	LongIdleNotificationSet       *bool                     `protobuf:"varint,25,opt,name=long_idle_notification_set,json=longIdleNotificationSet" json:"long_idle_notification_set,omitempty"`
	LongIdleNotificationThreshold *float64                  `protobuf:"fixed64,26,opt,name=long_idle_notification_threshold,json=longIdleNotificationThreshold" json:"long_idle_notification_threshold,omitempty"`
	LongIdleReward                *float64                  `protobuf:"fixed64,27,opt,name=long_idle_reward,json=longIdleReward" json:"long_idle_reward,omitempty"`
	Boosts                        []*Backup_OwnedBoost      `protobuf:"bytes,30,rep,name=boosts" json:"boosts,omitempty"`
	TotalTimeCheatsDetected       *uint32                   `protobuf:"varint,32,opt,name=total_time_cheats_detected,json=totalTimeCheatsDetected" json:"total_time_cheats_detected,omitempty"`
	ForceEliteContracts           *bool                     `protobuf:"varint,36,opt,name=force_elite_contracts,json=forceEliteContracts" json:"force_elite_contracts,omitempty"`
	NewPlayerEventEndTime         *float64                  `protobuf:"fixed64,37,opt,name=new_player_event_end_time,json=newPlayerEventEndTime" json:"new_player_event_end_time,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

// Default values for Backup_Game fields.
const (
	Default_Backup_Game_CurrentFarm = uint32(0)
)

func (x *Backup_Game) Reset() {
	*x = Backup_Game{}
	mi := &file_go_ei_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Game) ProtoMessage() {}

func (x *Backup_Game) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Game.ProtoReflect.Descriptor instead.
func (*Backup_Game) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 3}
}

func (x *Backup_Game) GetCurrentFarm() uint32 {
	if x != nil && x.CurrentFarm != nil {
		return *x.CurrentFarm
	}
	return Default_Backup_Game_CurrentFarm
}

func (x *Backup_Game) GetMaxEggReached() Egg {
	if x != nil && x.MaxEggReached != nil {
		return *x.MaxEggReached
	}
	return Egg_EDIBLE
}

func (x *Backup_Game) GetGoldenEggsEarned() uint64 {
	if x != nil && x.GoldenEggsEarned != nil {
		return *x.GoldenEggsEarned
	}
	return 0
}

func (x *Backup_Game) GetGoldenEggsSpent() uint64 {
	if x != nil && x.GoldenEggsSpent != nil {
		return *x.GoldenEggsSpent
	}
	return 0
}

func (x *Backup_Game) GetUncliamedGoldenEggs() uint64 {
	if x != nil && x.UncliamedGoldenEggs != nil {
		return *x.UncliamedGoldenEggs
	}
	return 0
}

func (x *Backup_Game) GetSoulEggs() uint64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

func (x *Backup_Game) GetUnclaimedSoulEggs() uint64 {
	if x != nil && x.UnclaimedSoulEggs != nil {
		return *x.UnclaimedSoulEggs
	}
	return 0
}

func (x *Backup_Game) GetSoulEggsD() float64 {
	if x != nil && x.SoulEggsD != nil {
		return *x.SoulEggsD
	}
	return 0
}

func (x *Backup_Game) GetUnclaimedSoulEggsD() float64 {
	if x != nil && x.UnclaimedSoulEggsD != nil {
		return *x.UnclaimedSoulEggsD
	}
	return 0
}

func (x *Backup_Game) GetEggsOfProphecy() uint64 {
	if x != nil && x.EggsOfProphecy != nil {
		return *x.EggsOfProphecy
	}
	return 0
}

func (x *Backup_Game) GetUnclaimedEggsOfProphecy() uint64 {
	if x != nil && x.UnclaimedEggsOfProphecy != nil {
		return *x.UnclaimedEggsOfProphecy
	}
	return 0
}

func (x *Backup_Game) GetShellScriptsEarned() uint64 {
	if x != nil && x.ShellScriptsEarned != nil {
		return *x.ShellScriptsEarned
	}
	return 0
}

func (x *Backup_Game) GetShellScriptsSpent() uint64 {
	if x != nil && x.ShellScriptsSpent != nil {
		return *x.ShellScriptsSpent
	}
	return 0
}

func (x *Backup_Game) GetUnclaimedShellScripts() uint64 {
	if x != nil && x.UnclaimedShellScripts != nil {
		return *x.UnclaimedShellScripts
	}
	return 0
}

func (x *Backup_Game) GetPrestigeCashEarned() float64 {
	if x != nil && x.PrestigeCashEarned != nil {
		return *x.PrestigeCashEarned
	}
	return 0
}

func (x *Backup_Game) GetPrestigeSoulBoostCash() float64 {
	if x != nil && x.PrestigeSoulBoostCash != nil {
		return *x.PrestigeSoulBoostCash
	}
	return 0
}

func (x *Backup_Game) GetLifetimeCashEarned() float64 {
	if x != nil && x.LifetimeCashEarned != nil {
		return *x.LifetimeCashEarned
	}
	return 0
}

func (x *Backup_Game) GetPiggyBank() uint64 {
	if x != nil && x.PiggyBank != nil {
		return *x.PiggyBank
	}
	return 0
}

func (x *Backup_Game) GetPiggyFullAlertShown() bool {
	if x != nil && x.PiggyFullAlertShown != nil {
		return *x.PiggyFullAlertShown
	}
	return false
}

func (x *Backup_Game) GetPermitLevel() uint32 {
	if x != nil && x.PermitLevel != nil {
		return *x.PermitLevel
	}
	return 0
}

func (x *Backup_Game) GetEpicResearch() []*Backup_ResearchItem {
	if x != nil {
		return x.EpicResearch
	}
	return nil
}

func (x *Backup_Game) GetHyperloopStation() bool {
	if x != nil && x.HyperloopStation != nil {
		return *x.HyperloopStation
	}
	return false
}

func (x *Backup_Game) GetNextDailyGiftTime() float64 {
	if x != nil && x.NextDailyGiftTime != nil {
		return *x.NextDailyGiftTime
	}
	return 0
}

func (x *Backup_Game) GetLastDailyGiftCollectedDay() uint32 {
	if x != nil && x.LastDailyGiftCollectedDay != nil {
		return *x.LastDailyGiftCollectedDay
	}
	return 0
}

func (x *Backup_Game) GetNumDailyGiftsCollected() uint32 {
	if x != nil && x.NumDailyGiftsCollected != nil {
		return *x.NumDailyGiftsCollected
	}
	return 0
}

func (x *Backup_Game) GetNews() []*Backup_NewsHeadline {
	if x != nil {
		return x.News
	}
	return nil
}

func (x *Backup_Game) GetLastNewsTime() float64 {
	if x != nil && x.LastNewsTime != nil {
		return *x.LastNewsTime
	}
	return 0
}

func (x *Backup_Game) GetCurrentMultiplier() float64 {
	if x != nil && x.CurrentMultiplier != nil {
		return *x.CurrentMultiplier
	}
	return 0
}

func (x *Backup_Game) GetCurrentMultiplierExpiration() float64 {
	if x != nil && x.CurrentMultiplierExpiration != nil {
		return *x.CurrentMultiplierExpiration
	}
	return 0
}

func (x *Backup_Game) GetAchievements() []*Backup_AchievementInfo {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *Backup_Game) GetMaxFarmSizeReached() []uint64 {
	if x != nil {
		return x.MaxFarmSizeReached
	}
	return nil
}

func (x *Backup_Game) GetEggMedalLevel() []uint32 {
	if x != nil {
		return x.EggMedalLevel
	}
	return nil
}

func (x *Backup_Game) GetLongIdleNotificationSet() bool {
	if x != nil && x.LongIdleNotificationSet != nil {
		return *x.LongIdleNotificationSet
	}
	return false
}

func (x *Backup_Game) GetLongIdleNotificationThreshold() float64 {
	if x != nil && x.LongIdleNotificationThreshold != nil {
		return *x.LongIdleNotificationThreshold
	}
	return 0
}

func (x *Backup_Game) GetLongIdleReward() float64 {
	if x != nil && x.LongIdleReward != nil {
		return *x.LongIdleReward
	}
	return 0
}

func (x *Backup_Game) GetBoosts() []*Backup_OwnedBoost {
	if x != nil {
		return x.Boosts
	}
	return nil
}

func (x *Backup_Game) GetTotalTimeCheatsDetected() uint32 {
	if x != nil && x.TotalTimeCheatsDetected != nil {
		return *x.TotalTimeCheatsDetected
	}
	return 0
}

func (x *Backup_Game) GetForceEliteContracts() bool {
	if x != nil && x.ForceEliteContracts != nil {
		return *x.ForceEliteContracts
	}
	return false
}

func (x *Backup_Game) GetNewPlayerEventEndTime() float64 {
	if x != nil && x.NewPlayerEventEndTime != nil {
		return *x.NewPlayerEventEndTime
	}
	return 0
}

type Backup_Artifacts struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Infusing                   *bool                  `protobuf:"varint,1,opt,name=infusing" json:"infusing,omitempty"`
	ItemBeingInfused           *ArtifactInventoryItem `protobuf:"bytes,2,opt,name=item_being_infused,json=itemBeingInfused" json:"item_being_infused,omitempty"`
	SpecBeingInfused           *ArtifactSpec          `protobuf:"bytes,13,opt,name=spec_being_infused,json=specBeingInfused" json:"spec_being_infused,omitempty"`
	EggTypeInfusing            *Egg                   `protobuf:"varint,3,opt,name=egg_type_infusing,json=eggTypeInfusing,enum=ei.Egg" json:"egg_type_infusing,omitempty"`
	InfusingEggsRequired       *float64               `protobuf:"fixed64,4,opt,name=infusing_eggs_required,json=infusingEggsRequired" json:"infusing_eggs_required,omitempty"`
	EggsInfused                *float64               `protobuf:"fixed64,5,opt,name=eggs_infused,json=eggsInfused" json:"eggs_infused,omitempty"`
	FlowPercentageArtifacts    *float64               `protobuf:"fixed64,6,opt,name=flow_percentage_artifacts,json=flowPercentageArtifacts,def=0.5" json:"flow_percentage_artifacts,omitempty"`
	FuelingEnabled             *bool                  `protobuf:"varint,7,opt,name=fueling_enabled,json=fuelingEnabled,def=1" json:"fueling_enabled,omitempty"`
	TankFillingEnabled         *bool                  `protobuf:"varint,14,opt,name=tank_filling_enabled,json=tankFillingEnabled" json:"tank_filling_enabled,omitempty"`
	TankLevel                  *uint32                `protobuf:"varint,15,opt,name=tank_level,json=tankLevel" json:"tank_level,omitempty"`
	TankFuels                  []float64              `protobuf:"fixed64,16,rep,name=tank_fuels,json=tankFuels" json:"tank_fuels,omitempty"`
	TankLimits                 []float64              `protobuf:"fixed64,18,rep,name=tank_limits,json=tankLimits" json:"tank_limits,omitempty"`
	LastFueledShip             *MissionInfo_Spaceship `protobuf:"varint,9,opt,name=last_fueled_ship,json=lastFueledShip,enum=ei.MissionInfo_Spaceship" json:"last_fueled_ship,omitempty"`
	InventoryScore             *float64               `protobuf:"fixed64,10,opt,name=inventory_score,json=inventoryScore" json:"inventory_score,omitempty"`
	CraftingXp                 *float64               `protobuf:"fixed64,17,opt,name=crafting_xp,json=craftingXp" json:"crafting_xp,omitempty"`
	Enabled                    *bool                  `protobuf:"varint,11,opt,name=enabled" json:"enabled,omitempty"`
	IntroShown                 *bool                  `protobuf:"varint,12,opt,name=intro_shown,json=introShown" json:"intro_shown,omitempty"`
	InfusingEnabled_DEPRECATED *bool                  `protobuf:"varint,8,opt,name=infusing_enabled_DEPRECATED,json=infusingEnabledDEPRECATED,def=1" json:"infusing_enabled_DEPRECATED,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

// Default values for Backup_Artifacts fields.
const (
	Default_Backup_Artifacts_FlowPercentageArtifacts    = float64(0.5)
	Default_Backup_Artifacts_FuelingEnabled             = bool(true)
	Default_Backup_Artifacts_InfusingEnabled_DEPRECATED = bool(true)
)

func (x *Backup_Artifacts) Reset() {
	*x = Backup_Artifacts{}
	mi := &file_go_ei_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Artifacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Artifacts) ProtoMessage() {}

func (x *Backup_Artifacts) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Artifacts.ProtoReflect.Descriptor instead.
func (*Backup_Artifacts) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 4}
}

func (x *Backup_Artifacts) GetInfusing() bool {
	if x != nil && x.Infusing != nil {
		return *x.Infusing
	}
	return false
}

func (x *Backup_Artifacts) GetItemBeingInfused() *ArtifactInventoryItem {
	if x != nil {
		return x.ItemBeingInfused
	}
	return nil
}

func (x *Backup_Artifacts) GetSpecBeingInfused() *ArtifactSpec {
	if x != nil {
		return x.SpecBeingInfused
	}
	return nil
}

func (x *Backup_Artifacts) GetEggTypeInfusing() Egg {
	if x != nil && x.EggTypeInfusing != nil {
		return *x.EggTypeInfusing
	}
	return Egg_EDIBLE
}

func (x *Backup_Artifacts) GetInfusingEggsRequired() float64 {
	if x != nil && x.InfusingEggsRequired != nil {
		return *x.InfusingEggsRequired
	}
	return 0
}

func (x *Backup_Artifacts) GetEggsInfused() float64 {
	if x != nil && x.EggsInfused != nil {
		return *x.EggsInfused
	}
	return 0
}

func (x *Backup_Artifacts) GetFlowPercentageArtifacts() float64 {
	if x != nil && x.FlowPercentageArtifacts != nil {
		return *x.FlowPercentageArtifacts
	}
	return Default_Backup_Artifacts_FlowPercentageArtifacts
}

func (x *Backup_Artifacts) GetFuelingEnabled() bool {
	if x != nil && x.FuelingEnabled != nil {
		return *x.FuelingEnabled
	}
	return Default_Backup_Artifacts_FuelingEnabled
}

func (x *Backup_Artifacts) GetTankFillingEnabled() bool {
	if x != nil && x.TankFillingEnabled != nil {
		return *x.TankFillingEnabled
	}
	return false
}

func (x *Backup_Artifacts) GetTankLevel() uint32 {
	if x != nil && x.TankLevel != nil {
		return *x.TankLevel
	}
	return 0
}

func (x *Backup_Artifacts) GetTankFuels() []float64 {
	if x != nil {
		return x.TankFuels
	}
	return nil
}

func (x *Backup_Artifacts) GetTankLimits() []float64 {
	if x != nil {
		return x.TankLimits
	}
	return nil
}

func (x *Backup_Artifacts) GetLastFueledShip() MissionInfo_Spaceship {
	if x != nil && x.LastFueledShip != nil {
		return *x.LastFueledShip
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *Backup_Artifacts) GetInventoryScore() float64 {
	if x != nil && x.InventoryScore != nil {
		return *x.InventoryScore
	}
	return 0
}

func (x *Backup_Artifacts) GetCraftingXp() float64 {
	if x != nil && x.CraftingXp != nil {
		return *x.CraftingXp
	}
	return 0
}

func (x *Backup_Artifacts) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *Backup_Artifacts) GetIntroShown() bool {
	if x != nil && x.IntroShown != nil {
		return *x.IntroShown
	}
	return false
}

func (x *Backup_Artifacts) GetInfusingEnabled_DEPRECATED() bool {
	if x != nil && x.InfusingEnabled_DEPRECATED != nil {
		return *x.InfusingEnabled_DEPRECATED
	}
	return Default_Backup_Artifacts_InfusingEnabled_DEPRECATED
}

type Backup_Shells struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IntroAlert          *bool                  `protobuf:"varint,1,opt,name=intro_alert,json=introAlert" json:"intro_alert,omitempty"`
	ContractsIntroAlert *bool                  `protobuf:"varint,2,opt,name=contracts_intro_alert,json=contractsIntroAlert" json:"contracts_intro_alert,omitempty"`
	NumNew              []int32                `protobuf:"varint,3,rep,name=num_new,json=numNew" json:"num_new,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Backup_Shells) Reset() {
	*x = Backup_Shells{}
	mi := &file_go_ei_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Shells) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Shells) ProtoMessage() {}

func (x *Backup_Shells) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Shells.ProtoReflect.Descriptor instead.
func (*Backup_Shells) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 5}
}

func (x *Backup_Shells) GetIntroAlert() bool {
	if x != nil && x.IntroAlert != nil {
		return *x.IntroAlert
	}
	return false
}

func (x *Backup_Shells) GetContractsIntroAlert() bool {
	if x != nil && x.ContractsIntroAlert != nil {
		return *x.ContractsIntroAlert
	}
	return false
}

func (x *Backup_Shells) GetNumNew() []int32 {
	if x != nil {
		return x.NumNew
	}
	return nil
}

type Backup_Simulation struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	EggType                     *Egg                   `protobuf:"varint,1,opt,name=egg_type,json=eggType,enum=ei.Egg" json:"egg_type,omitempty"`
	FarmType                    *FarmType              `protobuf:"varint,19,opt,name=farm_type,json=farmType,enum=ei.FarmType" json:"farm_type,omitempty"`
	ContractId                  *string                `protobuf:"bytes,20,opt,name=contract_id,json=contractId" json:"contract_id,omitempty"`
	CashEarned                  *float64               `protobuf:"fixed64,2,opt,name=cash_earned,json=cashEarned" json:"cash_earned,omitempty"`
	CashSpent                   *float64               `protobuf:"fixed64,3,opt,name=cash_spent,json=cashSpent" json:"cash_spent,omitempty"`
	UnclaimedCash               *float64               `protobuf:"fixed64,4,opt,name=unclaimed_cash,json=unclaimedCash" json:"unclaimed_cash,omitempty"`
	LastStepTime                *float64               `protobuf:"fixed64,5,opt,name=last_step_time,json=lastStepTime" json:"last_step_time,omitempty"`
	NumChickens                 *uint64                `protobuf:"varint,6,opt,name=num_chickens,json=numChickens" json:"num_chickens,omitempty"`
	NumChickensUnsettled        *uint64                `protobuf:"varint,7,opt,name=num_chickens_unsettled,json=numChickensUnsettled" json:"num_chickens_unsettled,omitempty"`
	NumChickensRunning          *uint64                `protobuf:"varint,8,opt,name=num_chickens_running,json=numChickensRunning" json:"num_chickens_running,omitempty"`
	EggsLaid                    *float64               `protobuf:"fixed64,9,opt,name=eggs_laid,json=eggsLaid" json:"eggs_laid,omitempty"`
	EggsShipped                 *float64               `protobuf:"fixed64,30,opt,name=eggs_shipped,json=eggsShipped" json:"eggs_shipped,omitempty"`
	EggsPaidFor                 *float64               `protobuf:"fixed64,10,opt,name=eggs_paid_for,json=eggsPaidFor" json:"eggs_paid_for,omitempty"`
	SilosOwned                  *uint32                `protobuf:"varint,11,opt,name=silos_owned,json=silosOwned" json:"silos_owned,omitempty"`
	Habs                        []uint32               `protobuf:"varint,12,rep,name=habs" json:"habs,omitempty"`
	HabPopulation               []uint64               `protobuf:"varint,13,rep,name=hab_population,json=habPopulation" json:"hab_population,omitempty"`
	HabPopulationIndound        []uint64               `protobuf:"varint,14,rep,name=hab_population_indound,json=habPopulationIndound" json:"hab_population_indound,omitempty"`
	HabIncubatorPopuplation     []float64              `protobuf:"fixed64,15,rep,name=hab_incubator_popuplation,json=habIncubatorPopuplation" json:"hab_incubator_popuplation,omitempty"`
	HatcheryPopulation          *float64               `protobuf:"fixed64,16,opt,name=hatchery_population,json=hatcheryPopulation" json:"hatchery_population,omitempty"`
	Vehicles                    []uint32               `protobuf:"varint,17,rep,name=vehicles" json:"vehicles,omitempty"`
	TrainLength                 []uint32               `protobuf:"varint,21,rep,name=train_length,json=trainLength" json:"train_length,omitempty"`
	CommonResearch              []*Backup_ResearchItem `protobuf:"bytes,18,rep,name=common_research,json=commonResearch" json:"common_research,omitempty"`
	ActiveBoosts                []*Backup_ActiveBoost  `protobuf:"bytes,22,rep,name=active_boosts,json=activeBoosts" json:"active_boosts,omitempty"`
	LastCashBoostTime           *float64               `protobuf:"fixed64,31,opt,name=last_cash_boost_time,json=lastCashBoostTime" json:"last_cash_boost_time,omitempty"`
	TimeCheatsDetected          *uint32                `protobuf:"varint,23,opt,name=time_cheats_detected,json=timeCheatsDetected" json:"time_cheats_detected,omitempty"`
	TimeCheatDebt               *float64               `protobuf:"fixed64,24,opt,name=time_cheat_debt,json=timeCheatDebt" json:"time_cheat_debt,omitempty"`
	BoostTokensReceived         *uint32                `protobuf:"varint,25,opt,name=boost_tokens_received,json=boostTokensReceived" json:"boost_tokens_received,omitempty"`
	BoostTokensSpent            *uint32                `protobuf:"varint,26,opt,name=boost_tokens_spent,json=boostTokensSpent" json:"boost_tokens_spent,omitempty"`
	BoostTokensGiven            *uint32                `protobuf:"varint,28,opt,name=boost_tokens_given,json=boostTokensGiven" json:"boost_tokens_given,omitempty"`
	UnclaimedBoostTokens        *uint32                `protobuf:"varint,27,opt,name=unclaimed_boost_tokens,json=unclaimedBoostTokens" json:"unclaimed_boost_tokens,omitempty"`
	GametimeUntilNextBoostToken *float64               `protobuf:"fixed64,29,opt,name=gametime_until_next_boost_token,json=gametimeUntilNextBoostToken" json:"gametime_until_next_boost_token,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *Backup_Simulation) Reset() {
	*x = Backup_Simulation{}
	mi := &file_go_ei_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Simulation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Simulation) ProtoMessage() {}

func (x *Backup_Simulation) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Simulation.ProtoReflect.Descriptor instead.
func (*Backup_Simulation) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 6}
}

func (x *Backup_Simulation) GetEggType() Egg {
	if x != nil && x.EggType != nil {
		return *x.EggType
	}
	return Egg_EDIBLE
}

func (x *Backup_Simulation) GetFarmType() FarmType {
	if x != nil && x.FarmType != nil {
		return *x.FarmType
	}
	return FarmType_EMPTY
}

func (x *Backup_Simulation) GetContractId() string {
	if x != nil && x.ContractId != nil {
		return *x.ContractId
	}
	return ""
}

func (x *Backup_Simulation) GetCashEarned() float64 {
	if x != nil && x.CashEarned != nil {
		return *x.CashEarned
	}
	return 0
}

func (x *Backup_Simulation) GetCashSpent() float64 {
	if x != nil && x.CashSpent != nil {
		return *x.CashSpent
	}
	return 0
}

func (x *Backup_Simulation) GetUnclaimedCash() float64 {
	if x != nil && x.UnclaimedCash != nil {
		return *x.UnclaimedCash
	}
	return 0
}

func (x *Backup_Simulation) GetLastStepTime() float64 {
	if x != nil && x.LastStepTime != nil {
		return *x.LastStepTime
	}
	return 0
}

func (x *Backup_Simulation) GetNumChickens() uint64 {
	if x != nil && x.NumChickens != nil {
		return *x.NumChickens
	}
	return 0
}

func (x *Backup_Simulation) GetNumChickensUnsettled() uint64 {
	if x != nil && x.NumChickensUnsettled != nil {
		return *x.NumChickensUnsettled
	}
	return 0
}

func (x *Backup_Simulation) GetNumChickensRunning() uint64 {
	if x != nil && x.NumChickensRunning != nil {
		return *x.NumChickensRunning
	}
	return 0
}

func (x *Backup_Simulation) GetEggsLaid() float64 {
	if x != nil && x.EggsLaid != nil {
		return *x.EggsLaid
	}
	return 0
}

func (x *Backup_Simulation) GetEggsShipped() float64 {
	if x != nil && x.EggsShipped != nil {
		return *x.EggsShipped
	}
	return 0
}

func (x *Backup_Simulation) GetEggsPaidFor() float64 {
	if x != nil && x.EggsPaidFor != nil {
		return *x.EggsPaidFor
	}
	return 0
}

func (x *Backup_Simulation) GetSilosOwned() uint32 {
	if x != nil && x.SilosOwned != nil {
		return *x.SilosOwned
	}
	return 0
}

func (x *Backup_Simulation) GetHabs() []uint32 {
	if x != nil {
		return x.Habs
	}
	return nil
}

func (x *Backup_Simulation) GetHabPopulation() []uint64 {
	if x != nil {
		return x.HabPopulation
	}
	return nil
}

func (x *Backup_Simulation) GetHabPopulationIndound() []uint64 {
	if x != nil {
		return x.HabPopulationIndound
	}
	return nil
}

func (x *Backup_Simulation) GetHabIncubatorPopuplation() []float64 {
	if x != nil {
		return x.HabIncubatorPopuplation
	}
	return nil
}

func (x *Backup_Simulation) GetHatcheryPopulation() float64 {
	if x != nil && x.HatcheryPopulation != nil {
		return *x.HatcheryPopulation
	}
	return 0
}

func (x *Backup_Simulation) GetVehicles() []uint32 {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

func (x *Backup_Simulation) GetTrainLength() []uint32 {
	if x != nil {
		return x.TrainLength
	}
	return nil
}

func (x *Backup_Simulation) GetCommonResearch() []*Backup_ResearchItem {
	if x != nil {
		return x.CommonResearch
	}
	return nil
}

func (x *Backup_Simulation) GetActiveBoosts() []*Backup_ActiveBoost {
	if x != nil {
		return x.ActiveBoosts
	}
	return nil
}

func (x *Backup_Simulation) GetLastCashBoostTime() float64 {
	if x != nil && x.LastCashBoostTime != nil {
		return *x.LastCashBoostTime
	}
	return 0
}

func (x *Backup_Simulation) GetTimeCheatsDetected() uint32 {
	if x != nil && x.TimeCheatsDetected != nil {
		return *x.TimeCheatsDetected
	}
	return 0
}

func (x *Backup_Simulation) GetTimeCheatDebt() float64 {
	if x != nil && x.TimeCheatDebt != nil {
		return *x.TimeCheatDebt
	}
	return 0
}

func (x *Backup_Simulation) GetBoostTokensReceived() uint32 {
	if x != nil && x.BoostTokensReceived != nil {
		return *x.BoostTokensReceived
	}
	return 0
}

func (x *Backup_Simulation) GetBoostTokensSpent() uint32 {
	if x != nil && x.BoostTokensSpent != nil {
		return *x.BoostTokensSpent
	}
	return 0
}

func (x *Backup_Simulation) GetBoostTokensGiven() uint32 {
	if x != nil && x.BoostTokensGiven != nil {
		return *x.BoostTokensGiven
	}
	return 0
}

func (x *Backup_Simulation) GetUnclaimedBoostTokens() uint32 {
	if x != nil && x.UnclaimedBoostTokens != nil {
		return *x.UnclaimedBoostTokens
	}
	return 0
}

func (x *Backup_Simulation) GetGametimeUntilNextBoostToken() float64 {
	if x != nil && x.GametimeUntilNextBoostToken != nil {
		return *x.GametimeUntilNextBoostToken
	}
	return 0
}

type Backup_Mission struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CurrentMission  *string                `protobuf:"bytes,1,opt,name=current_mission,json=currentMission" json:"current_mission,omitempty"`
	ReferenceValue  *float64               `protobuf:"fixed64,2,opt,name=reference_value,json=referenceValue" json:"reference_value,omitempty"`
	CurrentMissions []string               `protobuf:"bytes,4,rep,name=current_missions,json=currentMissions" json:"current_missions,omitempty"`
	Missions        []*Backup_MissionInfo  `protobuf:"bytes,3,rep,name=missions" json:"missions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Backup_Mission) Reset() {
	*x = Backup_Mission{}
	mi := &file_go_ei_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Mission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Mission) ProtoMessage() {}

func (x *Backup_Mission) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Mission.ProtoReflect.Descriptor instead.
func (*Backup_Mission) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 7}
}

func (x *Backup_Mission) GetCurrentMission() string {
	if x != nil && x.CurrentMission != nil {
		return *x.CurrentMission
	}
	return ""
}

func (x *Backup_Mission) GetReferenceValue() float64 {
	if x != nil && x.ReferenceValue != nil {
		return *x.ReferenceValue
	}
	return 0
}

func (x *Backup_Mission) GetCurrentMissions() []string {
	if x != nil {
		return x.CurrentMissions
	}
	return nil
}

func (x *Backup_Mission) GetMissions() []*Backup_MissionInfo {
	if x != nil {
		return x.Missions
	}
	return nil
}

type Backup_Misc struct {
	state                                protoimpl.MessageState `protogen:"open.v1"`
	ChickenBtnPrefBig                    *bool                  `protobuf:"varint,1,opt,name=chicken_btn_pref_big,json=chickenBtnPrefBig" json:"chicken_btn_pref_big,omitempty"`
	FreeHatcheryRefillGiven              *bool                  `protobuf:"varint,2,opt,name=free_hatchery_refill_given,json=freeHatcheryRefillGiven" json:"free_hatchery_refill_given,omitempty"`
	LastShareFarmValue                   *float64               `protobuf:"fixed64,3,opt,name=last_share_farm_value,json=lastShareFarmValue,def=1e+07" json:"last_share_farm_value,omitempty"`
	LastShareSwarmFarmValue              *float64               `protobuf:"fixed64,4,opt,name=last_share_swarm_farm_value,json=lastShareSwarmFarmValue,def=1e+07" json:"last_share_swarm_farm_value,omitempty"`
	LastShareSwarmSize                   *float64               `protobuf:"fixed64,5,opt,name=last_share_swarm_size,json=lastShareSwarmSize,def=140" json:"last_share_swarm_size,omitempty"`
	LastPrestigeAlertSoulEggs_DEPRECATED *uint64                `protobuf:"varint,10,opt,name=last_prestige_alert_soul_eggs_DEPRECATED,json=lastPrestigeAlertSoulEggsDEPRECATED,def=45" json:"last_prestige_alert_soul_eggs_DEPRECATED,omitempty"`
	FriendRank                           *uint64                `protobuf:"varint,6,opt,name=friend_rank,json=friendRank" json:"friend_rank,omitempty"`
	FriendRankPop                        *uint64                `protobuf:"varint,7,opt,name=friend_rank_pop,json=friendRankPop" json:"friend_rank_pop,omitempty"`
	GlobalRank                           *uint64                `protobuf:"varint,8,opt,name=global_rank,json=globalRank" json:"global_rank,omitempty"`
	GlobalRankPop                        *uint64                `protobuf:"varint,9,opt,name=global_rank_pop,json=globalRankPop" json:"global_rank_pop,omitempty"`
	ChallengesAlert                      *bool                  `protobuf:"varint,20,opt,name=challenges_alert,json=challengesAlert" json:"challenges_alert,omitempty"`
	TrophyAlert                          *bool                  `protobuf:"varint,11,opt,name=trophy_alert,json=trophyAlert" json:"trophy_alert,omitempty"`
	ArAlert                              *bool                  `protobuf:"varint,12,opt,name=ar_alert,json=arAlert" json:"ar_alert,omitempty"`
	ContractsAlert                       *bool                  `protobuf:"varint,13,opt,name=contracts_alert,json=contractsAlert" json:"contracts_alert,omitempty"`
	ContractsAlertV2                     *bool                  `protobuf:"varint,21,opt,name=contracts_alert_v2,json=contractsAlertV2" json:"contracts_alert_v2,omitempty"`
	CoopAlert                            *bool                  `protobuf:"varint,14,opt,name=coop_alert,json=coopAlert" json:"coop_alert,omitempty"`
	CoopAlertV2                          *bool                  `protobuf:"varint,22,opt,name=coop_alert_v2,json=coopAlertV2" json:"coop_alert_v2,omitempty"`
	SwitchAlert                          *bool                  `protobuf:"varint,15,opt,name=switch_alert,json=switchAlert" json:"switch_alert,omitempty"`
	EggOfProphecyAlert                   *bool                  `protobuf:"varint,16,opt,name=egg_of_prophecy_alert,json=eggOfProphecyAlert" json:"egg_of_prophecy_alert,omitempty"`
	BoostTokenAlert                      *bool                  `protobuf:"varint,17,opt,name=boost_token_alert,json=boostTokenAlert" json:"boost_token_alert,omitempty"`
	SoulEggAlert                         *bool                  `protobuf:"varint,18,opt,name=soul_egg_alert,json=soulEggAlert" json:"soul_egg_alert,omitempty"`
	BackupReminderAlert                  *bool                  `protobuf:"varint,19,opt,name=backup_reminder_alert,json=backupReminderAlert" json:"backup_reminder_alert,omitempty"`
	MaxButtonAlert                       *bool                  `protobuf:"varint,23,opt,name=max_button_alert,json=maxButtonAlert" json:"max_button_alert,omitempty"`
	MissionTargetAlert                   *bool                  `protobuf:"varint,24,opt,name=mission_target_alert,json=missionTargetAlert" json:"mission_target_alert,omitempty"`
	ColleggtiblesAlert                   *bool                  `protobuf:"varint,25,opt,name=colleggtibles_alert,json=colleggtiblesAlert" json:"colleggtibles_alert,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

// Default values for Backup_Misc fields.
const (
	Default_Backup_Misc_LastShareFarmValue                   = float64(1e+07)
	Default_Backup_Misc_LastShareSwarmFarmValue              = float64(1e+07)
	Default_Backup_Misc_LastShareSwarmSize                   = float64(140)
	Default_Backup_Misc_LastPrestigeAlertSoulEggs_DEPRECATED = uint64(45)
)

func (x *Backup_Misc) Reset() {
	*x = Backup_Misc{}
	mi := &file_go_ei_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_Misc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_Misc) ProtoMessage() {}

func (x *Backup_Misc) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_Misc.ProtoReflect.Descriptor instead.
func (*Backup_Misc) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 8}
}

func (x *Backup_Misc) GetChickenBtnPrefBig() bool {
	if x != nil && x.ChickenBtnPrefBig != nil {
		return *x.ChickenBtnPrefBig
	}
	return false
}

func (x *Backup_Misc) GetFreeHatcheryRefillGiven() bool {
	if x != nil && x.FreeHatcheryRefillGiven != nil {
		return *x.FreeHatcheryRefillGiven
	}
	return false
}

func (x *Backup_Misc) GetLastShareFarmValue() float64 {
	if x != nil && x.LastShareFarmValue != nil {
		return *x.LastShareFarmValue
	}
	return Default_Backup_Misc_LastShareFarmValue
}

func (x *Backup_Misc) GetLastShareSwarmFarmValue() float64 {
	if x != nil && x.LastShareSwarmFarmValue != nil {
		return *x.LastShareSwarmFarmValue
	}
	return Default_Backup_Misc_LastShareSwarmFarmValue
}

func (x *Backup_Misc) GetLastShareSwarmSize() float64 {
	if x != nil && x.LastShareSwarmSize != nil {
		return *x.LastShareSwarmSize
	}
	return Default_Backup_Misc_LastShareSwarmSize
}

func (x *Backup_Misc) GetLastPrestigeAlertSoulEggs_DEPRECATED() uint64 {
	if x != nil && x.LastPrestigeAlertSoulEggs_DEPRECATED != nil {
		return *x.LastPrestigeAlertSoulEggs_DEPRECATED
	}
	return Default_Backup_Misc_LastPrestigeAlertSoulEggs_DEPRECATED
}

func (x *Backup_Misc) GetFriendRank() uint64 {
	if x != nil && x.FriendRank != nil {
		return *x.FriendRank
	}
	return 0
}

func (x *Backup_Misc) GetFriendRankPop() uint64 {
	if x != nil && x.FriendRankPop != nil {
		return *x.FriendRankPop
	}
	return 0
}

func (x *Backup_Misc) GetGlobalRank() uint64 {
	if x != nil && x.GlobalRank != nil {
		return *x.GlobalRank
	}
	return 0
}

func (x *Backup_Misc) GetGlobalRankPop() uint64 {
	if x != nil && x.GlobalRankPop != nil {
		return *x.GlobalRankPop
	}
	return 0
}

func (x *Backup_Misc) GetChallengesAlert() bool {
	if x != nil && x.ChallengesAlert != nil {
		return *x.ChallengesAlert
	}
	return false
}

func (x *Backup_Misc) GetTrophyAlert() bool {
	if x != nil && x.TrophyAlert != nil {
		return *x.TrophyAlert
	}
	return false
}

func (x *Backup_Misc) GetArAlert() bool {
	if x != nil && x.ArAlert != nil {
		return *x.ArAlert
	}
	return false
}

func (x *Backup_Misc) GetContractsAlert() bool {
	if x != nil && x.ContractsAlert != nil {
		return *x.ContractsAlert
	}
	return false
}

func (x *Backup_Misc) GetContractsAlertV2() bool {
	if x != nil && x.ContractsAlertV2 != nil {
		return *x.ContractsAlertV2
	}
	return false
}

func (x *Backup_Misc) GetCoopAlert() bool {
	if x != nil && x.CoopAlert != nil {
		return *x.CoopAlert
	}
	return false
}

func (x *Backup_Misc) GetCoopAlertV2() bool {
	if x != nil && x.CoopAlertV2 != nil {
		return *x.CoopAlertV2
	}
	return false
}

func (x *Backup_Misc) GetSwitchAlert() bool {
	if x != nil && x.SwitchAlert != nil {
		return *x.SwitchAlert
	}
	return false
}

func (x *Backup_Misc) GetEggOfProphecyAlert() bool {
	if x != nil && x.EggOfProphecyAlert != nil {
		return *x.EggOfProphecyAlert
	}
	return false
}

func (x *Backup_Misc) GetBoostTokenAlert() bool {
	if x != nil && x.BoostTokenAlert != nil {
		return *x.BoostTokenAlert
	}
	return false
}

func (x *Backup_Misc) GetSoulEggAlert() bool {
	if x != nil && x.SoulEggAlert != nil {
		return *x.SoulEggAlert
	}
	return false
}

func (x *Backup_Misc) GetBackupReminderAlert() bool {
	if x != nil && x.BackupReminderAlert != nil {
		return *x.BackupReminderAlert
	}
	return false
}

func (x *Backup_Misc) GetMaxButtonAlert() bool {
	if x != nil && x.MaxButtonAlert != nil {
		return *x.MaxButtonAlert
	}
	return false
}

func (x *Backup_Misc) GetMissionTargetAlert() bool {
	if x != nil && x.MissionTargetAlert != nil {
		return *x.MissionTargetAlert
	}
	return false
}

func (x *Backup_Misc) GetColleggtiblesAlert() bool {
	if x != nil && x.ColleggtiblesAlert != nil {
		return *x.ColleggtiblesAlert
	}
	return false
}

type Backup_ResearchItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Level         *uint32                `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Backup_ResearchItem) Reset() {
	*x = Backup_ResearchItem{}
	mi := &file_go_ei_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_ResearchItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_ResearchItem) ProtoMessage() {}

func (x *Backup_ResearchItem) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_ResearchItem.ProtoReflect.Descriptor instead.
func (*Backup_ResearchItem) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 9}
}

func (x *Backup_ResearchItem) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_ResearchItem) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type Backup_NewsHeadline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Read          *bool                  `protobuf:"varint,2,opt,name=read" json:"read,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Backup_NewsHeadline) Reset() {
	*x = Backup_NewsHeadline{}
	mi := &file_go_ei_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_NewsHeadline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_NewsHeadline) ProtoMessage() {}

func (x *Backup_NewsHeadline) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_NewsHeadline.ProtoReflect.Descriptor instead.
func (*Backup_NewsHeadline) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 10}
}

func (x *Backup_NewsHeadline) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_NewsHeadline) GetRead() bool {
	if x != nil && x.Read != nil {
		return *x.Read
	}
	return false
}

type Backup_AchievementInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Achieved      *bool                  `protobuf:"varint,2,opt,name=achieved" json:"achieved,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Backup_AchievementInfo) Reset() {
	*x = Backup_AchievementInfo{}
	mi := &file_go_ei_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_AchievementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_AchievementInfo) ProtoMessage() {}

func (x *Backup_AchievementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_AchievementInfo.ProtoReflect.Descriptor instead.
func (*Backup_AchievementInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 11}
}

func (x *Backup_AchievementInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_AchievementInfo) GetAchieved() bool {
	if x != nil && x.Achieved != nil {
		return *x.Achieved
	}
	return false
}

type Backup_ActiveBoost struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	BoostId        *string                `protobuf:"bytes,1,opt,name=boost_id,json=boostId" json:"boost_id,omitempty"`
	TimeRemaining  *float64               `protobuf:"fixed64,2,opt,name=time_remaining,json=timeRemaining" json:"time_remaining,omitempty"`
	ReferenceValue *float64               `protobuf:"fixed64,3,opt,name=reference_value,json=referenceValue" json:"reference_value,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Backup_ActiveBoost) Reset() {
	*x = Backup_ActiveBoost{}
	mi := &file_go_ei_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_ActiveBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_ActiveBoost) ProtoMessage() {}

func (x *Backup_ActiveBoost) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_ActiveBoost.ProtoReflect.Descriptor instead.
func (*Backup_ActiveBoost) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 12}
}

func (x *Backup_ActiveBoost) GetBoostId() string {
	if x != nil && x.BoostId != nil {
		return *x.BoostId
	}
	return ""
}

func (x *Backup_ActiveBoost) GetTimeRemaining() float64 {
	if x != nil && x.TimeRemaining != nil {
		return *x.TimeRemaining
	}
	return 0
}

func (x *Backup_ActiveBoost) GetReferenceValue() float64 {
	if x != nil && x.ReferenceValue != nil {
		return *x.ReferenceValue
	}
	return 0
}

type Backup_OwnedBoost struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoostId       *string                `protobuf:"bytes,1,opt,name=boost_id,json=boostId" json:"boost_id,omitempty"`
	Count         *uint32                `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Backup_OwnedBoost) Reset() {
	*x = Backup_OwnedBoost{}
	mi := &file_go_ei_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_OwnedBoost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_OwnedBoost) ProtoMessage() {}

func (x *Backup_OwnedBoost) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_OwnedBoost.ProtoReflect.Descriptor instead.
func (*Backup_OwnedBoost) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 13}
}

func (x *Backup_OwnedBoost) GetBoostId() string {
	if x != nil && x.BoostId != nil {
		return *x.BoostId
	}
	return ""
}

func (x *Backup_OwnedBoost) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type Backup_MissionInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Completed      *bool                  `protobuf:"varint,2,opt,name=completed" json:"completed,omitempty"`
	ReferenceValue *float64               `protobuf:"fixed64,3,opt,name=reference_value,json=referenceValue" json:"reference_value,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Backup_MissionInfo) Reset() {
	*x = Backup_MissionInfo{}
	mi := &file_go_ei_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backup_MissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backup_MissionInfo) ProtoMessage() {}

func (x *Backup_MissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backup_MissionInfo.ProtoReflect.Descriptor instead.
func (*Backup_MissionInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{2, 14}
}

func (x *Backup_MissionInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Backup_MissionInfo) GetCompleted() bool {
	if x != nil && x.Completed != nil {
		return *x.Completed
	}
	return false
}

func (x *Backup_MissionInfo) GetReferenceValue() float64 {
	if x != nil && x.ReferenceValue != nil {
		return *x.ReferenceValue
	}
	return 0
}

type Contract_Goal struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Type           *GoalType              `protobuf:"varint,1,opt,name=type,enum=ei.GoalType" json:"type,omitempty"`
	TargetAmount   *float64               `protobuf:"fixed64,2,opt,name=target_amount,json=targetAmount" json:"target_amount,omitempty"`
	RewardType     *RewardType            `protobuf:"varint,3,opt,name=reward_type,json=rewardType,enum=ei.RewardType" json:"reward_type,omitempty"`
	RewardSubType  *string                `protobuf:"bytes,4,opt,name=reward_sub_type,json=rewardSubType" json:"reward_sub_type,omitempty"`
	RewardAmount   *float64               `protobuf:"fixed64,5,opt,name=reward_amount,json=rewardAmount" json:"reward_amount,omitempty"`
	TargetSoulEggs *float64               `protobuf:"fixed64,6,opt,name=target_soul_eggs,json=targetSoulEggs" json:"target_soul_eggs,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Contract_Goal) Reset() {
	*x = Contract_Goal{}
	mi := &file_go_ei_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract_Goal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_Goal) ProtoMessage() {}

func (x *Contract_Goal) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_Goal.ProtoReflect.Descriptor instead.
func (*Contract_Goal) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{24, 0}
}

func (x *Contract_Goal) GetType() GoalType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GoalType_EGGS_LAID
}

func (x *Contract_Goal) GetTargetAmount() float64 {
	if x != nil && x.TargetAmount != nil {
		return *x.TargetAmount
	}
	return 0
}

func (x *Contract_Goal) GetRewardType() RewardType {
	if x != nil && x.RewardType != nil {
		return *x.RewardType
	}
	return RewardType_CASH
}

func (x *Contract_Goal) GetRewardSubType() string {
	if x != nil && x.RewardSubType != nil {
		return *x.RewardSubType
	}
	return ""
}

func (x *Contract_Goal) GetRewardAmount() float64 {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return 0
}

func (x *Contract_Goal) GetTargetSoulEggs() float64 {
	if x != nil && x.TargetSoulEggs != nil {
		return *x.TargetSoulEggs
	}
	return 0
}

type Contract_GoalSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Goals         []*Contract_Goal       `protobuf:"bytes,1,rep,name=goals" json:"goals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contract_GoalSet) Reset() {
	*x = Contract_GoalSet{}
	mi := &file_go_ei_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract_GoalSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_GoalSet) ProtoMessage() {}

func (x *Contract_GoalSet) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_GoalSet.ProtoReflect.Descriptor instead.
func (*Contract_GoalSet) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{24, 1}
}

func (x *Contract_GoalSet) GetGoals() []*Contract_Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

type Contract_GradeSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Grade         *Contract_PlayerGrade  `protobuf:"varint,1,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	Goals         []*Contract_Goal       `protobuf:"bytes,2,rep,name=goals" json:"goals,omitempty"`
	Modifiers     []*GameModifier        `protobuf:"bytes,3,rep,name=modifiers" json:"modifiers,omitempty"`
	LengthSeconds *float64               `protobuf:"fixed64,4,opt,name=length_seconds,json=lengthSeconds" json:"length_seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Contract_GradeSpec) Reset() {
	*x = Contract_GradeSpec{}
	mi := &file_go_ei_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Contract_GradeSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract_GradeSpec) ProtoMessage() {}

func (x *Contract_GradeSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract_GradeSpec.ProtoReflect.Descriptor instead.
func (*Contract_GradeSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{24, 2}
}

func (x *Contract_GradeSpec) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *Contract_GradeSpec) GetGoals() []*Contract_Goal {
	if x != nil {
		return x.Goals
	}
	return nil
}

func (x *Contract_GradeSpec) GetModifiers() []*GameModifier {
	if x != nil {
		return x.Modifiers
	}
	return nil
}

func (x *Contract_GradeSpec) GetLengthSeconds() float64 {
	if x != nil && x.LengthSeconds != nil {
		return *x.LengthSeconds
	}
	return 0
}

type ContractSeasonInfo_GoalSet struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Grade         *Contract_PlayerGrade  `protobuf:"varint,1,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	Goals         []*ContractSeasonGoal  `protobuf:"bytes,2,rep,name=goals" json:"goals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSeasonInfo_GoalSet) Reset() {
	*x = ContractSeasonInfo_GoalSet{}
	mi := &file_go_ei_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSeasonInfo_GoalSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSeasonInfo_GoalSet) ProtoMessage() {}

func (x *ContractSeasonInfo_GoalSet) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSeasonInfo_GoalSet.ProtoReflect.Descriptor instead.
func (*ContractSeasonInfo_GoalSet) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ContractSeasonInfo_GoalSet) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *ContractSeasonInfo_GoalSet) GetGoals() []*ContractSeasonGoal {
	if x != nil {
		return x.Goals
	}
	return nil
}

type ContractPlayerInfo_SeasonProgress struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	SeasonId           *string                `protobuf:"bytes,1,opt,name=season_id,json=seasonId" json:"season_id,omitempty"`
	Active_DEP         *bool                  `protobuf:"varint,2,opt,name=active_DEP,json=activeDEP" json:"active_DEP,omitempty"`
	StartingGrade      *Contract_PlayerGrade  `protobuf:"varint,3,opt,name=starting_grade,json=startingGrade,enum=ei.Contract_PlayerGrade" json:"starting_grade,omitempty"`
	TotalCxp           *float64               `protobuf:"fixed64,4,opt,name=total_cxp,json=totalCxp" json:"total_cxp,omitempty"`
	CxpLastRewardGiven *float64               `protobuf:"fixed64,5,opt,name=cxp_last_reward_given,json=cxpLastRewardGiven" json:"cxp_last_reward_given,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ContractPlayerInfo_SeasonProgress) Reset() {
	*x = ContractPlayerInfo_SeasonProgress{}
	mi := &file_go_ei_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractPlayerInfo_SeasonProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractPlayerInfo_SeasonProgress) ProtoMessage() {}

func (x *ContractPlayerInfo_SeasonProgress) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractPlayerInfo_SeasonProgress.ProtoReflect.Descriptor instead.
func (*ContractPlayerInfo_SeasonProgress) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{29, 0}
}

func (x *ContractPlayerInfo_SeasonProgress) GetSeasonId() string {
	if x != nil && x.SeasonId != nil {
		return *x.SeasonId
	}
	return ""
}

func (x *ContractPlayerInfo_SeasonProgress) GetActive_DEP() bool {
	if x != nil && x.Active_DEP != nil {
		return *x.Active_DEP
	}
	return false
}

func (x *ContractPlayerInfo_SeasonProgress) GetStartingGrade() Contract_PlayerGrade {
	if x != nil && x.StartingGrade != nil {
		return *x.StartingGrade
	}
	return Contract_GRADE_UNSET
}

func (x *ContractPlayerInfo_SeasonProgress) GetTotalCxp() float64 {
	if x != nil && x.TotalCxp != nil {
		return *x.TotalCxp
	}
	return 0
}

func (x *ContractPlayerInfo_SeasonProgress) GetCxpLastRewardGiven() float64 {
	if x != nil && x.CxpLastRewardGiven != nil {
		return *x.CxpLastRewardGiven
	}
	return 0
}

type ContractEvaluationBatch_Pair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Cev           *ContractEvaluation    `protobuf:"bytes,2,opt,name=cev" json:"cev,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractEvaluationBatch_Pair) Reset() {
	*x = ContractEvaluationBatch_Pair{}
	mi := &file_go_ei_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractEvaluationBatch_Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractEvaluationBatch_Pair) ProtoMessage() {}

func (x *ContractEvaluationBatch_Pair) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractEvaluationBatch_Pair.ProtoReflect.Descriptor instead.
func (*ContractEvaluationBatch_Pair) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{32, 0}
}

func (x *ContractEvaluationBatch_Pair) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractEvaluationBatch_Pair) GetCev() *ContractEvaluation {
	if x != nil {
		return x.Cev
	}
	return nil
}

type CoopCompletionSnapshot_ContributorSnapshot struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Contribution         *float64               `protobuf:"fixed64,1,opt,name=contribution" json:"contribution,omitempty"`
	LastContributionTime *float64               `protobuf:"fixed64,6,opt,name=last_contribution_time,json=lastContributionTime" json:"last_contribution_time,omitempty"`
	Finalized            *bool                  `protobuf:"varint,7,opt,name=finalized" json:"finalized,omitempty"`
	SoulPower            *float64               `protobuf:"fixed64,2,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	UserId               *string                `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Tokens               *uint32                `protobuf:"varint,4,opt,name=tokens" json:"tokens,omitempty"`
	TokensSpent          *uint32                `protobuf:"varint,5,opt,name=tokens_spent,json=tokensSpent" json:"tokens_spent,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) Reset() {
	*x = CoopCompletionSnapshot_ContributorSnapshot{}
	mi := &file_go_ei_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoopCompletionSnapshot_ContributorSnapshot) ProtoMessage() {}

func (x *CoopCompletionSnapshot_ContributorSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoopCompletionSnapshot_ContributorSnapshot.ProtoReflect.Descriptor instead.
func (*CoopCompletionSnapshot_ContributorSnapshot) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{33, 0}
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) GetContribution() float64 {
	if x != nil && x.Contribution != nil {
		return *x.Contribution
	}
	return 0
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) GetLastContributionTime() float64 {
	if x != nil && x.LastContributionTime != nil {
		return *x.LastContributionTime
	}
	return 0
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) GetTokens() uint32 {
	if x != nil && x.Tokens != nil {
		return *x.Tokens
	}
	return 0
}

func (x *CoopCompletionSnapshot_ContributorSnapshot) GetTokensSpent() uint32 {
	if x != nil && x.TokensSpent != nil {
		return *x.TokensSpent
	}
	return 0
}

type ContractSimConfig_ContractGradeSimConfig struct {
	state         protoimpl.MessageState                                 `protogen:"open.v1"`
	Grade         *Contract_PlayerGrade                                  `protobuf:"varint,1,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	GoalParams    []*ContractSimConfig_ContractGradeSimConfig_GoalParams `protobuf:"bytes,2,rep,name=goal_params,json=goalParams" json:"goal_params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractSimConfig_ContractGradeSimConfig) Reset() {
	*x = ContractSimConfig_ContractGradeSimConfig{}
	mi := &file_go_ei_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSimConfig_ContractGradeSimConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSimConfig_ContractGradeSimConfig) ProtoMessage() {}

func (x *ContractSimConfig_ContractGradeSimConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSimConfig_ContractGradeSimConfig.ProtoReflect.Descriptor instead.
func (*ContractSimConfig_ContractGradeSimConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{35, 0}
}

func (x *ContractSimConfig_ContractGradeSimConfig) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *ContractSimConfig_ContractGradeSimConfig) GetGoalParams() []*ContractSimConfig_ContractGradeSimConfig_GoalParams {
	if x != nil {
		return x.GoalParams
	}
	return nil
}

type ContractSimConfig_ContractGradeSimConfig_GoalParams struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TargetSe           *float64               `protobuf:"fixed64,1,opt,name=target_se,json=targetSe" json:"target_se,omitempty"`
	CpsMult            *float64               `protobuf:"fixed64,2,opt,name=cps_mult,json=cpsMult" json:"cps_mult,omitempty"`
	ElrMult            *float64               `protobuf:"fixed64,7,opt,name=elr_mult,json=elrMult" json:"elr_mult,omitempty"`
	EarningsMult       *float64               `protobuf:"fixed64,3,opt,name=earnings_mult,json=earningsMult" json:"earnings_mult,omitempty"`
	TimeEfficacy       *float64               `protobuf:"fixed64,4,opt,name=time_efficacy,json=timeEfficacy" json:"time_efficacy,omitempty"`
	HabCapacityMult    *float64               `protobuf:"fixed64,5,opt,name=hab_capacity_mult,json=habCapacityMult" json:"hab_capacity_mult,omitempty"`
	EpicResearchBudget *float64               `protobuf:"fixed64,6,opt,name=epic_research_budget,json=epicResearchBudget" json:"epic_research_budget,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) Reset() {
	*x = ContractSimConfig_ContractGradeSimConfig_GoalParams{}
	mi := &file_go_ei_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSimConfig_ContractGradeSimConfig_GoalParams) ProtoMessage() {}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSimConfig_ContractGradeSimConfig_GoalParams.ProtoReflect.Descriptor instead.
func (*ContractSimConfig_ContractGradeSimConfig_GoalParams) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{35, 0, 0}
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) GetTargetSe() float64 {
	if x != nil && x.TargetSe != nil {
		return *x.TargetSe
	}
	return 0
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) GetCpsMult() float64 {
	if x != nil && x.CpsMult != nil {
		return *x.CpsMult
	}
	return 0
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) GetElrMult() float64 {
	if x != nil && x.ElrMult != nil {
		return *x.ElrMult
	}
	return 0
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) GetEarningsMult() float64 {
	if x != nil && x.EarningsMult != nil {
		return *x.EarningsMult
	}
	return 0
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) GetTimeEfficacy() float64 {
	if x != nil && x.TimeEfficacy != nil {
		return *x.TimeEfficacy
	}
	return 0
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) GetHabCapacityMult() float64 {
	if x != nil && x.HabCapacityMult != nil {
		return *x.HabCapacityMult
	}
	return 0
}

func (x *ContractSimConfig_ContractGradeSimConfig_GoalParams) GetEpicResearchBudget() float64 {
	if x != nil && x.EpicResearchBudget != nil {
		return *x.EpicResearchBudget
	}
	return 0
}

type ContractSimResultUpdate_GoalInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Grade             *Contract_PlayerGrade  `protobuf:"varint,1,opt,name=grade,enum=ei.Contract_PlayerGrade" json:"grade,omitempty"`
	GoalIndex         *uint32                `protobuf:"varint,2,opt,name=goal_index,json=goalIndex" json:"goal_index,omitempty"`
	ProjectedEggsLaid *float64               `protobuf:"fixed64,3,opt,name=projected_eggs_laid,json=projectedEggsLaid" json:"projected_eggs_laid,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ContractSimResultUpdate_GoalInfo) Reset() {
	*x = ContractSimResultUpdate_GoalInfo{}
	mi := &file_go_ei_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractSimResultUpdate_GoalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSimResultUpdate_GoalInfo) ProtoMessage() {}

func (x *ContractSimResultUpdate_GoalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSimResultUpdate_GoalInfo.ProtoReflect.Descriptor instead.
func (*ContractSimResultUpdate_GoalInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{38, 0}
}

func (x *ContractSimResultUpdate_GoalInfo) GetGrade() Contract_PlayerGrade {
	if x != nil && x.Grade != nil {
		return *x.Grade
	}
	return Contract_GRADE_UNSET
}

func (x *ContractSimResultUpdate_GoalInfo) GetGoalIndex() uint32 {
	if x != nil && x.GoalIndex != nil {
		return *x.GoalIndex
	}
	return 0
}

func (x *ContractSimResultUpdate_GoalInfo) GetProjectedEggsLaid() float64 {
	if x != nil && x.ProjectedEggsLaid != nil {
		return *x.ProjectedEggsLaid
	}
	return 0
}

type ContractCoopStatusResponse_ContributionInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Uuid               *string                `protobuf:"bytes,21,opt,name=uuid" json:"uuid,omitempty"`
	UserId             *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName           *string                `protobuf:"bytes,2,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	ContractIdentifier *string                `protobuf:"bytes,19,opt,name=contract_identifier,json=contractIdentifier" json:"contract_identifier,omitempty"`
	ContributionAmount *float64               `protobuf:"fixed64,3,opt,name=contribution_amount,json=contributionAmount" json:"contribution_amount,omitempty"`
	ContributionRate   *float64               `protobuf:"fixed64,6,opt,name=contribution_rate,json=contributionRate" json:"contribution_rate,omitempty"`
	SoulPower          *float64               `protobuf:"fixed64,11,opt,name=soul_power,json=soulPower" json:"soul_power,omitempty"`
	ProductionParams   *FarmProductionParams  `protobuf:"bytes,15,opt,name=production_params,json=productionParams" json:"production_params,omitempty"`
	FarmInfo           *PlayerFarmInfo        `protobuf:"bytes,18,opt,name=farm_info,json=farmInfo" json:"farm_info,omitempty"`
	RankChange         *int32                 `protobuf:"varint,8,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	RecentlyActive     *bool                  `protobuf:"varint,23,opt,name=recently_active,json=recentlyActive" json:"recently_active,omitempty"`
	Active             *bool                  `protobuf:"varint,4,opt,name=active" json:"active,omitempty"`
	CcMember           *bool                  `protobuf:"varint,24,opt,name=cc_member,json=ccMember" json:"cc_member,omitempty"`
	Leech              *bool                  `protobuf:"varint,16,opt,name=leech" json:"leech,omitempty"`
	Finalized          *bool                  `protobuf:"varint,22,opt,name=finalized" json:"finalized,omitempty"`
	TimeCheatDetected  *bool                  `protobuf:"varint,7,opt,name=time_cheat_detected,json=timeCheatDetected" json:"time_cheat_detected,omitempty"`
	Platform           *Platform              `protobuf:"varint,5,opt,name=platform,enum=ei.Platform" json:"platform,omitempty"`
	PushId             *string                `protobuf:"bytes,9,opt,name=push_id,json=pushId" json:"push_id,omitempty"`
	BanVotes           *uint32                `protobuf:"varint,10,opt,name=ban_votes,json=banVotes" json:"ban_votes,omitempty"`
	Autojoined         *bool                  `protobuf:"varint,17,opt,name=autojoined" json:"autojoined,omitempty"`
	BoostTokens        *uint32                `protobuf:"varint,12,opt,name=boost_tokens,json=boostTokens" json:"boost_tokens,omitempty"`
	BoostTokensSpent   *uint32                `protobuf:"varint,14,opt,name=boost_tokens_spent,json=boostTokensSpent" json:"boost_tokens_spent,omitempty"`
	BuffHistory        []*CoopBuffState       `protobuf:"bytes,13,rep,name=buff_history,json=buffHistory" json:"buff_history,omitempty"`
	ChickenRunCooldown *float64               `protobuf:"fixed64,20,opt,name=chicken_run_cooldown,json=chickenRunCooldown" json:"chicken_run_cooldown,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ContractCoopStatusResponse_ContributionInfo) Reset() {
	*x = ContractCoopStatusResponse_ContributionInfo{}
	mi := &file_go_ei_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCoopStatusResponse_ContributionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusResponse_ContributionInfo) ProtoMessage() {}

func (x *ContractCoopStatusResponse_ContributionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusResponse_ContributionInfo.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusResponse_ContributionInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{44, 0}
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetContractIdentifier() string {
	if x != nil && x.ContractIdentifier != nil {
		return *x.ContractIdentifier
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetContributionAmount() float64 {
	if x != nil && x.ContributionAmount != nil {
		return *x.ContributionAmount
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetContributionRate() float64 {
	if x != nil && x.ContributionRate != nil {
		return *x.ContributionRate
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetSoulPower() float64 {
	if x != nil && x.SoulPower != nil {
		return *x.SoulPower
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetProductionParams() *FarmProductionParams {
	if x != nil {
		return x.ProductionParams
	}
	return nil
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetFarmInfo() *PlayerFarmInfo {
	if x != nil {
		return x.FarmInfo
	}
	return nil
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetRankChange() int32 {
	if x != nil && x.RankChange != nil {
		return *x.RankChange
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetRecentlyActive() bool {
	if x != nil && x.RecentlyActive != nil {
		return *x.RecentlyActive
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetActive() bool {
	if x != nil && x.Active != nil {
		return *x.Active
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetCcMember() bool {
	if x != nil && x.CcMember != nil {
		return *x.CcMember
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetLeech() bool {
	if x != nil && x.Leech != nil {
		return *x.Leech
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetFinalized() bool {
	if x != nil && x.Finalized != nil {
		return *x.Finalized
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetTimeCheatDetected() bool {
	if x != nil && x.TimeCheatDetected != nil {
		return *x.TimeCheatDetected
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetPushId() string {
	if x != nil && x.PushId != nil {
		return *x.PushId
	}
	return ""
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetBanVotes() uint32 {
	if x != nil && x.BanVotes != nil {
		return *x.BanVotes
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetAutojoined() bool {
	if x != nil && x.Autojoined != nil {
		return *x.Autojoined
	}
	return false
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetBoostTokens() uint32 {
	if x != nil && x.BoostTokens != nil {
		return *x.BoostTokens
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetBoostTokensSpent() uint32 {
	if x != nil && x.BoostTokensSpent != nil {
		return *x.BoostTokensSpent
	}
	return 0
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetBuffHistory() []*CoopBuffState {
	if x != nil {
		return x.BuffHistory
	}
	return nil
}

func (x *ContractCoopStatusResponse_ContributionInfo) GetChickenRunCooldown() float64 {
	if x != nil && x.ChickenRunCooldown != nil {
		return *x.ChickenRunCooldown
	}
	return 0
}

type ContractCoopStatusResponse_CoopGift struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName      *string                `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Amount        *uint32                `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	Tracking      *string                `protobuf:"bytes,4,opt,name=tracking" json:"tracking,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractCoopStatusResponse_CoopGift) Reset() {
	*x = ContractCoopStatusResponse_CoopGift{}
	mi := &file_go_ei_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCoopStatusResponse_CoopGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusResponse_CoopGift) ProtoMessage() {}

func (x *ContractCoopStatusResponse_CoopGift) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusResponse_CoopGift.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusResponse_CoopGift) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{44, 1}
}

func (x *ContractCoopStatusResponse_CoopGift) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusResponse_CoopGift) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ContractCoopStatusResponse_CoopGift) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *ContractCoopStatusResponse_CoopGift) GetTracking() string {
	if x != nil && x.Tracking != nil {
		return *x.Tracking
	}
	return ""
}

type ContractCoopStatusResponse_ChickenRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *string                `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserName      *string                `protobuf:"bytes,3,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	Amount        *uint64                `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContractCoopStatusResponse_ChickenRun) Reset() {
	*x = ContractCoopStatusResponse_ChickenRun{}
	mi := &file_go_ei_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContractCoopStatusResponse_ChickenRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCoopStatusResponse_ChickenRun) ProtoMessage() {}

func (x *ContractCoopStatusResponse_ChickenRun) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCoopStatusResponse_ChickenRun.ProtoReflect.Descriptor instead.
func (*ContractCoopStatusResponse_ChickenRun) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{44, 2}
}

func (x *ContractCoopStatusResponse_ChickenRun) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *ContractCoopStatusResponse_ChickenRun) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *ContractCoopStatusResponse_ChickenRun) GetAmount() uint64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type IdleSessionSummary_Stat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Min           *float64               `protobuf:"fixed64,2,opt,name=min" json:"min,omitempty"`
	Max           *float64               `protobuf:"fixed64,3,opt,name=max" json:"max,omitempty"`
	Avg           *float64               `protobuf:"fixed64,4,opt,name=avg" json:"avg,omitempty"`
	TotalTime     *float64               `protobuf:"fixed64,5,opt,name=total_time,json=totalTime" json:"total_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IdleSessionSummary_Stat) Reset() {
	*x = IdleSessionSummary_Stat{}
	mi := &file_go_ei_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IdleSessionSummary_Stat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdleSessionSummary_Stat) ProtoMessage() {}

func (x *IdleSessionSummary_Stat) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdleSessionSummary_Stat.ProtoReflect.Descriptor instead.
func (*IdleSessionSummary_Stat) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{61, 0}
}

func (x *IdleSessionSummary_Stat) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *IdleSessionSummary_Stat) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *IdleSessionSummary_Stat) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *IdleSessionSummary_Stat) GetAvg() float64 {
	if x != nil && x.Avg != nil {
		return *x.Avg
	}
	return 0
}

func (x *IdleSessionSummary_Stat) GetTotalTime() float64 {
	if x != nil && x.TotalTime != nil {
		return *x.TotalTime
	}
	return 0
}

type LeaderboardAnalysis_Chunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartIndex    *uint32                `protobuf:"varint,1,opt,name=start_index,json=startIndex" json:"start_index,omitempty"`
	EndIndex      *uint32                `protobuf:"varint,2,opt,name=end_index,json=endIndex" json:"end_index,omitempty"`
	HighScore     *float64               `protobuf:"fixed64,3,opt,name=high_score,json=highScore" json:"high_score,omitempty"`
	LowScore      *float64               `protobuf:"fixed64,4,opt,name=low_score,json=lowScore" json:"low_score,omitempty"`
	StartCursor   *string                `protobuf:"bytes,5,opt,name=start_cursor,json=startCursor" json:"start_cursor,omitempty"`
	EndCursor     *string                `protobuf:"bytes,6,opt,name=end_cursor,json=endCursor" json:"end_cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardAnalysis_Chunk) Reset() {
	*x = LeaderboardAnalysis_Chunk{}
	mi := &file_go_ei_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardAnalysis_Chunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardAnalysis_Chunk) ProtoMessage() {}

func (x *LeaderboardAnalysis_Chunk) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardAnalysis_Chunk.ProtoReflect.Descriptor instead.
func (*LeaderboardAnalysis_Chunk) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{68, 0}
}

func (x *LeaderboardAnalysis_Chunk) GetStartIndex() uint32 {
	if x != nil && x.StartIndex != nil {
		return *x.StartIndex
	}
	return 0
}

func (x *LeaderboardAnalysis_Chunk) GetEndIndex() uint32 {
	if x != nil && x.EndIndex != nil {
		return *x.EndIndex
	}
	return 0
}

func (x *LeaderboardAnalysis_Chunk) GetHighScore() float64 {
	if x != nil && x.HighScore != nil {
		return *x.HighScore
	}
	return 0
}

func (x *LeaderboardAnalysis_Chunk) GetLowScore() float64 {
	if x != nil && x.LowScore != nil {
		return *x.LowScore
	}
	return 0
}

func (x *LeaderboardAnalysis_Chunk) GetStartCursor() string {
	if x != nil && x.StartCursor != nil {
		return *x.StartCursor
	}
	return ""
}

func (x *LeaderboardAnalysis_Chunk) GetEndCursor() string {
	if x != nil && x.EndCursor != nil {
		return *x.EndCursor
	}
	return ""
}

type LeaderboardInfo_Season struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Scope         *string                `protobuf:"bytes,1,opt,name=scope" json:"scope,omitempty"`
	Name          *string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardInfo_Season) Reset() {
	*x = LeaderboardInfo_Season{}
	mi := &file_go_ei_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardInfo_Season) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardInfo_Season) ProtoMessage() {}

func (x *LeaderboardInfo_Season) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardInfo_Season.ProtoReflect.Descriptor instead.
func (*LeaderboardInfo_Season) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{69, 0}
}

func (x *LeaderboardInfo_Season) GetScope() string {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return ""
}

func (x *LeaderboardInfo_Season) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type LeaderboardResponse_Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rank          *uint32                `protobuf:"varint,1,opt,name=rank" json:"rank,omitempty"`
	Alias         *string                `protobuf:"bytes,2,opt,name=alias" json:"alias,omitempty"`
	Score         *float64               `protobuf:"fixed64,3,opt,name=score" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LeaderboardResponse_Entry) Reset() {
	*x = LeaderboardResponse_Entry{}
	mi := &file_go_ei_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LeaderboardResponse_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardResponse_Entry) ProtoMessage() {}

func (x *LeaderboardResponse_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardResponse_Entry.ProtoReflect.Descriptor instead.
func (*LeaderboardResponse_Entry) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{71, 0}
}

func (x *LeaderboardResponse_Entry) GetRank() uint32 {
	if x != nil && x.Rank != nil {
		return *x.Rank
	}
	return 0
}

func (x *LeaderboardResponse_Entry) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *LeaderboardResponse_Entry) GetScore() float64 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

type LiveConfig_BoostsConfig struct {
	state                protoimpl.MessageState                `protogen:"open.v1"`
	ItemConfigs          []*LiveConfig_BoostsConfig_ItemConfig `protobuf:"bytes,1,rep,name=item_configs,json=itemConfigs" json:"item_configs,omitempty"`
	CashBoostCooloffTime *float64                              `protobuf:"fixed64,2,opt,name=cash_boost_cooloff_time,json=cashBoostCooloffTime" json:"cash_boost_cooloff_time,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *LiveConfig_BoostsConfig) Reset() {
	*x = LiveConfig_BoostsConfig{}
	mi := &file_go_ei_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_BoostsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_BoostsConfig) ProtoMessage() {}

func (x *LiveConfig_BoostsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_BoostsConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_BoostsConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 0}
}

func (x *LiveConfig_BoostsConfig) GetItemConfigs() []*LiveConfig_BoostsConfig_ItemConfig {
	if x != nil {
		return x.ItemConfigs
	}
	return nil
}

func (x *LiveConfig_BoostsConfig) GetCashBoostCooloffTime() float64 {
	if x != nil && x.CashBoostCooloffTime != nil {
		return *x.CashBoostCooloffTime
	}
	return 0
}

type LiveConfig_GiftConfig struct {
	state                            protoimpl.MessageState                   `protogen:"open.v1"`
	GiftConfigs                      []*LiveConfig_GiftConfig_GiftValueConfig `protobuf:"bytes,9,rep,name=gift_configs,json=giftConfigs" json:"gift_configs,omitempty"`
	GiftMuMinSpent                   *float64                                 `protobuf:"fixed64,10,opt,name=gift_mu_min_spent,json=giftMuMinSpent" json:"gift_mu_min_spent,omitempty"`
	GiftMuMaxSpent                   *float64                                 `protobuf:"fixed64,11,opt,name=gift_mu_max_spent,json=giftMuMaxSpent" json:"gift_mu_max_spent,omitempty"`
	GiftMuOverallMult                *float64                                 `protobuf:"fixed64,12,opt,name=gift_mu_overall_mult,json=giftMuOverallMult" json:"gift_mu_overall_mult,omitempty"`
	RandomGiftMuConfig               *LiveConfig_GiftConfig_GiftMuConfig      `protobuf:"bytes,15,opt,name=random_gift_mu_config,json=randomGiftMuConfig" json:"random_gift_mu_config,omitempty"`
	VideoGiftMuConfig                *LiveConfig_GiftConfig_GiftMuConfig      `protobuf:"bytes,16,opt,name=video_gift_mu_config,json=videoGiftMuConfig" json:"video_gift_mu_config,omitempty"`
	PackageInterval                  *float64                                 `protobuf:"fixed64,1,opt,name=package_interval,json=packageInterval" json:"package_interval,omitempty"`
	VideoOfferInterval               *float64                                 `protobuf:"fixed64,2,opt,name=video_offer_interval,json=videoOfferInterval" json:"video_offer_interval,omitempty"`
	VideoOfferIntervalContract       *float64                                 `protobuf:"fixed64,3,opt,name=video_offer_interval_contract,json=videoOfferIntervalContract" json:"video_offer_interval_contract,omitempty"`
	VideoOfferIntervalPiggyFull      *float64                                 `protobuf:"fixed64,4,opt,name=video_offer_interval_piggy_full,json=videoOfferIntervalPiggyFull" json:"video_offer_interval_piggy_full,omitempty"`
	VideoOfferIntervalPiggyExtraFull *float64                                 `protobuf:"fixed64,5,opt,name=video_offer_interval_piggy_extra_full,json=videoOfferIntervalPiggyExtraFull" json:"video_offer_interval_piggy_extra_full,omitempty"`
	VideoResetOnIdle                 *bool                                    `protobuf:"varint,14,opt,name=video_reset_on_idle,json=videoResetOnIdle" json:"video_reset_on_idle,omitempty"`
	PackageIntervalContract          *float64                                 `protobuf:"fixed64,6,opt,name=package_interval_contract,json=packageIntervalContract" json:"package_interval_contract,omitempty"`
	PackageIntervalPiggyFull         *float64                                 `protobuf:"fixed64,7,opt,name=package_interval_piggy_full,json=packageIntervalPiggyFull" json:"package_interval_piggy_full,omitempty"`
	PackageIntervalPiggyExtraFull    *float64                                 `protobuf:"fixed64,8,opt,name=package_interval_piggy_extra_full,json=packageIntervalPiggyExtraFull" json:"package_interval_piggy_extra_full,omitempty"`
	PackageResetOnIdle               *bool                                    `protobuf:"varint,13,opt,name=package_reset_on_idle,json=packageResetOnIdle" json:"package_reset_on_idle,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *LiveConfig_GiftConfig) Reset() {
	*x = LiveConfig_GiftConfig{}
	mi := &file_go_ei_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_GiftConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_GiftConfig) ProtoMessage() {}

func (x *LiveConfig_GiftConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_GiftConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_GiftConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 1}
}

func (x *LiveConfig_GiftConfig) GetGiftConfigs() []*LiveConfig_GiftConfig_GiftValueConfig {
	if x != nil {
		return x.GiftConfigs
	}
	return nil
}

func (x *LiveConfig_GiftConfig) GetGiftMuMinSpent() float64 {
	if x != nil && x.GiftMuMinSpent != nil {
		return *x.GiftMuMinSpent
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetGiftMuMaxSpent() float64 {
	if x != nil && x.GiftMuMaxSpent != nil {
		return *x.GiftMuMaxSpent
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetGiftMuOverallMult() float64 {
	if x != nil && x.GiftMuOverallMult != nil {
		return *x.GiftMuOverallMult
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetRandomGiftMuConfig() *LiveConfig_GiftConfig_GiftMuConfig {
	if x != nil {
		return x.RandomGiftMuConfig
	}
	return nil
}

func (x *LiveConfig_GiftConfig) GetVideoGiftMuConfig() *LiveConfig_GiftConfig_GiftMuConfig {
	if x != nil {
		return x.VideoGiftMuConfig
	}
	return nil
}

func (x *LiveConfig_GiftConfig) GetPackageInterval() float64 {
	if x != nil && x.PackageInterval != nil {
		return *x.PackageInterval
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferInterval() float64 {
	if x != nil && x.VideoOfferInterval != nil {
		return *x.VideoOfferInterval
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferIntervalContract() float64 {
	if x != nil && x.VideoOfferIntervalContract != nil {
		return *x.VideoOfferIntervalContract
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferIntervalPiggyFull() float64 {
	if x != nil && x.VideoOfferIntervalPiggyFull != nil {
		return *x.VideoOfferIntervalPiggyFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoOfferIntervalPiggyExtraFull() float64 {
	if x != nil && x.VideoOfferIntervalPiggyExtraFull != nil {
		return *x.VideoOfferIntervalPiggyExtraFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetVideoResetOnIdle() bool {
	if x != nil && x.VideoResetOnIdle != nil {
		return *x.VideoResetOnIdle
	}
	return false
}

func (x *LiveConfig_GiftConfig) GetPackageIntervalContract() float64 {
	if x != nil && x.PackageIntervalContract != nil {
		return *x.PackageIntervalContract
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetPackageIntervalPiggyFull() float64 {
	if x != nil && x.PackageIntervalPiggyFull != nil {
		return *x.PackageIntervalPiggyFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetPackageIntervalPiggyExtraFull() float64 {
	if x != nil && x.PackageIntervalPiggyExtraFull != nil {
		return *x.PackageIntervalPiggyExtraFull
	}
	return 0
}

func (x *LiveConfig_GiftConfig) GetPackageResetOnIdle() bool {
	if x != nil && x.PackageResetOnIdle != nil {
		return *x.PackageResetOnIdle
	}
	return false
}

type LiveConfig_MiscConfig struct {
	state                             protoimpl.MessageState `protogen:"open.v1"`
	AskToTrack                        *bool                  `protobuf:"varint,1,opt,name=ask_to_track,json=askToTrack" json:"ask_to_track,omitempty"`
	AskToTrackMinSoulEggs             *float64               `protobuf:"fixed64,2,opt,name=ask_to_track_min_soul_eggs,json=askToTrackMinSoulEggs" json:"ask_to_track_min_soul_eggs,omitempty"`
	AskToTrackMessage                 *string                `protobuf:"bytes,3,opt,name=ask_to_track_message,json=askToTrackMessage" json:"ask_to_track_message,omitempty"`
	AskToTrackShowPreDialog           *bool                  `protobuf:"varint,4,opt,name=ask_to_track_show_pre_dialog,json=askToTrackShowPreDialog" json:"ask_to_track_show_pre_dialog,omitempty"`
	AskToTrackAfterPrivacy            *bool                  `protobuf:"varint,5,opt,name=ask_to_track_after_privacy,json=askToTrackAfterPrivacy" json:"ask_to_track_after_privacy,omitempty"`
	ChickenRunBoostPercentage         *float64               `protobuf:"fixed64,6,opt,name=chicken_run_boost_percentage,json=chickenRunBoostPercentage" json:"chicken_run_boost_percentage,omitempty"`
	ShellsIntroTickets                *uint32                `protobuf:"varint,7,opt,name=shells_intro_tickets,json=shellsIntroTickets" json:"shells_intro_tickets,omitempty"`
	ShellsMaxFreeChickenConfigs       *uint32                `protobuf:"varint,8,opt,name=shells_max_free_chicken_configs,json=shellsMaxFreeChickenConfigs" json:"shells_max_free_chicken_configs,omitempty"`
	ShellsIntroAlertThreshold         *uint32                `protobuf:"varint,9,opt,name=shells_intro_alert_threshold,json=shellsIntroAlertThreshold" json:"shells_intro_alert_threshold,omitempty"`
	ShellsLightingControlsPrice       *uint32                `protobuf:"varint,14,opt,name=shells_lighting_controls_price,json=shellsLightingControlsPrice,def=175" json:"shells_lighting_controls_price,omitempty"`
	ContractsExpertLeagueMinSoulPower *float64               `protobuf:"fixed64,10,opt,name=contracts_expert_league_min_soul_power,json=contractsExpertLeagueMinSoulPower" json:"contracts_expert_league_min_soul_power,omitempty"`
	NewPlayerEventDuration            *float64               `protobuf:"fixed64,11,opt,name=new_player_event_duration,json=newPlayerEventDuration" json:"new_player_event_duration,omitempty"`
	ContractsClubAvailable            *bool                  `protobuf:"varint,12,opt,name=contracts_club_available,json=contractsClubAvailable" json:"contracts_club_available,omitempty"`
	ContractsBeta                     *bool                  `protobuf:"varint,13,opt,name=contracts_beta,json=contractsBeta" json:"contracts_beta,omitempty"`
	SeasonRewardsEnabled              *bool                  `protobuf:"varint,15,opt,name=season_rewards_enabled,json=seasonRewardsEnabled" json:"season_rewards_enabled,omitempty"`
	unknownFields                     protoimpl.UnknownFields
	sizeCache                         protoimpl.SizeCache
}

// Default values for LiveConfig_MiscConfig fields.
const (
	Default_LiveConfig_MiscConfig_ShellsLightingControlsPrice = uint32(175)
)

func (x *LiveConfig_MiscConfig) Reset() {
	*x = LiveConfig_MiscConfig{}
	mi := &file_go_ei_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_MiscConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_MiscConfig) ProtoMessage() {}

func (x *LiveConfig_MiscConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_MiscConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_MiscConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 2}
}

func (x *LiveConfig_MiscConfig) GetAskToTrack() bool {
	if x != nil && x.AskToTrack != nil {
		return *x.AskToTrack
	}
	return false
}

func (x *LiveConfig_MiscConfig) GetAskToTrackMinSoulEggs() float64 {
	if x != nil && x.AskToTrackMinSoulEggs != nil {
		return *x.AskToTrackMinSoulEggs
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetAskToTrackMessage() string {
	if x != nil && x.AskToTrackMessage != nil {
		return *x.AskToTrackMessage
	}
	return ""
}

func (x *LiveConfig_MiscConfig) GetAskToTrackShowPreDialog() bool {
	if x != nil && x.AskToTrackShowPreDialog != nil {
		return *x.AskToTrackShowPreDialog
	}
	return false
}

func (x *LiveConfig_MiscConfig) GetAskToTrackAfterPrivacy() bool {
	if x != nil && x.AskToTrackAfterPrivacy != nil {
		return *x.AskToTrackAfterPrivacy
	}
	return false
}

func (x *LiveConfig_MiscConfig) GetChickenRunBoostPercentage() float64 {
	if x != nil && x.ChickenRunBoostPercentage != nil {
		return *x.ChickenRunBoostPercentage
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetShellsIntroTickets() uint32 {
	if x != nil && x.ShellsIntroTickets != nil {
		return *x.ShellsIntroTickets
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetShellsMaxFreeChickenConfigs() uint32 {
	if x != nil && x.ShellsMaxFreeChickenConfigs != nil {
		return *x.ShellsMaxFreeChickenConfigs
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetShellsIntroAlertThreshold() uint32 {
	if x != nil && x.ShellsIntroAlertThreshold != nil {
		return *x.ShellsIntroAlertThreshold
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetShellsLightingControlsPrice() uint32 {
	if x != nil && x.ShellsLightingControlsPrice != nil {
		return *x.ShellsLightingControlsPrice
	}
	return Default_LiveConfig_MiscConfig_ShellsLightingControlsPrice
}

func (x *LiveConfig_MiscConfig) GetContractsExpertLeagueMinSoulPower() float64 {
	if x != nil && x.ContractsExpertLeagueMinSoulPower != nil {
		return *x.ContractsExpertLeagueMinSoulPower
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetNewPlayerEventDuration() float64 {
	if x != nil && x.NewPlayerEventDuration != nil {
		return *x.NewPlayerEventDuration
	}
	return 0
}

func (x *LiveConfig_MiscConfig) GetContractsClubAvailable() bool {
	if x != nil && x.ContractsClubAvailable != nil {
		return *x.ContractsClubAvailable
	}
	return false
}

func (x *LiveConfig_MiscConfig) GetContractsBeta() bool {
	if x != nil && x.ContractsBeta != nil {
		return *x.ContractsBeta
	}
	return false
}

func (x *LiveConfig_MiscConfig) GetSeasonRewardsEnabled() bool {
	if x != nil && x.SeasonRewardsEnabled != nil {
		return *x.SeasonRewardsEnabled
	}
	return false
}

type LiveConfig_HelpConfig struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	VideoInfos    []*LiveConfig_HelpConfig_HowToVideoInfo `protobuf:"bytes,1,rep,name=video_infos,json=videoInfos" json:"video_infos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveConfig_HelpConfig) Reset() {
	*x = LiveConfig_HelpConfig{}
	mi := &file_go_ei_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_HelpConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_HelpConfig) ProtoMessage() {}

func (x *LiveConfig_HelpConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_HelpConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_HelpConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 3}
}

func (x *LiveConfig_HelpConfig) GetVideoInfos() []*LiveConfig_HelpConfig_HowToVideoInfo {
	if x != nil {
		return x.VideoInfos
	}
	return nil
}

type LiveConfig_BoostsConfig_ItemConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BoostId       *string                `protobuf:"bytes,1,opt,name=boost_id,json=boostId" json:"boost_id,omitempty"`
	Price         *uint32                `protobuf:"varint,2,opt,name=price" json:"price,omitempty"`
	TokenPrice    *uint32                `protobuf:"varint,3,opt,name=token_price,json=tokenPrice" json:"token_price,omitempty"`
	SeRequired    *float64               `protobuf:"fixed64,4,opt,name=se_required,json=seRequired" json:"se_required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveConfig_BoostsConfig_ItemConfig) Reset() {
	*x = LiveConfig_BoostsConfig_ItemConfig{}
	mi := &file_go_ei_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_BoostsConfig_ItemConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_BoostsConfig_ItemConfig) ProtoMessage() {}

func (x *LiveConfig_BoostsConfig_ItemConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_BoostsConfig_ItemConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_BoostsConfig_ItemConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 0, 0}
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetBoostId() string {
	if x != nil && x.BoostId != nil {
		return *x.BoostId
	}
	return ""
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetTokenPrice() uint32 {
	if x != nil && x.TokenPrice != nil {
		return *x.TokenPrice
	}
	return 0
}

func (x *LiveConfig_BoostsConfig_ItemConfig) GetSeRequired() float64 {
	if x != nil && x.SeRequired != nil {
		return *x.SeRequired
	}
	return 0
}

type LiveConfig_GiftConfig_GiftValueConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GiftId        *string                `protobuf:"bytes,1,opt,name=gift_id,json=giftId" json:"gift_id,omitempty"`
	Amount        *float64               `protobuf:"fixed64,4,opt,name=amount" json:"amount,omitempty"`
	RandMin       *float64               `protobuf:"fixed64,2,opt,name=rand_min,json=randMin" json:"rand_min,omitempty"`
	RandMax       *float64               `protobuf:"fixed64,3,opt,name=rand_max,json=randMax" json:"rand_max,omitempty"`
	VideoMin      *float64               `protobuf:"fixed64,5,opt,name=video_min,json=videoMin" json:"video_min,omitempty"`
	VideoMax      *float64               `protobuf:"fixed64,6,opt,name=video_max,json=videoMax" json:"video_max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) Reset() {
	*x = LiveConfig_GiftConfig_GiftValueConfig{}
	mi := &file_go_ei_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_GiftConfig_GiftValueConfig) ProtoMessage() {}

func (x *LiveConfig_GiftConfig_GiftValueConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_GiftConfig_GiftValueConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_GiftConfig_GiftValueConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 1, 0}
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetGiftId() string {
	if x != nil && x.GiftId != nil {
		return *x.GiftId
	}
	return ""
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetRandMin() float64 {
	if x != nil && x.RandMin != nil {
		return *x.RandMin
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetRandMax() float64 {
	if x != nil && x.RandMax != nil {
		return *x.RandMax
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetVideoMin() float64 {
	if x != nil && x.VideoMin != nil {
		return *x.VideoMin
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftValueConfig) GetVideoMax() float64 {
	if x != nil && x.VideoMax != nil {
		return *x.VideoMax
	}
	return 0
}

type LiveConfig_GiftConfig_GiftMuConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MinSpent      *float64               `protobuf:"fixed64,1,opt,name=min_spent,json=minSpent" json:"min_spent,omitempty"`
	MaxSpent      *float64               `protobuf:"fixed64,2,opt,name=max_spent,json=maxSpent" json:"max_spent,omitempty"`
	OverallMult   *float64               `protobuf:"fixed64,3,opt,name=overall_mult,json=overallMult" json:"overall_mult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveConfig_GiftConfig_GiftMuConfig) Reset() {
	*x = LiveConfig_GiftConfig_GiftMuConfig{}
	mi := &file_go_ei_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_GiftConfig_GiftMuConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_GiftConfig_GiftMuConfig) ProtoMessage() {}

func (x *LiveConfig_GiftConfig_GiftMuConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_GiftConfig_GiftMuConfig.ProtoReflect.Descriptor instead.
func (*LiveConfig_GiftConfig_GiftMuConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 1, 1}
}

func (x *LiveConfig_GiftConfig_GiftMuConfig) GetMinSpent() float64 {
	if x != nil && x.MinSpent != nil {
		return *x.MinSpent
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftMuConfig) GetMaxSpent() float64 {
	if x != nil && x.MaxSpent != nil {
		return *x.MaxSpent
	}
	return 0
}

func (x *LiveConfig_GiftConfig_GiftMuConfig) GetOverallMult() float64 {
	if x != nil && x.OverallMult != nil {
		return *x.OverallMult
	}
	return 0
}

type LiveConfig_HelpConfig_HowToVideoInfo struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Type          *LiveConfig_HelpConfig_HowToVideoInfo_Type `protobuf:"varint,6,opt,name=type,enum=ei.LiveConfig_HelpConfig_HowToVideoInfo_Type" json:"type,omitempty"`
	Name          *string                                    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description   *string                                    `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Duration      *string                                    `protobuf:"bytes,5,opt,name=duration" json:"duration,omitempty"`
	Url           *string                                    `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	SoulEggs      *float64                                   `protobuf:"fixed64,4,opt,name=soul_eggs,json=soulEggs" json:"soul_eggs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) Reset() {
	*x = LiveConfig_HelpConfig_HowToVideoInfo{}
	mi := &file_go_ei_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveConfig_HelpConfig_HowToVideoInfo) ProtoMessage() {}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveConfig_HelpConfig_HowToVideoInfo.ProtoReflect.Descriptor instead.
func (*LiveConfig_HelpConfig_HowToVideoInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{78, 3, 0}
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) GetType() LiveConfig_HelpConfig_HowToVideoInfo_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return LiveConfig_HelpConfig_HowToVideoInfo_VIDEO
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) GetDuration() string {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return ""
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *LiveConfig_HelpConfig_HowToVideoInfo) GetSoulEggs() float64 {
	if x != nil && x.SoulEggs != nil {
		return *x.SoulEggs
	}
	return 0
}

type MailState_TipState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Reads         *uint32                `protobuf:"varint,2,opt,name=reads" json:"reads,omitempty"`
	TimeRead      *float64               `protobuf:"fixed64,3,opt,name=time_read,json=timeRead" json:"time_read,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MailState_TipState) Reset() {
	*x = MailState_TipState{}
	mi := &file_go_ei_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MailState_TipState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MailState_TipState) ProtoMessage() {}

func (x *MailState_TipState) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MailState_TipState.ProtoReflect.Descriptor instead.
func (*MailState_TipState) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{82, 0}
}

func (x *MailState_TipState) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *MailState_TipState) GetReads() uint32 {
	if x != nil && x.Reads != nil {
		return *x.Reads
	}
	return 0
}

func (x *MailState_TipState) GetTimeRead() float64 {
	if x != nil && x.TimeRead != nil {
		return *x.TimeRead
	}
	return 0
}

type PeriodicalsResponse_RoyaltyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Amount        *uint32                `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeriodicalsResponse_RoyaltyInfo) Reset() {
	*x = PeriodicalsResponse_RoyaltyInfo{}
	mi := &file_go_ei_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeriodicalsResponse_RoyaltyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeriodicalsResponse_RoyaltyInfo) ProtoMessage() {}

func (x *PeriodicalsResponse_RoyaltyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeriodicalsResponse_RoyaltyInfo.ProtoReflect.Descriptor instead.
func (*PeriodicalsResponse_RoyaltyInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{83, 0}
}

func (x *PeriodicalsResponse_RoyaltyInfo) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *PeriodicalsResponse_RoyaltyInfo) GetAmount() uint32 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type ArtifactsClientInfo_LaunchCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ship          *MissionInfo_Spaceship `protobuf:"varint,1,opt,name=ship,enum=ei.MissionInfo_Spaceship" json:"ship,omitempty"`
	NumLaunches   *uint32                `protobuf:"varint,2,opt,name=num_launches,json=numLaunches" json:"num_launches,omitempty"`
	LaunchPoints  *float64               `protobuf:"fixed64,3,opt,name=launch_points,json=launchPoints" json:"launch_points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactsClientInfo_LaunchCount) Reset() {
	*x = ArtifactsClientInfo_LaunchCount{}
	mi := &file_go_ei_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsClientInfo_LaunchCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsClientInfo_LaunchCount) ProtoMessage() {}

func (x *ArtifactsClientInfo_LaunchCount) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsClientInfo_LaunchCount.ProtoReflect.Descriptor instead.
func (*ArtifactsClientInfo_LaunchCount) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{90, 0}
}

func (x *ArtifactsClientInfo_LaunchCount) GetShip() MissionInfo_Spaceship {
	if x != nil && x.Ship != nil {
		return *x.Ship
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *ArtifactsClientInfo_LaunchCount) GetNumLaunches() uint32 {
	if x != nil && x.NumLaunches != nil {
		return *x.NumLaunches
	}
	return 0
}

func (x *ArtifactsClientInfo_LaunchCount) GetLaunchPoints() float64 {
	if x != nil && x.LaunchPoints != nil {
		return *x.LaunchPoints
	}
	return 0
}

type MissionInfo_Fuel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Egg           *Egg                   `protobuf:"varint,1,opt,name=egg,enum=ei.Egg" json:"egg,omitempty"`
	Amount        *float64               `protobuf:"fixed64,2,opt,name=amount" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MissionInfo_Fuel) Reset() {
	*x = MissionInfo_Fuel{}
	mi := &file_go_ei_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissionInfo_Fuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo_Fuel) ProtoMessage() {}

func (x *MissionInfo_Fuel) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo_Fuel.ProtoReflect.Descriptor instead.
func (*MissionInfo_Fuel) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{91, 0}
}

func (x *MissionInfo_Fuel) GetEgg() Egg {
	if x != nil && x.Egg != nil {
		return *x.Egg
	}
	return Egg_EDIBLE
}

func (x *MissionInfo_Fuel) GetAmount() float64 {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return 0
}

type ArtifactsConfigurationResponse_MissionParameters struct {
	state                    protoimpl.MessageState                                       `protogen:"open.v1"`
	Ship                     *MissionInfo_Spaceship                                       `protobuf:"varint,1,opt,name=ship,enum=ei.MissionInfo_Spaceship" json:"ship,omitempty"`
	Durations                []*ArtifactsConfigurationResponse_MissionParameters_Duration `protobuf:"bytes,3,rep,name=durations" json:"durations,omitempty"`
	LevelMissionRequirements []uint32                                                     `protobuf:"varint,4,rep,name=level_mission_requirements,json=levelMissionRequirements" json:"level_mission_requirements,omitempty"`
	Capacity_DEPRECATED      *uint32                                                      `protobuf:"varint,2,opt,name=capacity_DEPRECATED,json=capacityDEPRECATED" json:"capacity_DEPRECATED,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ArtifactsConfigurationResponse_MissionParameters) Reset() {
	*x = ArtifactsConfigurationResponse_MissionParameters{}
	mi := &file_go_ei_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsConfigurationResponse_MissionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_MissionParameters) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_MissionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_MissionParameters.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_MissionParameters) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{97, 0}
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetShip() MissionInfo_Spaceship {
	if x != nil && x.Ship != nil {
		return *x.Ship
	}
	return MissionInfo_CHICKEN_ONE
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetDurations() []*ArtifactsConfigurationResponse_MissionParameters_Duration {
	if x != nil {
		return x.Durations
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetLevelMissionRequirements() []uint32 {
	if x != nil {
		return x.LevelMissionRequirements
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_MissionParameters) GetCapacity_DEPRECATED() uint32 {
	if x != nil && x.Capacity_DEPRECATED != nil {
		return *x.Capacity_DEPRECATED
	}
	return 0
}

type ArtifactsConfigurationResponse_ArtifactParameters struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Spec                *ArtifactSpec          `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	BaseQuality         *float64               `protobuf:"fixed64,2,opt,name=base_quality,json=baseQuality" json:"base_quality,omitempty"`
	OddsMultiplier      *float64               `protobuf:"fixed64,4,opt,name=odds_multiplier,json=oddsMultiplier" json:"odds_multiplier,omitempty"`
	Value               *float64               `protobuf:"fixed64,3,opt,name=value" json:"value,omitempty"`
	CraftingPrice       *float64               `protobuf:"fixed64,5,opt,name=crafting_price,json=craftingPrice" json:"crafting_price,omitempty"`
	CraftingPriceLow    *float64               `protobuf:"fixed64,6,opt,name=crafting_price_low,json=craftingPriceLow" json:"crafting_price_low,omitempty"`
	CraftingPriceDomain *uint32                `protobuf:"varint,7,opt,name=crafting_price_domain,json=craftingPriceDomain" json:"crafting_price_domain,omitempty"`
	CraftingPriceCurve  *float64               `protobuf:"fixed64,8,opt,name=crafting_price_curve,json=craftingPriceCurve" json:"crafting_price_curve,omitempty"`
	CraftingXp          *uint64                `protobuf:"varint,9,opt,name=crafting_xp,json=craftingXp" json:"crafting_xp,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) Reset() {
	*x = ArtifactsConfigurationResponse_ArtifactParameters{}
	mi := &file_go_ei_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_ArtifactParameters) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_ArtifactParameters.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_ArtifactParameters) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{97, 1}
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetBaseQuality() float64 {
	if x != nil && x.BaseQuality != nil {
		return *x.BaseQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetOddsMultiplier() float64 {
	if x != nil && x.OddsMultiplier != nil {
		return *x.OddsMultiplier
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetValue() float64 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPrice() float64 {
	if x != nil && x.CraftingPrice != nil {
		return *x.CraftingPrice
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceLow() float64 {
	if x != nil && x.CraftingPriceLow != nil {
		return *x.CraftingPriceLow
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceDomain() uint32 {
	if x != nil && x.CraftingPriceDomain != nil {
		return *x.CraftingPriceDomain
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingPriceCurve() float64 {
	if x != nil && x.CraftingPriceCurve != nil {
		return *x.CraftingPriceCurve
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_ArtifactParameters) GetCraftingXp() uint64 {
	if x != nil && x.CraftingXp != nil {
		return *x.CraftingXp
	}
	return 0
}

type ArtifactsConfigurationResponse_CraftingLevelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	XpRequired    *float64               `protobuf:"fixed64,1,opt,name=xp_required,json=xpRequired" json:"xp_required,omitempty"`
	RarityMult    *float32               `protobuf:"fixed32,2,opt,name=rarity_mult,json=rarityMult" json:"rarity_mult,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactsConfigurationResponse_CraftingLevelInfo) Reset() {
	*x = ArtifactsConfigurationResponse_CraftingLevelInfo{}
	mi := &file_go_ei_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsConfigurationResponse_CraftingLevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_CraftingLevelInfo) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_CraftingLevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_CraftingLevelInfo.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_CraftingLevelInfo) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{97, 2}
}

func (x *ArtifactsConfigurationResponse_CraftingLevelInfo) GetXpRequired() float64 {
	if x != nil && x.XpRequired != nil {
		return *x.XpRequired
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_CraftingLevelInfo) GetRarityMult() float32 {
	if x != nil && x.RarityMult != nil {
		return *x.RarityMult
	}
	return 0
}

type ArtifactsConfigurationResponse_MissionParameters_Duration struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	DurationType      *MissionInfo_DurationType `protobuf:"varint,1,opt,name=duration_type,json=durationType,enum=ei.MissionInfo_DurationType" json:"duration_type,omitempty"`
	Seconds           *float64                  `protobuf:"fixed64,2,opt,name=seconds" json:"seconds,omitempty"`
	Quality           *float32                  `protobuf:"fixed32,3,opt,name=quality" json:"quality,omitempty"`
	MinQuality        *float32                  `protobuf:"fixed32,4,opt,name=min_quality,json=minQuality" json:"min_quality,omitempty"`
	MaxQuality        *float32                  `protobuf:"fixed32,5,opt,name=max_quality,json=maxQuality" json:"max_quality,omitempty"`
	Capacity          *uint32                   `protobuf:"varint,6,opt,name=capacity" json:"capacity,omitempty"`
	LevelCapacityBump *uint32                   `protobuf:"varint,7,opt,name=level_capacity_bump,json=levelCapacityBump" json:"level_capacity_bump,omitempty"`
	LevelQualityBump  *float32                  `protobuf:"fixed32,8,opt,name=level_quality_bump,json=levelQualityBump" json:"level_quality_bump,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) Reset() {
	*x = ArtifactsConfigurationResponse_MissionParameters_Duration{}
	mi := &file_go_ei_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsConfigurationResponse_MissionParameters_Duration) ProtoMessage() {}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsConfigurationResponse_MissionParameters_Duration.ProtoReflect.Descriptor instead.
func (*ArtifactsConfigurationResponse_MissionParameters_Duration) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{97, 0, 0}
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetDurationType() MissionInfo_DurationType {
	if x != nil && x.DurationType != nil {
		return *x.DurationType
	}
	return MissionInfo_SHORT
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetSeconds() float64 {
	if x != nil && x.Seconds != nil {
		return *x.Seconds
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetQuality() float32 {
	if x != nil && x.Quality != nil {
		return *x.Quality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetMinQuality() float32 {
	if x != nil && x.MinQuality != nil {
		return *x.MinQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetMaxQuality() float32 {
	if x != nil && x.MaxQuality != nil {
		return *x.MaxQuality
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetCapacity() uint32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetLevelCapacityBump() uint32 {
	if x != nil && x.LevelCapacityBump != nil {
		return *x.LevelCapacityBump
	}
	return 0
}

func (x *ArtifactsConfigurationResponse_MissionParameters_Duration) GetLevelQualityBump() float32 {
	if x != nil && x.LevelQualityBump != nil {
		return *x.LevelQualityBump
	}
	return 0
}

type CompleteMissionResponse_SecureArtifactSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Spec          *ArtifactSpec          `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	ServerId      *string                `protobuf:"bytes,2,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteMissionResponse_SecureArtifactSpec) Reset() {
	*x = CompleteMissionResponse_SecureArtifactSpec{}
	mi := &file_go_ei_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteMissionResponse_SecureArtifactSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMissionResponse_SecureArtifactSpec) ProtoMessage() {}

func (x *CompleteMissionResponse_SecureArtifactSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMissionResponse_SecureArtifactSpec.ProtoReflect.Descriptor instead.
func (*CompleteMissionResponse_SecureArtifactSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{101, 0}
}

func (x *CompleteMissionResponse_SecureArtifactSpec) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CompleteMissionResponse_SecureArtifactSpec) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

type ArtifactsDB_ActiveArtifactSlot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Occupied      *bool                  `protobuf:"varint,1,opt,name=occupied" json:"occupied,omitempty"`
	ItemId        *uint64                `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactsDB_ActiveArtifactSlot) Reset() {
	*x = ArtifactsDB_ActiveArtifactSlot{}
	mi := &file_go_ei_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsDB_ActiveArtifactSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_ActiveArtifactSlot) ProtoMessage() {}

func (x *ArtifactsDB_ActiveArtifactSlot) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_ActiveArtifactSlot.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_ActiveArtifactSlot) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{111, 0}
}

func (x *ArtifactsDB_ActiveArtifactSlot) GetOccupied() bool {
	if x != nil && x.Occupied != nil {
		return *x.Occupied
	}
	return false
}

func (x *ArtifactsDB_ActiveArtifactSlot) GetItemId() uint64 {
	if x != nil && x.ItemId != nil {
		return *x.ItemId
	}
	return 0
}

type ArtifactsDB_ActiveArtifactSet struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Slots         []*ArtifactsDB_ActiveArtifactSlot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty"`
	Uid           *uint32                           `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactsDB_ActiveArtifactSet) Reset() {
	*x = ArtifactsDB_ActiveArtifactSet{}
	mi := &file_go_ei_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsDB_ActiveArtifactSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_ActiveArtifactSet) ProtoMessage() {}

func (x *ArtifactsDB_ActiveArtifactSet) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_ActiveArtifactSet.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_ActiveArtifactSet) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{111, 1}
}

func (x *ArtifactsDB_ActiveArtifactSet) GetSlots() []*ArtifactsDB_ActiveArtifactSlot {
	if x != nil {
		return x.Slots
	}
	return nil
}

func (x *ArtifactsDB_ActiveArtifactSet) GetUid() uint32 {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return 0
}

type ArtifactsDB_CraftableArtifact struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Spec             *ArtifactSpec          `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Discovered       *bool                  `protobuf:"varint,6,opt,name=discovered" json:"discovered,omitempty"`
	Craftable        *bool                  `protobuf:"varint,4,opt,name=craftable" json:"craftable,omitempty"`
	RecipeDiscovered *bool                  `protobuf:"varint,5,opt,name=recipe_discovered,json=recipeDiscovered" json:"recipe_discovered,omitempty"`
	Seen             *bool                  `protobuf:"varint,2,opt,name=seen" json:"seen,omitempty"`
	Count            *uint32                `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArtifactsDB_CraftableArtifact) Reset() {
	*x = ArtifactsDB_CraftableArtifact{}
	mi := &file_go_ei_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsDB_CraftableArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsDB_CraftableArtifact) ProtoMessage() {}

func (x *ArtifactsDB_CraftableArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsDB_CraftableArtifact.ProtoReflect.Descriptor instead.
func (*ArtifactsDB_CraftableArtifact) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{111, 2}
}

func (x *ArtifactsDB_CraftableArtifact) GetSpec() *ArtifactSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ArtifactsDB_CraftableArtifact) GetDiscovered() bool {
	if x != nil && x.Discovered != nil {
		return *x.Discovered
	}
	return false
}

func (x *ArtifactsDB_CraftableArtifact) GetCraftable() bool {
	if x != nil && x.Craftable != nil {
		return *x.Craftable
	}
	return false
}

func (x *ArtifactsDB_CraftableArtifact) GetRecipeDiscovered() bool {
	if x != nil && x.RecipeDiscovered != nil {
		return *x.RecipeDiscovered
	}
	return false
}

func (x *ArtifactsDB_CraftableArtifact) GetSeen() bool {
	if x != nil && x.Seen != nil {
		return *x.Seen
	}
	return false
}

func (x *ArtifactsDB_CraftableArtifact) GetCount() uint32 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type ShellSpec_ShellPiece struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AssetType     *ShellSpec_AssetType   `protobuf:"varint,1,opt,name=asset_type,json=assetType,enum=ei.ShellSpec_AssetType" json:"asset_type,omitempty"`
	Dlc           *DLCItem               `protobuf:"bytes,2,opt,name=dlc" json:"dlc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellSpec_ShellPiece) Reset() {
	*x = ShellSpec_ShellPiece{}
	mi := &file_go_ei_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellSpec_ShellPiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellSpec_ShellPiece) ProtoMessage() {}

func (x *ShellSpec_ShellPiece) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellSpec_ShellPiece.ProtoReflect.Descriptor instead.
func (*ShellSpec_ShellPiece) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{122, 0}
}

func (x *ShellSpec_ShellPiece) GetAssetType() ShellSpec_AssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return ShellSpec_COOP
}

func (x *ShellSpec_ShellPiece) GetDlc() *DLCItem {
	if x != nil {
		return x.Dlc
	}
	return nil
}

type ShellSetSpec_VariationSpec struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Identifier        *string                `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	HexColor          *string                `protobuf:"bytes,2,opt,name=hex_color,json=hexColor" json:"hex_color,omitempty"`
	Price             *uint32                `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	SortPriority      *int32                 `protobuf:"varint,6,opt,name=sort_priority,json=sortPriority" json:"sort_priority,omitempty"`
	DefaultAppearance *bool                  `protobuf:"varint,4,opt,name=default_appearance,json=defaultAppearance" json:"default_appearance,omitempty"`
	CustomAppearance  *bool                  `protobuf:"varint,5,opt,name=custom_appearance,json=customAppearance" json:"custom_appearance,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ShellSetSpec_VariationSpec) Reset() {
	*x = ShellSetSpec_VariationSpec{}
	mi := &file_go_ei_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellSetSpec_VariationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellSetSpec_VariationSpec) ProtoMessage() {}

func (x *ShellSetSpec_VariationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellSetSpec_VariationSpec.ProtoReflect.Descriptor instead.
func (*ShellSetSpec_VariationSpec) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{123, 0}
}

func (x *ShellSetSpec_VariationSpec) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ShellSetSpec_VariationSpec) GetHexColor() string {
	if x != nil && x.HexColor != nil {
		return *x.HexColor
	}
	return ""
}

func (x *ShellSetSpec_VariationSpec) GetPrice() uint32 {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return 0
}

func (x *ShellSetSpec_VariationSpec) GetSortPriority() int32 {
	if x != nil && x.SortPriority != nil {
		return *x.SortPriority
	}
	return 0
}

func (x *ShellSetSpec_VariationSpec) GetDefaultAppearance() bool {
	if x != nil && x.DefaultAppearance != nil {
		return *x.DefaultAppearance
	}
	return false
}

func (x *ShellSetSpec_VariationSpec) GetCustomAppearance() bool {
	if x != nil && x.CustomAppearance != nil {
		return *x.CustomAppearance
	}
	return false
}

type ShellObjectSpec_LODPiece struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dlc           *DLCItem               `protobuf:"bytes,1,opt,name=dlc" json:"dlc,omitempty"`
	Lod           *uint32                `protobuf:"varint,2,opt,name=lod" json:"lod,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellObjectSpec_LODPiece) Reset() {
	*x = ShellObjectSpec_LODPiece{}
	mi := &file_go_ei_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellObjectSpec_LODPiece) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellObjectSpec_LODPiece) ProtoMessage() {}

func (x *ShellObjectSpec_LODPiece) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellObjectSpec_LODPiece.ProtoReflect.Descriptor instead.
func (*ShellObjectSpec_LODPiece) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{124, 0}
}

func (x *ShellObjectSpec_LODPiece) GetDlc() *DLCItem {
	if x != nil {
		return x.Dlc
	}
	return nil
}

func (x *ShellObjectSpec_LODPiece) GetLod() uint32 {
	if x != nil && x.Lod != nil {
		return *x.Lod
	}
	return 0
}

type ShellDB_ShellStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Identifier    *string                `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
	Owned         *bool                  `protobuf:"varint,2,opt,name=owned" json:"owned,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellDB_ShellStatus) Reset() {
	*x = ShellDB_ShellStatus{}
	mi := &file_go_ei_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_ShellStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_ShellStatus) ProtoMessage() {}

func (x *ShellDB_ShellStatus) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_ShellStatus.ProtoReflect.Descriptor instead.
func (*ShellDB_ShellStatus) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 0}
}

func (x *ShellDB_ShellStatus) GetIdentifier() string {
	if x != nil && x.Identifier != nil {
		return *x.Identifier
	}
	return ""
}

func (x *ShellDB_ShellStatus) GetOwned() bool {
	if x != nil && x.Owned != nil {
		return *x.Owned
	}
	return false
}

type ShellDB_ShellElementStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Element       *ShellDB_FarmElement   `protobuf:"varint,1,opt,name=element,enum=ei.ShellDB_FarmElement" json:"element,omitempty"`
	SetIdentifier *string                `protobuf:"bytes,2,opt,name=set_identifier,json=setIdentifier" json:"set_identifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellDB_ShellElementStatus) Reset() {
	*x = ShellDB_ShellElementStatus{}
	mi := &file_go_ei_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_ShellElementStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_ShellElementStatus) ProtoMessage() {}

func (x *ShellDB_ShellElementStatus) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_ShellElementStatus.ProtoReflect.Descriptor instead.
func (*ShellDB_ShellElementStatus) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 1}
}

func (x *ShellDB_ShellElementStatus) GetElement() ShellDB_FarmElement {
	if x != nil && x.Element != nil {
		return *x.Element
	}
	return ShellDB_HEN_HOUSE
}

func (x *ShellDB_ShellElementStatus) GetSetIdentifier() string {
	if x != nil && x.SetIdentifier != nil {
		return *x.SetIdentifier
	}
	return ""
}

type ShellDB_ShellSetVariationStatus struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SetIdentifier   *string                `protobuf:"bytes,1,opt,name=set_identifier,json=setIdentifier" json:"set_identifier,omitempty"`
	OwnedVariations []string               `protobuf:"bytes,2,rep,name=owned_variations,json=ownedVariations" json:"owned_variations,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShellDB_ShellSetVariationStatus) Reset() {
	*x = ShellDB_ShellSetVariationStatus{}
	mi := &file_go_ei_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_ShellSetVariationStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_ShellSetVariationStatus) ProtoMessage() {}

func (x *ShellDB_ShellSetVariationStatus) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_ShellSetVariationStatus.ProtoReflect.Descriptor instead.
func (*ShellDB_ShellSetVariationStatus) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 2}
}

func (x *ShellDB_ShellSetVariationStatus) GetSetIdentifier() string {
	if x != nil && x.SetIdentifier != nil {
		return *x.SetIdentifier
	}
	return ""
}

func (x *ShellDB_ShellSetVariationStatus) GetOwnedVariations() []string {
	if x != nil {
		return x.OwnedVariations
	}
	return nil
}

type ShellDB_FarmConfiguration struct {
	state                    protoimpl.MessageState             `protogen:"open.v1"`
	LockedElements           []ShellDB_FarmElement              `protobuf:"varint,10,rep,name=locked_elements,json=lockedElements,enum=ei.ShellDB_FarmElement" json:"locked_elements,omitempty"`
	ShellConfigs             []*ShellDB_ShellConfiguration      `protobuf:"bytes,1,rep,name=shell_configs,json=shellConfigs" json:"shell_configs,omitempty"`
	ShellSetConfigs          []*ShellDB_ShellSetConfiguration   `protobuf:"bytes,2,rep,name=shell_set_configs,json=shellSetConfigs" json:"shell_set_configs,omitempty"`
	ConfigureChickensByGroup *bool                              `protobuf:"varint,7,opt,name=configure_chickens_by_group,json=configureChickensByGroup" json:"configure_chickens_by_group,omitempty"`
	GroupConfigs             []*ShellDB_ShellGroupConfiguration `protobuf:"bytes,8,rep,name=group_configs,json=groupConfigs" json:"group_configs,omitempty"`
	ChickenConfigs           []*ShellDB_ChickenConfig           `protobuf:"bytes,9,rep,name=chicken_configs,json=chickenConfigs" json:"chicken_configs,omitempty"`
	LightingConfigEnabled    *bool                              `protobuf:"varint,11,opt,name=lighting_config_enabled,json=lightingConfigEnabled" json:"lighting_config_enabled,omitempty"`
	LightingConfig           *ShellDB_LightingConfig            `protobuf:"bytes,12,opt,name=lighting_config,json=lightingConfig" json:"lighting_config,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ShellDB_FarmConfiguration) Reset() {
	*x = ShellDB_FarmConfiguration{}
	mi := &file_go_ei_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_FarmConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_FarmConfiguration) ProtoMessage() {}

func (x *ShellDB_FarmConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_FarmConfiguration.ProtoReflect.Descriptor instead.
func (*ShellDB_FarmConfiguration) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 3}
}

func (x *ShellDB_FarmConfiguration) GetLockedElements() []ShellDB_FarmElement {
	if x != nil {
		return x.LockedElements
	}
	return nil
}

func (x *ShellDB_FarmConfiguration) GetShellConfigs() []*ShellDB_ShellConfiguration {
	if x != nil {
		return x.ShellConfigs
	}
	return nil
}

func (x *ShellDB_FarmConfiguration) GetShellSetConfigs() []*ShellDB_ShellSetConfiguration {
	if x != nil {
		return x.ShellSetConfigs
	}
	return nil
}

func (x *ShellDB_FarmConfiguration) GetConfigureChickensByGroup() bool {
	if x != nil && x.ConfigureChickensByGroup != nil {
		return *x.ConfigureChickensByGroup
	}
	return false
}

func (x *ShellDB_FarmConfiguration) GetGroupConfigs() []*ShellDB_ShellGroupConfiguration {
	if x != nil {
		return x.GroupConfigs
	}
	return nil
}

func (x *ShellDB_FarmConfiguration) GetChickenConfigs() []*ShellDB_ChickenConfig {
	if x != nil {
		return x.ChickenConfigs
	}
	return nil
}

func (x *ShellDB_FarmConfiguration) GetLightingConfigEnabled() bool {
	if x != nil && x.LightingConfigEnabled != nil {
		return *x.LightingConfigEnabled
	}
	return false
}

func (x *ShellDB_FarmConfiguration) GetLightingConfig() *ShellDB_LightingConfig {
	if x != nil {
		return x.LightingConfig
	}
	return nil
}

type ShellDB_SavedFarmConfiguration struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	Id             *string                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Config         *ShellDB_FarmConfiguration `protobuf:"bytes,2,opt,name=config" json:"config,omitempty"`
	ClientSaveTime *float64                   `protobuf:"fixed64,3,opt,name=client_save_time,json=clientSaveTime" json:"client_save_time,omitempty"`
	ServerId       *string                    `protobuf:"bytes,4,opt,name=server_id,json=serverId" json:"server_id,omitempty"`
	DisplayName    *string                    `protobuf:"bytes,5,opt,name=display_name,json=displayName" json:"display_name,omitempty"`
	Purchased      *bool                      `protobuf:"varint,6,opt,name=purchased" json:"purchased,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShellDB_SavedFarmConfiguration) Reset() {
	*x = ShellDB_SavedFarmConfiguration{}
	mi := &file_go_ei_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_SavedFarmConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_SavedFarmConfiguration) ProtoMessage() {}

func (x *ShellDB_SavedFarmConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_SavedFarmConfiguration.ProtoReflect.Descriptor instead.
func (*ShellDB_SavedFarmConfiguration) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 4}
}

func (x *ShellDB_SavedFarmConfiguration) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ShellDB_SavedFarmConfiguration) GetConfig() *ShellDB_FarmConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ShellDB_SavedFarmConfiguration) GetClientSaveTime() float64 {
	if x != nil && x.ClientSaveTime != nil {
		return *x.ClientSaveTime
	}
	return 0
}

func (x *ShellDB_SavedFarmConfiguration) GetServerId() string {
	if x != nil && x.ServerId != nil {
		return *x.ServerId
	}
	return ""
}

func (x *ShellDB_SavedFarmConfiguration) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *ShellDB_SavedFarmConfiguration) GetPurchased() bool {
	if x != nil && x.Purchased != nil {
		return *x.Purchased
	}
	return false
}

type ShellDB_ShellConfiguration struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AssetType       *ShellSpec_AssetType   `protobuf:"varint,1,opt,name=asset_type,json=assetType,enum=ei.ShellSpec_AssetType" json:"asset_type,omitempty"`
	Index           *uint32                `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	ShellIdentifier *string                `protobuf:"bytes,3,opt,name=shell_identifier,json=shellIdentifier" json:"shell_identifier,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShellDB_ShellConfiguration) Reset() {
	*x = ShellDB_ShellConfiguration{}
	mi := &file_go_ei_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_ShellConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_ShellConfiguration) ProtoMessage() {}

func (x *ShellDB_ShellConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_ShellConfiguration.ProtoReflect.Descriptor instead.
func (*ShellDB_ShellConfiguration) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 5}
}

func (x *ShellDB_ShellConfiguration) GetAssetType() ShellSpec_AssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return ShellSpec_COOP
}

func (x *ShellDB_ShellConfiguration) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ShellDB_ShellConfiguration) GetShellIdentifier() string {
	if x != nil && x.ShellIdentifier != nil {
		return *x.ShellIdentifier
	}
	return ""
}

type ShellDB_ShellSetConfiguration struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Element             *ShellDB_FarmElement   `protobuf:"varint,1,opt,name=element,enum=ei.ShellDB_FarmElement" json:"element,omitempty"`
	Index               *uint32                `protobuf:"varint,2,opt,name=index" json:"index,omitempty"`
	ShellSetIdentifier  *string                `protobuf:"bytes,3,opt,name=shell_set_identifier,json=shellSetIdentifier" json:"shell_set_identifier,omitempty"`
	VariationIdentifier *string                `protobuf:"bytes,4,opt,name=variation_identifier,json=variationIdentifier" json:"variation_identifier,omitempty"`
	DecoratorIdentifier *string                `protobuf:"bytes,5,opt,name=decorator_identifier,json=decoratorIdentifier" json:"decorator_identifier,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ShellDB_ShellSetConfiguration) Reset() {
	*x = ShellDB_ShellSetConfiguration{}
	mi := &file_go_ei_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_ShellSetConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_ShellSetConfiguration) ProtoMessage() {}

func (x *ShellDB_ShellSetConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_ShellSetConfiguration.ProtoReflect.Descriptor instead.
func (*ShellDB_ShellSetConfiguration) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 6}
}

func (x *ShellDB_ShellSetConfiguration) GetElement() ShellDB_FarmElement {
	if x != nil && x.Element != nil {
		return *x.Element
	}
	return ShellDB_HEN_HOUSE
}

func (x *ShellDB_ShellSetConfiguration) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ShellDB_ShellSetConfiguration) GetShellSetIdentifier() string {
	if x != nil && x.ShellSetIdentifier != nil {
		return *x.ShellSetIdentifier
	}
	return ""
}

func (x *ShellDB_ShellSetConfiguration) GetVariationIdentifier() string {
	if x != nil && x.VariationIdentifier != nil {
		return *x.VariationIdentifier
	}
	return ""
}

func (x *ShellDB_ShellSetConfiguration) GetDecoratorIdentifier() string {
	if x != nil && x.DecoratorIdentifier != nil {
		return *x.DecoratorIdentifier
	}
	return ""
}

type ShellDB_ShellGroupConfiguration struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AssetType       *ShellSpec_AssetType   `protobuf:"varint,1,opt,name=asset_type,json=assetType,enum=ei.ShellSpec_AssetType" json:"asset_type,omitempty"`
	GroupIdentifier *string                `protobuf:"bytes,2,opt,name=group_identifier,json=groupIdentifier" json:"group_identifier,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShellDB_ShellGroupConfiguration) Reset() {
	*x = ShellDB_ShellGroupConfiguration{}
	mi := &file_go_ei_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_ShellGroupConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_ShellGroupConfiguration) ProtoMessage() {}

func (x *ShellDB_ShellGroupConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_ShellGroupConfiguration.ProtoReflect.Descriptor instead.
func (*ShellDB_ShellGroupConfiguration) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 7}
}

func (x *ShellDB_ShellGroupConfiguration) GetAssetType() ShellSpec_AssetType {
	if x != nil && x.AssetType != nil {
		return *x.AssetType
	}
	return ShellSpec_COOP
}

func (x *ShellDB_ShellGroupConfiguration) GetGroupIdentifier() string {
	if x != nil && x.GroupIdentifier != nil {
		return *x.GroupIdentifier
	}
	return ""
}

type ShellDB_ChickenConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ChickenIdentifier *string                `protobuf:"bytes,1,opt,name=chicken_identifier,json=chickenIdentifier" json:"chicken_identifier,omitempty"`
	HatIdentifier     *string                `protobuf:"bytes,2,opt,name=hat_identifier,json=hatIdentifier" json:"hat_identifier,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ShellDB_ChickenConfig) Reset() {
	*x = ShellDB_ChickenConfig{}
	mi := &file_go_ei_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_ChickenConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_ChickenConfig) ProtoMessage() {}

func (x *ShellDB_ChickenConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_ChickenConfig.ProtoReflect.Descriptor instead.
func (*ShellDB_ChickenConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 8}
}

func (x *ShellDB_ChickenConfig) GetChickenIdentifier() string {
	if x != nil && x.ChickenIdentifier != nil {
		return *x.ChickenIdentifier
	}
	return ""
}

func (x *ShellDB_ChickenConfig) GetHatIdentifier() string {
	if x != nil && x.HatIdentifier != nil {
		return *x.HatIdentifier
	}
	return ""
}

type ShellDB_LightingConfig struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	LightDir              *Vector3               `protobuf:"bytes,1,opt,name=light_dir,json=lightDir" json:"light_dir,omitempty"`
	LightDirectColor      *Vector4               `protobuf:"bytes,2,opt,name=light_direct_color,json=lightDirectColor" json:"light_direct_color,omitempty"`
	LightDirectIntensity  *float32               `protobuf:"fixed32,3,opt,name=light_direct_intensity,json=lightDirectIntensity" json:"light_direct_intensity,omitempty"`
	LightAmbientColor     *Vector4               `protobuf:"bytes,4,opt,name=light_ambient_color,json=lightAmbientColor" json:"light_ambient_color,omitempty"`
	LightAmbientIntensity *float32               `protobuf:"fixed32,5,opt,name=light_ambient_intensity,json=lightAmbientIntensity" json:"light_ambient_intensity,omitempty"`
	FogColor              *Vector4               `protobuf:"bytes,6,opt,name=fog_color,json=fogColor" json:"fog_color,omitempty"`
	FogNear               *float32               `protobuf:"fixed32,7,opt,name=fog_near,json=fogNear" json:"fog_near,omitempty"`
	FogFar                *float32               `protobuf:"fixed32,8,opt,name=fog_far,json=fogFar" json:"fog_far,omitempty"`
	FogDensity            *float32               `protobuf:"fixed32,9,opt,name=fog_density,json=fogDensity" json:"fog_density,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ShellDB_LightingConfig) Reset() {
	*x = ShellDB_LightingConfig{}
	mi := &file_go_ei_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellDB_LightingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellDB_LightingConfig) ProtoMessage() {}

func (x *ShellDB_LightingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellDB_LightingConfig.ProtoReflect.Descriptor instead.
func (*ShellDB_LightingConfig) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{127, 9}
}

func (x *ShellDB_LightingConfig) GetLightDir() *Vector3 {
	if x != nil {
		return x.LightDir
	}
	return nil
}

func (x *ShellDB_LightingConfig) GetLightDirectColor() *Vector4 {
	if x != nil {
		return x.LightDirectColor
	}
	return nil
}

func (x *ShellDB_LightingConfig) GetLightDirectIntensity() float32 {
	if x != nil && x.LightDirectIntensity != nil {
		return *x.LightDirectIntensity
	}
	return 0
}

func (x *ShellDB_LightingConfig) GetLightAmbientColor() *Vector4 {
	if x != nil {
		return x.LightAmbientColor
	}
	return nil
}

func (x *ShellDB_LightingConfig) GetLightAmbientIntensity() float32 {
	if x != nil && x.LightAmbientIntensity != nil {
		return *x.LightAmbientIntensity
	}
	return 0
}

func (x *ShellDB_LightingConfig) GetFogColor() *Vector4 {
	if x != nil {
		return x.FogColor
	}
	return nil
}

func (x *ShellDB_LightingConfig) GetFogNear() float32 {
	if x != nil && x.FogNear != nil {
		return *x.FogNear
	}
	return 0
}

func (x *ShellDB_LightingConfig) GetFogFar() float32 {
	if x != nil && x.FogFar != nil {
		return *x.FogFar
	}
	return 0
}

func (x *ShellDB_LightingConfig) GetFogDensity() float32 {
	if x != nil && x.FogDensity != nil {
		return *x.FogDensity
	}
	return 0
}

type ShellPopularityStats_Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Element       *ShellDB_FarmElement   `protobuf:"varint,2,opt,name=element,enum=ei.ShellDB_FarmElement" json:"element,omitempty"`
	Spent         *uint64                `protobuf:"varint,3,opt,name=spent" json:"spent,omitempty"`
	Count         *uint64                `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShellPopularityStats_Entry) Reset() {
	*x = ShellPopularityStats_Entry{}
	mi := &file_go_ei_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShellPopularityStats_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShellPopularityStats_Entry) ProtoMessage() {}

func (x *ShellPopularityStats_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShellPopularityStats_Entry.ProtoReflect.Descriptor instead.
func (*ShellPopularityStats_Entry) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{128, 0}
}

func (x *ShellPopularityStats_Entry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ShellPopularityStats_Entry) GetElement() ShellDB_FarmElement {
	if x != nil && x.Element != nil {
		return *x.Element
	}
	return ShellDB_HEN_HOUSE
}

func (x *ShellPopularityStats_Entry) GetSpent() uint64 {
	if x != nil && x.Spent != nil {
		return *x.Spent
	}
	return 0
}

func (x *ShellPopularityStats_Entry) GetCount() uint64 {
	if x != nil && x.Count != nil {
		return *x.Count
	}
	return 0
}

type UserSubscriptionInfo_HistoryEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *float64               `protobuf:"fixed64,1,opt,name=timestamp" json:"timestamp,omitempty"`
	MessageId     *string                `protobuf:"bytes,2,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
	Message       *string                `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSubscriptionInfo_HistoryEntry) Reset() {
	*x = UserSubscriptionInfo_HistoryEntry{}
	mi := &file_go_ei_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSubscriptionInfo_HistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubscriptionInfo_HistoryEntry) ProtoMessage() {}

func (x *UserSubscriptionInfo_HistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_go_ei_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubscriptionInfo_HistoryEntry.ProtoReflect.Descriptor instead.
func (*UserSubscriptionInfo_HistoryEntry) Descriptor() ([]byte, []int) {
	return file_go_ei_proto_rawDescGZIP(), []int{137, 0}
}

func (x *UserSubscriptionInfo_HistoryEntry) GetTimestamp() float64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *UserSubscriptionInfo_HistoryEntry) GetMessageId() string {
	if x != nil && x.MessageId != nil {
		return *x.MessageId
	}
	return ""
}

func (x *UserSubscriptionInfo_HistoryEntry) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

var File_go_ei_proto protoreflect.FileDescriptor

var file_go_ei_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x67, 0x6f, 0x2f, 0x65, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x65,
	0x69, 0x22, 0x33, 0x0a, 0x07, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x12, 0x0c, 0x0a, 0x01,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x41, 0x0a, 0x07, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x34, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12,
	0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a,
	0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x12, 0x0c, 0x0a, 0x01, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x77, 0x22, 0xda, 0x4c, 0x0a, 0x06, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x73,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x12, 0x2f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
	0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x08, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x67, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x67, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x27,
	0x0a, 0x03, 0x73, 0x69, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x69,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x73, 0x69, 0x6d, 0x12, 0x2b, 0x0a, 0x05, 0x66, 0x61, 0x72, 0x6d, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x66,
	0x61, 0x72, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4d, 0x69, 0x73,
	0x63, 0x52, 0x04, 0x6d, 0x69, 0x73, 0x63, 0x12, 0x2d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e,
	0x4d, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x5f, 0x64, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65,
	0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x52, 0x0b, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x62, 0x12, 0x26, 0x0a, 0x08, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x62, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65,
	0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x52, 0x07, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x44, 0x62, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x69, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x0a, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x69, 0x2e,
	0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x69, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a, 0x90,
	0x0b, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x66, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x73, 0x66, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x75, 0x73, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6d, 0x75,
	0x73, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x77, 0x5f, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c,
	0x6f, 0x77, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c, 0x6f, 0x77,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x35, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x75, 0x63, 0x68, 0x5f, 0x63,
	0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x74, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x43, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x42, 0x74, 0x6e, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47,
	0x69, 0x66, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f,
	0x77, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x6f,
	0x70, 0x46, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x63, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x43, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x77, 0x69, 0x64,
	0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x57, 0x69, 0x64, 0x67,
	0x65, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x6c, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x61,
	0x72, 0x6b, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63,
	0x6f, 0x70, 0x70, 0x61, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x64,
	0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x67,
	0x64, 0x70, 0x72, 0x41, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x67, 0x64, 0x70, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x64,
	0x70, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12,
	0x2c, 0x0a, 0x0e, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x1f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x61, 0x74,
	0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x79, 0x41, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x16,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x14, 0x75, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x64,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x1a, 0xca, 0x03, 0x0a, 0x08, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x54, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77,
	0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x68, 0x61, 0x62, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x75, 0x79, 0x48, 0x61, 0x62,
	0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x69, 0x72, 0x65, 0x5f, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x68, 0x69, 0x72, 0x65, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x68,
	0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x71, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x71, 0x4e, 0x75, 0x6d, 0x53, 0x68,
	0x6f, 0x77, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x68, 0x6f,
	0x77, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x4e, 0x75, 0x6d, 0x53, 0x68,
	0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x74, 0x61, 0x62, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x54, 0x61, 0x62, 0x53, 0x68,
	0x6f, 0x77, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x68,
	0x6f, 0x77, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x70,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6a, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x61,
	0x72, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x75, 0x74, 0x6f, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x0d, 0x74, 0x75, 0x74, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x1a, 0x83,
	0x06, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x67, 0x67, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x5f, 0x4f, 0x4c, 0x44, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0c, 0x65, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x4f, 0x4c, 0x44, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x09, 0x65, 0x67, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x36, 0x0a,
	0x17, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b,
	0x65, 0x6e, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e,
	0x73, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6c, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x69,
	0x6c, 0x6c, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x31,
	0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x77, 0x61, 0x72,
	0x70, 0x31, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x38,
	0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x77, 0x61, 0x72,
	0x70, 0x38, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6f, 0x6f,
	0x73, 0x74, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x74,
	0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64,
	0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x45, 0x6c, 0x69,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69,
	0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x72,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x70,
	0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x73, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x69, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x67, 0x67,
	0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17,
	0x74, 0x69, 0x6d, 0x65, 0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x50,
	0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x6c, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x67, 0x67, 0x79, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x1a, 0xa4, 0x0f, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x61, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x67, 0x67, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65,
	0x69, 0x2e, 0x45, 0x67, 0x67, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x67, 0x67, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x65,
	0x67, 0x67, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x45, 0x67, 0x67, 0x73, 0x45, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x5f, 0x65, 0x67, 0x67,
	0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x67,
	0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x45, 0x67, 0x67, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x75, 0x6e, 0x63, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x67, 0x6f, 0x6c, 0x64,
	0x65, 0x6e, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x75,
	0x6e, 0x63, 0x6c, 0x69, 0x61, 0x6d, 0x65, 0x64, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x45, 0x67,
	0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75,
	0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x75, 0x6e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x64, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x44, 0x12,
	0x31, 0x0a, 0x15, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75,
	0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67,
	0x73, 0x44, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x67,
	0x67, 0x73, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x1a,
	0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6f,
	0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x17, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x45, 0x67, 0x67, 0x73, 0x4f,
	0x66, 0x50, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x18, 0x27, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x75,
	0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x75, 0x6e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x5f,
	0x63, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x43, 0x61, 0x73, 0x68, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x68, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x6c, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x43, 0x61, 0x73, 0x68, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x73, 0x68, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x12,
	0x33, 0x0a, 0x16, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x70, 0x69, 0x63, 0x5f,
	0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x65, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x11, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x61, 0x69,
	0x6c, 0x79, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x48,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x04, 0x6e, 0x65, 0x77, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61,
	0x72, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x46, 0x61, 0x72, 0x6d, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x67, 0x67,
	0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x65, 0x67, 0x67, 0x4d, 0x65, 0x64, 0x61, 0x6c, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x6c, 0x65, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x47,
	0x0a, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1d, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64,
	0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4f, 0x77,
	0x6e, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x45, 0x6c, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x38, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xcf, 0x06, 0x0a, 0x09,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x65,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x69, 0x74,
	0x65, 0x6d, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x12, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x65, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x10, 0x73, 0x70,
	0x65, 0x63, 0x42, 0x65, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x11, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45,
	0x67, 0x67, 0x52, 0x0f, 0x65, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x67, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x67, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x67, 0x67,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x65, 0x67, 0x67, 0x73, 0x49, 0x6e, 0x66, 0x75, 0x73, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x19,
	0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x3a,
	0x03, 0x30, 0x2e, 0x35, 0x52, 0x17, 0x66, 0x6c, 0x6f, 0x77, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x0f, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0e, 0x66, 0x75,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x74, 0x61, 0x6e, 0x6b,
	0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x6e, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x65, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x61, 0x6e, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x43, 0x0a,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x69,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x65, 0x6c, 0x65, 0x64, 0x53, 0x68,
	0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x78, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x58, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x44, 0x0a, 0x1b, 0x69, 0x6e, 0x66, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x19, 0x69, 0x6e, 0x66, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x1a, 0x76, 0x0a,
	0x06, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x4e, 0x65, 0x77, 0x1a, 0xcc, 0x0a, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x52,
	0x07, 0x65, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x61, 0x72, 0x6d,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x69,
	0x2e, 0x46, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x65, 0x61, 0x72,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x45,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x61, 0x73, 0x68, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x6e,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x43, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e,
	0x73, 0x55, 0x6e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x67, 0x67, 0x73, 0x5f, 0x6c, 0x61, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x65, 0x67, 0x67, 0x73, 0x4c, 0x61, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x67, 0x67,
	0x73, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x65, 0x67, 0x67, 0x73, 0x53, 0x68, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x67, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x65, 0x67, 0x67, 0x73, 0x50, 0x61, 0x69, 0x64, 0x46, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6c, 0x6f, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x69, 0x6c, 0x6f, 0x73, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x62, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x04, 0x68, 0x61, 0x62, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x62, 0x5f, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x68,
	0x61, 0x62, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16,
	0x68, 0x61, 0x62, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x64, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x04, 0x52, 0x14, 0x68, 0x61,
	0x62, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x68, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x63, 0x75, 0x62, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x01, 0x52, 0x17, 0x68, 0x61, 0x62, 0x49, 0x6e, 0x63, 0x75, 0x62, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x13, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x68, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x15, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x40,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2f, 0x0a,
	0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x68, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x64,
	0x65, 0x62, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43,
	0x68, 0x65, 0x61, 0x74, 0x44, 0x65, 0x62, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x44,
	0x0a, 0x1f, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x4e, 0x65, 0x78, 0x74, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0xba, 0x01, 0x0a, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a,
	0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x8a, 0x09, 0x0a, 0x04, 0x4d, 0x69, 0x73, 0x63, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x68,
	0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x62, 0x74, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x5f, 0x62,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65,
	0x6e, 0x42, 0x74, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x42, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66,
	0x69, 0x6c, 0x6c, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x66, 0x72, 0x65, 0x65, 0x48, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66,
	0x69, 0x6c, 0x6c, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x08, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x72, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x08, 0x31, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x52, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53,
	0x77, 0x61, 0x72, 0x6d, 0x46, 0x61, 0x72, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x72,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x31, 0x34,
	0x30, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x53, 0x77, 0x61, 0x72,
	0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x59, 0x0a, 0x28, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x02, 0x34, 0x35, 0x52, 0x23, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x53, 0x6f,
	0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b,
	0x5f, 0x70, 0x6f, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x50, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x6f, 0x70, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x50,
	0x6f, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x72, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x72, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x76, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x56, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6f, 0x70, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x76, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x70, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x56, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x65, 0x67, 0x67, 0x5f,
	0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x67, 0x67, 0x4f, 0x66, 0x50, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x6c, 0x5f,
	0x65, 0x67, 0x67, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x78,
	0x42, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x67, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x67, 0x67, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x73, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x1a, 0x34,
	0x0a, 0x0c, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x1a, 0x32, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x73, 0x48, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x1a, 0x78, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x3d, 0x0a, 0x0a, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x64, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x19, 0x45, 0x67, 0x67, 0x49, 0x6e,
	0x63, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb1, 0x02, 0x0a, 0x1a,
	0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x46, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x64, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x64, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x12, 0x20, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x61, 0x0a, 0x0a,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x41,
	0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x03, 0x22,
	0x4a, 0x0a, 0x0e, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x41, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x38, 0x0a, 0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x65, 0x69,
	0x2e, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5f, 0x0a, 0x0d, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x47, 0x69, 0x66, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x12, 0x2d, 0x0a,
	0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x22, 0xbb, 0x02, 0x0a,
	0x10, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69,
	0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x67,
	0x67, 0x79, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46,
	0x75, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x46,
	0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x0c, 0x49,
	0x41, 0x50, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x09, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x49, 0x41, 0x50, 0x53, 0x61,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x22, 0xfe,
	0x01, 0x0a, 0x0b, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x63, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x3e, 0x0a, 0x13, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x49,
	0x6e, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xd2, 0x03, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x70, 0x75, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x70, 0x75, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70,
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x22, 0x8f, 0x09, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x67, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x67, 0x67,
	0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x45, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67,
	0x67, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70,
	0x69, 0x67, 0x67, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f,
	0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6e, 0x75, 0x6d, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70,
	0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x69, 0x67, 0x67, 0x79,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x61, 0x70, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x69, 0x61, 0x70, 0x50, 0x61, 0x63, 0x6b, 0x73, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x72, 0x55, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x13, 0x64, 0x72, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x45,
	0x6c, 0x69, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73,
	0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x65, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x65, 0x67, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x67, 0x67, 0x6c,
	0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79,
	0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x69, 0x67,
	0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6c, 0x6c,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x74, 0x69, 0x6d,
	0x65, 0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79,
	0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x13, 0x6c, 0x6f, 0x73, 0x74, 0x50, 0x69, 0x67, 0x67, 0x79, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x36, 0x0a, 0x17, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x43, 0x68, 0x69, 0x63, 0x6b,
	0x65, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x69, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x57, 0x61, 0x72, 0x70, 0x55, 0x73, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x70, 0x5f, 0x75, 0x73,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x6e, 0x67, 0x57, 0x61,
	0x72, 0x70, 0x55, 0x73, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x63, 0x63, 0x55, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x44,
	0x45, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x45, 0x50, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x74, 0x0a, 0x19,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x15, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6b, 0x75, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x6b, 0x75, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x23, 0x0a, 0x03, 0x6c, 0x6f, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x4e,
	0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc2,
	0x02, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70,
	0x65, 0x6e, 0x74, 0x22, 0x6f, 0x0a, 0x18, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x6c, 0x6f, 0x77, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x69, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x67, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x02,
	0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x53, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x47, 0x47, 0x5f, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x49, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x48, 0x41, 0x42, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x07,
	0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x42, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10, 0x08, 0x12, 0x11,
	0x0a, 0x0d, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x43, 0x4f, 0x53, 0x54, 0x10,
	0x09, 0x22, 0xc7, 0x02, 0x0a, 0x09, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x67, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x78, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x68, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x79, 0x4d, 0x61,
	0x78, 0x58, 0x12, 0x1f, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69,
	0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x57, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x63, 0x6f, 0x6e, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x22, 0xc3, 0x0b, 0x0a, 0x08,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x03, 0x65, 0x67, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69,
	0x2e, 0x45, 0x67, 0x67, 0x52, 0x03, 0x65, 0x67, 0x67, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x67, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x67, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52,
	0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52,
	0x08, 0x67, 0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x6f, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x3a, 0x02, 0x36, 0x30, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x1c, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x03, 0x31, 0x38, 0x30,
	0x52, 0x19, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x65, 0x67, 0x67, 0x61, 0x63, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c,
	0x65, 0x67, 0x67, 0x61, 0x63, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x63, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0xf5, 0x01, 0x0a, 0x04, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e,
	0x47, 0x6f, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x6c,
	0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x1a, 0x32, 0x0a, 0x07, 0x47,
	0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x1a,
	0xbb, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2e, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x27, 0x0a,
	0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x52,
	0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x47,
	0x61, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x62, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x42, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x41, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x41,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x41, 0x41, 0x10,
	0x05, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x78, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x78, 0x70, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x27, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x04, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x47,
	0x6f, 0x61, 0x6c, 0x52, 0x04, 0x67, 0x6f, 0x61, 0x6c, 0x22, 0x81, 0x02, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x67, 0x6f, 0x61,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65, 0x47,
	0x6f, 0x61, 0x6c, 0x73, 0x1a, 0x67, 0x0a, 0x07, 0x47, 0x6f, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12,
	0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x47, 0x6f, 0x61, 0x6c, 0x52, 0x05, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x22, 0x43, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x8e, 0x08, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x78, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x63, 0x78, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x43, 0x78, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x6f,
	0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x25, 0x0a, 0x0e, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x6f, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x0f,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x1a, 0xdd, 0x01, 0x0a,
	0x0e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x44, 0x45, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x45, 0x50, 0x12, 0x3f, 0x0a, 0x0e, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x78, 0x70, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x78, 0x70,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x78, 0x70, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x22, 0x55, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x22, 0xc3, 0x0c, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x78, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x63, 0x78, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x78, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x63, 0x78, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x6c,
	0x64, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6c, 0x64,
	0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x6c,
	0x64, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x63, 0x6f, 0x6f, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x6c, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x6c, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x34, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e,
	0x52, 0x75, 0x6e, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x65,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x67, 0x69, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x67, 0x69, 0x66, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x67, 0x69, 0x66, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x67, 0x69, 0x66, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x6c,
	0x6f, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x62, 0x75, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x65, 0x61, 0x6d, 0x77, 0x6f, 0x72, 0x6b,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61,
	0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x68,
	0x65, 0x61, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x6f,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x98, 0x01, 0x0a,
	0x0c, 0x50, 0x6f, 0x6f, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x4f, 0x57, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x48, 0x4f, 0x4e, 0x4f, 0x52, 0x41,
	0x42, 0x4c, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4f, 0x4f, 0x52, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x57, 0x4f, 0x52,
	0x4b, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44,
	0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x43, 0x48, 0x45, 0x41, 0x54, 0x10, 0x06, 0x22, 0x40, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x6f, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x36, 0x0a, 0x05, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x2e,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x65, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x49, 0x0a, 0x04, 0x50,
	0x61, 0x69, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x03,
	0x63, 0x65, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x63, 0x65, 0x76, 0x22, 0xef, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6f, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x52, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6f,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x80, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f,
	0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0x95, 0x04, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x51, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x1a, 0xac, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e,
	0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x58,
	0x0a, 0x0b, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x47, 0x6f, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0a, 0x67, 0x6f,
	0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x87, 0x02, 0x0a, 0x0a, 0x47, 0x6f, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x70, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6c, 0x72, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x65, 0x6c, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x61, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x66, 0x66, 0x69,
	0x63, 0x61, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x62, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x68, 0x61, 0x62, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x65, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x65, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x75, 0x64, 0x67,
	0x65, 0x74, 0x22, 0x38, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69,
	0x6d, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a,
	0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x73, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x8b,
	0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x6d, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x6f, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x1a, 0x89, 0x01, 0x0a, 0x08, 0x47, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x13,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6c,
	0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x67, 0x67, 0x73, 0x4c, 0x61, 0x69, 0x64, 0x22, 0x6f, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb4, 0x02,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x2e, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x45, 0x67, 0x67, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x65, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6f, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6f,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x04, 0x31, 0x30, 0x30, 0x30, 0x52, 0x06, 0x6d,
	0x61, 0x78, 0x45, 0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x8c, 0x02, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f,
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x46, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x66, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x61, 0x72, 0x6d, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x61,
	0x72, 0x6d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6c,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x6c, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x68, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x69, 0x68, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x73, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x73, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x22, 0xcd, 0x07, 0x0a,
	0x0e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65,
	0x67, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45,
	0x67, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65,
	0x67, 0x67, 0x73, 0x4f, 0x66, 0x50, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2b, 0x0a, 0x11, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x6c, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x65, 0x67, 0x67, 0x5f, 0x6d, 0x65, 0x64, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x67, 0x67, 0x4d, 0x65, 0x64, 0x61, 0x6c,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x70, 0x69, 0x63, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x65, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x08, 0x65, 0x67, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x52, 0x07,
	0x65, 0x67, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x68, 0x5f,
	0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63,
	0x61, 0x73, 0x68, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x62,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x62, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x68, 0x61, 0x62, 0x5f, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x61, 0x62, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x62, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x68, 0x61, 0x62, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6c, 0x6f, 0x73, 0x5f,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x69, 0x6c,
	0x6f, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0d, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x4f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x43, 0x0a, 0x12, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x11, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x18,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x61,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x66, 0x61, 0x72, 0x6d, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xf3, 0x13, 0x0a,
	0x1a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x53, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x75, 0x74, 0x6f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72,
	0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x46, 0x0a, 0x20, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x1e, 0x67, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x1b, 0x67, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x65, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x67, 0x69, 0x66,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x47, 0x69, 0x66,
	0x74, 0x52, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x63, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43,
	0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x63, 0x6b,
	0x65, 0x6e, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x44,
	0x45, 0x50, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79,
	0x6e, 0x63, 0x44, 0x45, 0x50, 0x1a, 0x9e, 0x07, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x69, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65,
	0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x61, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x63, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x63, 0x63, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x65,
	0x63, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x65, 0x65, 0x63, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x68, 0x65, 0x61, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x73, 0x68, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x62, 0x6f,
	0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x42, 0x75,
	0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x12, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x74, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x70, 0x47, 0x69,
	0x66, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x5a, 0x0a, 0x0a,
	0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4f, 0x50, 0x5f, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12,
	0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x53, 0x48, 0x49, 0x50, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x48, 0x54,
	0x54, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xf4, 0x03, 0x22, 0x67,
	0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09,
	0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4b, 0x49, 0x43,
	0x4b, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x45,
	0x41, 0x54, 0x53, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x5f,
	0x4c, 0x45, 0x45, 0x43, 0x48, 0x10, 0x04, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x42, 0x42, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x04, 0x22, 0xfe, 0x07, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x65, 0x77, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x6f, 0x6f, 0x70,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6f,
	0x70, 0x5f, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x6f,
	0x70, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x6f, 0x6f, 0x70, 0x47, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x1b, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x6f, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x1f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x63, 0x6f, 0x6f, 0x70, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x65, 0x46, 0x61, 0x72, 0x6d, 0x12,
	0x40, 0x0a, 0x1d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77,
	0x68, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x47, 0x69, 0x76, 0x65,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x5f, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x12,
	0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x46, 0x61, 0x72, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x55, 0x75,
	0x69, 0x64, 0x73, 0x22, 0x82, 0x04, 0x0a, 0x0b, 0x4d, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12,
	0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x2b, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a,
	0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x69, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6c, 0x61, 0x73,
	0x74, 0x43, 0x70, 0x69, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6c,
	0x61, 0x73, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x61, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x73, 0x68, 0x6f, 0x77, 0x41, 0x64,
	0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x35, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x67, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x69, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x67, 0x67, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x45, 0x67, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x02, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65,
	0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f,
	0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6f, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x66, 0x75, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x63, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x22, 0xc6, 0x04, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x63, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x41, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x6f, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x6f, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x65, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe9, 0x03, 0x0a, 0x0f, 0x4a, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x65, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x86, 0x03, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f,
	0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e,
	0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0xc4, 0x03, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x6f, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x65, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6f,
	0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6f, 0x70, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x10,
	0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x02, 0x0a, 0x15, 0x47,
	0x69, 0x66, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x02, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x5f,
	0x70, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x66, 0x61, 0x72, 0x6d, 0x50,
	0x6f, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbb, 0x02, 0x0a, 0x17, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f,
	0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x22, 0x45, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x46, 0x46, 0x45, 0x4e,
	0x53, 0x49, 0x56, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x45, 0x45,
	0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x9f, 0x03, 0x0a, 0x15, 0x4b, 0x69, 0x63, 0x6b,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a,
	0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65, 0x69, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x44, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44, 0x4c, 0x45, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x45, 0x43, 0x48, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x04, 0x22, 0xaf, 0x04, 0x0a, 0x12, 0x49, 0x64,
	0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x41, 0x77, 0x61, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x69, 0x6c, 0x6f, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x69, 0x6c, 0x6f, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6c, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x73, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x73,
	0x72, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x67, 0x67,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x67, 0x67,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x67, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6c, 0x61,
	0x73, 0x74, 0x45, 0x67, 0x67, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x67, 0x67, 0x73, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x69, 0x2e, 0x49, 0x64, 0x6c,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x6f, 0x0a, 0x04, 0x53, 0x74,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x76,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x76, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80, 0x06, 0x0a, 0x1f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x68, 0x65, 0x61, 0x74, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6f, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x43, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2f, 0x0a,
	0x09, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x65, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x61, 0x72, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42,
	0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x49,
	0x64, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x3a, 0x01, 0x31, 0x52, 0x11, 0x65, 0x67, 0x67, 0x4c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x12, 0x26, 0x0a, 0x0d, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31,
	0x52, 0x0c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x75, 0x66, 0x66, 0x22, 0x9d,
	0x01, 0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x65, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x84,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6f, 0x70, 0x42, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x65, 0x67, 0x67, 0x5f, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x0d, 0x65, 0x67,
	0x67, 0x4c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31,
	0x52, 0x08, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x3e, 0x0a, 0x0f, 0x43, 0x6f, 0x6f, 0x70, 0x42, 0x75, 0x66,
	0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x43,
	0x6f, 0x6f, 0x70, 0x42, 0x75, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x59, 0x0a, 0x13, 0x43, 0x6f, 0x6f, 0x70, 0x43, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x22, 0x4c, 0x0a, 0x17, 0x43, 0x6f, 0x6f, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x69, 0x2e, 0x43, 0x6f, 0x6f, 0x70, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xfc,
	0x02, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x1a, 0xc3, 0x01, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0xa1, 0x01,
	0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x1a, 0x32, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0xa4, 0x02, 0x0a, 0x13, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x65, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x6f,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61,
	0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x47, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x22, 0x3f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x07, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x22, 0xc7, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x6f, 0x6a, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6f,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x69,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x6b, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x63, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x63, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xa0, 0x01, 0x0a,
	0x13, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22,
	0x96, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6f, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22,
	0xa3, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65,
	0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9d, 0x18, 0x0a, 0x0a, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x3a, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4d, 0x69, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0a, 0x6d, 0x69, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x0b, 0x68,
	0x65, 0x6c, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x68, 0x65, 0x6c,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x91, 0x02, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x73,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x42,
	0x6f, 0x6f, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x63, 0x61, 0x73, 0x68, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6f, 0x6c, 0x6f, 0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x7f, 0x0a, 0x0a, 0x49, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x1a, 0x95, 0x0a, 0x0a, 0x0a,
	0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4c, 0x0a, 0x0c, 0x67, 0x69,
	0x66, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x67, 0x69, 0x66,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74,
	0x5f, 0x6d, 0x75, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x67, 0x69, 0x66, 0x74, 0x4d, 0x75, 0x4d, 0x69, 0x6e, 0x53, 0x70,
	0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x11, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x75, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x67, 0x69, 0x66, 0x74, 0x4d, 0x75, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x14, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x75, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c,
	0x6c, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x67, 0x69,
	0x66, 0x74, 0x4d, 0x75, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x12,
	0x59, 0x0a, 0x15, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d,
	0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47,
	0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x75,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x12, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x47, 0x69,
	0x66, 0x74, 0x4d, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x14, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x75, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30,
	0x0a, 0x14, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x41, 0x0a, 0x1d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x44, 0x0a, 0x1f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x67, 0x67,
	0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x50, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x25, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x20, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x69, 0x67, 0x67,
	0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x2d, 0x0a, 0x13, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x4f, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x19, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x50, 0x69, 0x67, 0x67, 0x79,
	0x46, 0x75, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x21, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1d, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x50, 0x69, 0x67, 0x67, 0x79, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x31,
	0x0a, 0x15, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x6e, 0x49, 0x64, 0x6c,
	0x65, 0x1a, 0xb2, 0x01, 0x0a, 0x0f, 0x47, 0x69, 0x66, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x66, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x69,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x4d, 0x61, 0x78, 0x1a, 0x6b, 0x0a, 0x0c, 0x47, 0x69, 0x66, 0x74, 0x4d, 0x75,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x53, 0x70,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x4d,
	0x75, 0x6c, 0x74, 0x1a, 0xfe, 0x06, 0x0a, 0x0a, 0x4d, 0x69, 0x73, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x1a, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4d, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x2f, 0x0a, 0x14, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x73, 0x6b, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3d, 0x0a, 0x1c, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x53, 0x68, 0x6f, 0x77, 0x50, 0x72, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12,
	0x3a, 0x0a, 0x1a, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x63,
	0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x19, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x52, 0x75, 0x6e, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x1f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x4d,
	0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x43, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x73, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x48, 0x0a, 0x1e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x03, 0x31,
	0x37, 0x35, 0x52, 0x1b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x51, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x74, 0x5f, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x6f, 0x75, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x21, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x45, 0x78, 0x70, 0x65, 0x72, 0x74,
	0x4c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x4d, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x75, 0x62, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6c, 0x75, 0x62, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x73, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x42, 0x65, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x16, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x1a, 0xce, 0x02, 0x0a, 0x0a, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x49, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x77, 0x54, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a, 0xf4,
	0x01, 0x0a, 0x0e, 0x48, 0x6f, 0x77, 0x54, 0x6f, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x48, 0x65, 0x6c, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x48, 0x6f, 0x77, 0x54, 0x6f,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c,
	0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x6c, 0x45, 0x67, 0x67, 0x73, 0x22, 0x1e, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x54, 0x49,
	0x43, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x83, 0x07, 0x0a, 0x0a, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x29, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x55, 0x49, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x69,
	0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x22,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6d, 0x69, 0x6e, 0x4d, 0x79, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x6f, 0x6e, 0x75, 0x73,
	0x12, 0x29, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x69, 0x6e, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x69,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x67, 0x6f, 0x6c, 0x64, 0x54, 0x69, 0x70,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x13, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x69, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x64, 0x61, 0x79, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x73, 0x0a, 0x06, 0x4d,
	0x61, 0x69, 0x6c, 0x44, 0x42, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x49, 0x6e, 0x47, 0x61, 0x6d, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x70,
	0x73, 0x5f, 0x64, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x74, 0x69, 0x70, 0x73, 0x44, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x74,
	0x69, 0x70, 0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x74, 0x69, 0x70, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x22, 0x2c, 0x0a, 0x06, 0x54, 0x69, 0x70, 0x73, 0x44, 0x42, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x49, 0x6e,
	0x47, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x74, 0x69, 0x70, 0x73, 0x22, 0xdc,
	0x01, 0x0a, 0x09, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x0b, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x54, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x74,
	0x69, 0x70, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x70,
	0x73, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x69, 0x70, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x1a, 0x4d,
	0x0a, 0x08, 0x54, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x22, 0xf1, 0x04,
	0x0a, 0x13, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e,
	0x45, 0x67, 0x67, 0x49, 0x6e, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x38, 0x0a, 0x0b, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x67, 0x69,
	0x66, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x52, 0x05, 0x67, 0x69, 0x66, 0x74, 0x73,
	0x12, 0x42, 0x0a, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x61,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x61, 0x69,
	0x6c, 0x44, 0x42, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x61, 0x67, 0x12, 0x48, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x72, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x69, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x79, 0x61,
	0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x35, 0x0a, 0x0b, 0x52, 0x6f,
	0x79, 0x61, 0x6c, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc5, 0x04, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x69, 0x67, 0x67, 0x79, 0x46, 0x75, 0x6c, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x69, 0x67, 0x67, 0x79,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x46, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x47, 0x61, 0x6d, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6c, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x79, 0x73, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x65, 0x6f, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x6f, 0x70, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x22, 0xbe, 0x02, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f,
	0x65, 0x67, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c,
	0x45, 0x67, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x6e, 0x6b, 0x5f,
	0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x66, 0x75, 0x65, 0x6c, 0x54, 0x61, 0x6e, 0x6b, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x6c, 0x74, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x75, 0x6c, 0x74, 0x72, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x70, 0x73, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x69,
	0x70, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x99, 0x01, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25,
	0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x62, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x42, 0x52, 0x07, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x61, 0x67, 0x12, 0x2f, 0x0a, 0x0b, 0x64, 0x6c, 0x63, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x69, 0x2e,
	0x44, 0x4c, 0x43, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x0a, 0x64, 0x6c, 0x63, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x90, 0x02, 0x0a, 0x10, 0x41, 0x64, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe7, 0x04, 0x0a, 0x11, 0x41, 0x64,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x20, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x70,
	0x61, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x65,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0xa8, 0x04, 0x0a, 0x13, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x15, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x74, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x74, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x12,
	0x43, 0x0a, 0x1e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4d, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x69,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x21, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x75, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x84, 0x01, 0x0a, 0x0b, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x04, 0x73, 0x68, 0x69, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xed,
	0x07, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d,
	0x0a, 0x04, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65,
	0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x52, 0x04, 0x73, 0x68, 0x69, 0x70, 0x12, 0x2e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a,
	0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x46, 0x75, 0x65, 0x6c, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x75, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x6f, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x04, 0x46, 0x75, 0x65, 0x6c, 0x12, 0x19,
	0x0a, 0x03, 0x65, 0x67, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69,
	0x2e, 0x45, 0x67, 0x67, 0x52, 0x03, 0x65, 0x67, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc7, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x4e, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x45,
	0x41, 0x56, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x43, 0x52, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x49, 0x4c, 0x4c, 0x45, 0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x43, 0x48, 0x49, 0x43,
	0x4b, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x52, 0x45, 0x4c, 0x4c, 0x49,
	0x48, 0x45, 0x4e, 0x5f, 0x43, 0x4f, 0x52, 0x56, 0x45, 0x54, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x47, 0x41, 0x4c, 0x45, 0x47, 0x47, 0x54, 0x49, 0x43, 0x41, 0x10, 0x06, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x46, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x4f, 0x59, 0x45, 0x47, 0x47, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x48, 0x45, 0x4e, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x54, 0x52, 0x45, 0x47, 0x47, 0x49, 0x45, 0x53, 0x10, 0x0a, 0x22, 0x74, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x55, 0x45, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x4f,
	0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x50,
	0x4c, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x54, 0x55,
	0x52, 0x4e, 0x45, 0x44, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a,
	0x49, 0x4e, 0x47, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x19, 0x22, 0x3b, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x50, 0x49, 0x43, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x8a,
	0x0c, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x03, 0x65, 0x67, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x65, 0x69, 0x2e, 0x45, 0x67, 0x67, 0x52,
	0x03, 0x65, 0x67, 0x67, 0x22, 0x8a, 0x09, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x4c, 0x55, 0x4e, 0x41, 0x52, 0x5f, 0x54, 0x4f, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x45, 0x4f, 0x44, 0x59, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x4d, 0x45, 0x44, 0x41,
	0x4c, 0x4c, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x41, 0x4b, 0x5f,
	0x4f, 0x46, 0x5f, 0x4d, 0x49, 0x44, 0x41, 0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x45, 0x47, 0x47, 0x45, 0x4e, 0x44, 0x49, 0x4c, 0x10,
	0x05, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x4e, 0x45,
	0x43, 0x4b, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x49, 0x41, 0x4c,
	0x5f, 0x4d, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4e, 0x5f, 0x44, 0x55, 0x53, 0x54, 0x10, 0x07, 0x12,
	0x11, 0x0a, 0x0d, 0x4f, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x55, 0x53, 0x53, 0x45, 0x54,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x48, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4c, 0x49, 0x43,
	0x45, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x4f, 0x46, 0x5f, 0x42,
	0x41, 0x53, 0x41, 0x4e, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x48, 0x4f, 0x45, 0x4e, 0x49,
	0x58, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x54,
	0x55, 0x4e, 0x47, 0x53, 0x54, 0x45, 0x4e, 0x5f, 0x41, 0x4e, 0x4b, 0x48, 0x10, 0x0c, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x55, 0x52, 0x45, 0x4c, 0x49, 0x41, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x4f, 0x43,
	0x48, 0x10, 0x15, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x52, 0x41,
	0x49, 0x4e, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x55, 0x5a,
	0x5a, 0x4c, 0x45, 0x5f, 0x43, 0x55, 0x42, 0x45, 0x10, 0x17, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55,
	0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x4f, 0x4e, 0x4f, 0x4d, 0x45, 0x10,
	0x18, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x5f, 0x42,
	0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x43, 0x48, 0x59,
	0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x1a, 0x12, 0x18,
	0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x45, 0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x53, 0x53, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x4c, 0x49,
	0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x4d, 0x4f, 0x4e, 0x4f, 0x43, 0x4c, 0x45, 0x10, 0x1c, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x49, 0x54, 0x41, 0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x41, 0x43, 0x54, 0x55,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x52, 0x43, 0x55, 0x52,
	0x59, 0x53, 0x5f, 0x4c, 0x45, 0x4e, 0x53, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x43,
	0x48, 0x59, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10,
	0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45,
	0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x55, 0x4e, 0x41, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x4e,
	0x45, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4f, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e,
	0x45, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x50, 0x48, 0x45, 0x43, 0x59, 0x5f,
	0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x27, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45,
	0x52, 0x52, 0x41, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x25, 0x12, 0x0e, 0x0a, 0x0a, 0x4c,
	0x49, 0x46, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x4c, 0x41, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x10, 0x28, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x58, 0x54, 0x52, 0x41, 0x54, 0x45, 0x52, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49,
	0x41, 0x4c, 0x5f, 0x41, 0x4c, 0x55, 0x4d, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x0d, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x4e, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x47, 0x53, 0x54, 0x45,
	0x4e, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x43,
	0x4b, 0x53, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4c, 0x49, 0x45, 0x4e, 0x5f, 0x57, 0x4f,
	0x4f, 0x44, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54,
	0x45, 0x4f, 0x52, 0x49, 0x54, 0x45, 0x10, 0x11, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x55, 0x5f,
	0x43, 0x45, 0x54, 0x49, 0x5f, 0x47, 0x45, 0x4f, 0x44, 0x45, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x45, 0x4e, 0x54, 0x41, 0x55, 0x52, 0x49, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x45, 0x45, 0x4c,
	0x10, 0x13, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x49, 0x44, 0x41, 0x4e, 0x49, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x52, 0x4f, 0x4e, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x53, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c, 0x45,
	0x53, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x10, 0x29, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x41, 0x4c, 0x41, 0x4e, 0x44, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x45, 0x10, 0x2a,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x5f, 0x54, 0x49, 0x54, 0x41, 0x4e, 0x49,
	0x55, 0x4d, 0x10, 0x2b, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x43, 0x48, 0x59, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x5f, 0x53, 0x54,
	0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52,
	0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x55, 0x4e, 0x41,
	0x52, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x4f, 0x55, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45,
	0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2f, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x52, 0x4f, 0x50, 0x48, 0x45, 0x43, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52,
	0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x30, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x55, 0x4d, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x31, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x45, 0x52, 0x52, 0x41, 0x5f, 0x53, 0x54,
	0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x32, 0x12, 0x17,
	0x0a, 0x13, 0x4c, 0x49, 0x46, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x33, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x41, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x34, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x90,
	0x4e, 0x22, 0x48, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x46, 0x45, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x53, 0x53,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x55, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x04, 0x22, 0x37, 0x0a, 0x06, 0x52,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x45,
	0x50, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x47, 0x45, 0x4e, 0x44, 0x41,
	0x52, 0x59, 0x10, 0x03, 0x22, 0x45, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x44, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x5f, 0x49,
	0x4e, 0x47, 0x52, 0x45, 0x44, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x62, 0x0a, 0x10, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12,
	0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x22,
	0x9b, 0x01, 0x0a, 0x15, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x44, 0x0a,
	0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x1d, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x0a, 0x0a, 0x1e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x12, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x66, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65,
	0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x12, 0x63, 0x72, 0x61,
	0x66, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x1a,
	0xce, 0x04, 0x0a, 0x11, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70, 0x52, 0x04,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x5b, 0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x1a, 0xbd, 0x02, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x75,
	0x6d, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x75, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x75, 0x6d, 0x70,
	0x1a, 0xf8, 0x02, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x64, 0x64, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x64, 0x64, 0x73, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x13, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x61, 0x66,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x78, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x58, 0x70, 0x1a, 0x55, 0x0a, 0x11, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x78, 0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x78, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x0e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x0f, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38,
	0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65,
	0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x4c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x69, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0x57, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa3, 0x02, 0x0a, 0x25, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67, 0x6f,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e,
	0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x73, 0x68, 0x69, 0x70, 0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x22,
	0xc8, 0x01, 0x0a, 0x23, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x78, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63,
	0x78, 0x70, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x70, 0x61, 0x63, 0x65, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x08, 0x62, 0x65, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x22, 0xcc, 0x02, 0x0a, 0x14, 0x43,
	0x72, 0x61, 0x66, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72,
	0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x78, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x58, 0x70, 0x12, 0x3b, 0x0a, 0x0b,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x43, 0x72,
	0x61, 0x66, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a,
	0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x0f, 0x72, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x61, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x4f, 0x4e, 0x52, 0x0e, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x41, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xe0, 0x02, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x04, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x8e, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x11, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x62, 0x79, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x62, 0x79, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x65, 0x69, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x0c, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc9, 0x01, 0x0a, 0x12, 0x53, 0x65, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x67, 0x6f, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x69, 0x64, 0x22, 0x77, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd5, 0x0a,
	0x0a, 0x0b, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x12, 0x42, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x69, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c,
	0x6f, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x62, 0x0a, 0x1b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45,
	0x44, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x19, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x45, 0x50, 0x52,
	0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x53, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x52, 0x11, 0x73, 0x61, 0x76,
	0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x73, 0x12, 0x4a,
	0x0a, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x66, 0x75,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x75, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69,
	0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x12, 0x58, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x1d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x67,
	0x0a, 0x1e, 0x63, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x1c, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x45, 0x50,
	0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x5f, 0x0a, 0x1a, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x18,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x1a, 0x49, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x69, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x1a, 0x5f, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x44, 0x42, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x1a, 0xce, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x72, 0x61, 0x66, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x14, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x19, 0x4c, 0x6f, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x65, 0x69, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x17, 0x4c, 0x6f, 0x67, 0x43, 0x72, 0x61,
	0x66, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x2a, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x69, 0x2e, 0x43, 0x72, 0x61, 0x66, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x2b, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x69, 0x2e,
	0x43, 0x72, 0x61, 0x66, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x19, 0x4c, 0x6f,
	0x67, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x03, 0x72, 0x65, 0x71, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x2d, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x03, 0x72, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a,
	0x03, 0x72, 0x65, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x69, 0x2e,
	0x53, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x03, 0x72, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x03, 0x72,
	0x65, 0x73, 0x22, 0x54, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x72, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0d, 0x74, 0x6f, 0x5f, 0x65, 0x69, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x45, 0x69, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x53, 0x61, 0x76,
	0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x0f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x65, 0x69,
	0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x6c, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4c, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x44, 0x10, 0x04, 0x22, 0x6b, 0x0a, 0x13, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x12,
	0x65, 0x69, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6b, 0x65,
	0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x69, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x54, 0x6f, 0x4b, 0x65, 0x65, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x49, 0x64, 0x22, 0x30, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x44, 0x54, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x65, 0x69, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x69, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x07, 0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0xe2, 0x14, 0x0a, 0x09, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x70, 0x69, 0x65, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50,
	0x69, 0x65, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x69, 0x65, 0x63, 0x65, 0x52, 0x06,
	0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x0a, 0x61, 0x6c, 0x74, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e,
	0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x45, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x63, 0x0a, 0x0a, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65,
	0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x03, 0x64, 0x6c, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x65, 0x69, 0x2e, 0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x03, 0x64, 0x6c, 0x63, 0x22,
	0xca, 0x0e, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x43, 0x4b,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x41, 0x43,
	0x4b, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x48, 0x4f, 0x55,
	0x53, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x48, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x52, 0x44, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x48,
	0x4f, 0x55, 0x53, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x41, 0x52,
	0x45, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x4e, 0x4b, 0x45, 0x52, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x47, 0x47, 0x4b, 0x45, 0x41, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06,
	0x48, 0x41, 0x42, 0x5f, 0x31, 0x4b, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x4e, 0x47,
	0x41, 0x52, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x0e, 0x12,
	0x0b, 0x0a, 0x07, 0x48, 0x41, 0x42, 0x5f, 0x31, 0x30, 0x4b, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x47, 0x47, 0x54, 0x4f, 0x50, 0x49, 0x41, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f,
	0x4e, 0x4f, 0x4c, 0x49, 0x54, 0x48, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x4c, 0x41, 0x4e,
	0x45, 0x54, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x41, 0x4c, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10,
	0x13, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4c, 0x4f, 0x5f, 0x30, 0x5f, 0x53, 0x4d, 0x41, 0x4c,
	0x4c, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x4c, 0x4f, 0x5f, 0x30, 0x5f, 0x4d, 0x45,
	0x44, 0x10, 0x33, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4c, 0x4f, 0x5f, 0x30, 0x5f, 0x4c, 0x41,
	0x52, 0x47, 0x45, 0x10, 0x34, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4c, 0x4f, 0x5f, 0x31, 0x5f,
	0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x35, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x4c, 0x4f, 0x5f,
	0x31, 0x5f, 0x4d, 0x45, 0x44, 0x10, 0x36, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4c, 0x4f, 0x5f,
	0x31, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x37, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x4c,
	0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x3b, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x49, 0x4c, 0x42,
	0x4f, 0x58, 0x10, 0x46, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x4f, 0x50, 0x48, 0x59, 0x5f, 0x43,
	0x41, 0x53, 0x45, 0x10, 0x47, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x48, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x52, 0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0x49,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x59, 0x50, 0x45, 0x52, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x4a, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x54, 0x5f, 0x31, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x45, 0x50, 0x4f, 0x54, 0x5f, 0x32, 0x10, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50,
	0x4f, 0x54, 0x5f, 0x33, 0x10, 0x66, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x54, 0x5f,
	0x34, 0x10, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x54, 0x5f, 0x35, 0x10, 0x68,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x50, 0x4f, 0x54, 0x5f, 0x36, 0x10, 0x69, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x50, 0x4f, 0x54, 0x5f, 0x37, 0x10, 0x6a, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41,
	0x42, 0x5f, 0x31, 0x10, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x5f, 0x32, 0x10, 0x6f,
	0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x5f, 0x33, 0x10, 0x70, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x41, 0x42, 0x5f, 0x34, 0x10, 0x71, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x5f, 0x35, 0x10,
	0x72, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x5f, 0x36, 0x10, 0x73, 0x12, 0x13, 0x0a, 0x0f,
	0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x44, 0x49, 0x42, 0x4c, 0x45, 0x10,
	0x78, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x55,
	0x50, 0x45, 0x52, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x7a, 0x12,
	0x18, 0x0a, 0x14, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x46, 0x55, 0x45, 0x4c, 0x10, 0x7b, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x7c, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52,
	0x59, 0x5f, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x7d, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x10, 0x7e,
	0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4d, 0x4d,
	0x4f, 0x52, 0x54, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x7f, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x41, 0x43, 0x48, 0x59, 0x4f, 0x4e, 0x10, 0x80,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x52,
	0x41, 0x56, 0x49, 0x54, 0x4f, 0x4e, 0x10, 0x81, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x48, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x10,
	0x82, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x49, 0x47, 0x59, 0x10, 0x83, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x48, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x54, 0x45, 0x52, 0x52, 0x41, 0x46, 0x4f, 0x52, 0x4d, 0x10,
	0x84, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x41,
	0x4e, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x85, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x10, 0x86, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x48, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x49, 0x10, 0x87, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x48, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x45, 0x42, 0x55, 0x4c, 0x41, 0x10, 0x88, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x10, 0x89, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x48, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x8a, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x48, 0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x8b, 0x01, 0x12, 0x14, 0x0a,
	0x0f, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x8c, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f,
	0x57, 0x41, 0x54, 0x45, 0x52, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x4e, 0x10, 0x8d, 0x01, 0x12,
	0x16, 0x0a, 0x11, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x46, 0x49, 0x52, 0x45,
	0x57, 0x4f, 0x52, 0x4b, 0x10, 0x8e, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x48, 0x41, 0x54, 0x43, 0x48,
	0x45, 0x52, 0x59, 0x5f, 0x50, 0x55, 0x4d, 0x50, 0x4b, 0x49, 0x4e, 0x10, 0x8f, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x96, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x48, 0x4f, 0x41, 0x5f, 0x31, 0x10, 0xaa, 0x01,
	0x12, 0x0a, 0x0a, 0x05, 0x48, 0x4f, 0x41, 0x5f, 0x32, 0x10, 0xab, 0x01, 0x12, 0x0a, 0x0a, 0x05,
	0x48, 0x4f, 0x41, 0x5f, 0x33, 0x10, 0xac, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x31, 0x10, 0xb4, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x32, 0x10, 0xb5, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x33, 0x10, 0xb6, 0x01,
	0x12, 0x10, 0x0a, 0x0b, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x54, 0x41, 0x4e, 0x4b, 0x5f, 0x31, 0x10,
	0xc8, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x54, 0x41, 0x4e, 0x4b, 0x5f,
	0x32, 0x10, 0xc9, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x54, 0x41, 0x4e,
	0x4b, 0x5f, 0x33, 0x10, 0xca, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x54,
	0x41, 0x4e, 0x4b, 0x5f, 0x34, 0x10, 0xcb, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x48, 0x41, 0x54, 0x43,
	0x48, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54, 0x4f, 0x4e, 0x5f, 0x54, 0x4f,
	0x50, 0x10, 0xf4, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59,
	0x5f, 0x4e, 0x45, 0x42, 0x55, 0x4c, 0x41, 0x5f, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0xf5,
	0x03, 0x12, 0x18, 0x0a, 0x13, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x4e, 0x45,
	0x42, 0x55, 0x4c, 0x41, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0xf6, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x48,
	0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x41, 0x54,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x31, 0x10, 0xf9, 0x03, 0x12, 0x20, 0x0a,
	0x1b, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x4d,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x32, 0x10, 0xfa, 0x03, 0x12,
	0x20, 0x0a, 0x1b, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x41, 0x52, 0x4b,
	0x5f, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x33, 0x10, 0xfb,
	0x03, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x49,
	0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x31, 0x10, 0xfe, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x49, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x32, 0x10, 0xff,
	0x03, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x49,
	0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x33, 0x10, 0x80, 0x04, 0x12, 0x16, 0x0a, 0x11, 0x48, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x49, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x34, 0x10, 0x81,
	0x04, 0x12, 0x1c, 0x0a, 0x17, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e,
	0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x83, 0x04, 0x12,
	0x1b, 0x0a, 0x16, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x56,
	0x45, 0x52, 0x53, 0x45, 0x5f, 0x42, 0x4f, 0x4c, 0x54, 0x10, 0x84, 0x04, 0x12, 0x1f, 0x0a, 0x1a,
	0x48, 0x41, 0x54, 0x43, 0x48, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x45, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x42, 0x10, 0x88, 0x04, 0x12, 0x14, 0x0a,
	0x0f, 0x48, 0x59, 0x50, 0x45, 0x52, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b,
	0x10, 0xba, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x41, 0x49, 0x4c, 0x42, 0x4f, 0x58, 0x5f, 0x46,
	0x55, 0x4c, 0x4c, 0x10, 0xd8, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45,
	0x4e, 0x10, 0xe8, 0x07, 0x12, 0x08, 0x0a, 0x03, 0x48, 0x41, 0x54, 0x10, 0xf2, 0x07, 0x12, 0x0c,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x8f, 0x4e, 0x22, 0x97, 0x08, 0x0a,
	0x0c, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x45, 0x6f, 0x70, 0x12, 0x2c, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65,
	0x67, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e,
	0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x68, 0x65, 0x78, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x65, 0x78, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x70,
	0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0xe3, 0x01, 0x0a, 0x0d, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x78, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x78, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f,
	0x72, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x65,
	0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xcd, 0x07, 0x0a, 0x0f, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x63, 0x6f, 0x6e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x65, 0x6f, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x45, 0x6f, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67,
	0x73, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x75, 0x6e,
	0x74, 0x69, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x68, 0x61, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x48, 0x61, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x11,
	0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x63,
	0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x4f, 0x44, 0x50, 0x69, 0x65,
	0x63, 0x65, 0x52, 0x06, 0x70, 0x69, 0x65, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41,
	0x70, 0x70, 0x65, 0x61, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x3b, 0x0a, 0x08, 0x4c, 0x4f, 0x44,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x03, 0x64, 0x6c, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x44, 0x4c, 0x43, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x03, 0x64, 0x6c, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6c, 0x6f, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x69, 0x63, 0x6b,
	0x65, 0x6e, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x4c, 0x4f, 0x57, 0x4d, 0x4f, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x4f, 0x42,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x4f, 0x42, 0x42, 0x4c, 0x45, 0x5f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4d, 0x4f, 0x4f, 0x54, 0x48,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4d, 0x4f, 0x4f, 0x54, 0x48, 0x5f, 0x4c, 0x45, 0x41,
	0x4e, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x49, 0x44, 0x45, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x53, 0x4d, 0x4f, 0x4f, 0x54,
	0x48, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x49, 0x44, 0x45, 0x57, 0x41, 0x59, 0x53, 0x5f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x08, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x5f, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x44, 0x4c, 0x43,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x21, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x44, 0x4c, 0x43, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x68,
	0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x69, 0x2e,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x73, 0x12, 0x2f, 0x0a, 0x0a, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x69,
	0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0c, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x35,
	0x0a, 0x0c, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4a, 0x0a, 0x22, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73,
	0x65, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xc0, 0x18, 0x0a, 0x07, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x12, 0x40, 0x0a,
	0x0f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x44, 0x42, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0e, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x56, 0x0a, 0x17, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x15, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5f, 0x0a, 0x19, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x69, 0x2e,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x17, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x13, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x44, 0x42, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x4d, 0x0a, 0x16, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x40, 0x0a, 0x0c, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x66, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x69, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46, 0x61, 0x72, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x73, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x65, 0x6e, 0x12,
	0x3c, 0x0a, 0x1a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x73, 0x5f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x73, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x43, 0x0a,
	0x0b, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x64, 0x1a, 0x6e, 0x0a, 0x12, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x1a, 0x6b, 0x0a, 0x17, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xb3, 0x04, 0x0a, 0x11, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x68, 0x65, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x4d, 0x0a, 0x11,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x68, 0x65, 0x6c,
	0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x43, 0x68, 0x69, 0x63, 0x6b,
	0x65, 0x6e, 0x73, 0x42, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x48, 0x0a, 0x0d, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x43, 0x68, 0x69, 0x63, 0x6b,
	0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x69, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xe7, 0x01, 0x0a, 0x16, 0x53, 0x61, 0x76, 0x65, 0x64, 0x46,
	0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61,
	0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x61, 0x76, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x1a,
	0x8d, 0x01, 0x0a, 0x12, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x68, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0xf8, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x76, 0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14, 0x64, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x7c, 0x0a, 0x17, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x65, 0x0a, 0x0d, 0x43, 0x68, 0x69, 0x63,
	0x6b, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x69,
	0x63, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x68, 0x61, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0x9f, 0x03, 0x0a, 0x0e, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x28, 0x0a, 0x09, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x33, 0x52, 0x08, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x12, 0x39, 0x0a, 0x12,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x34, 0x52, 0x10, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a,
	0x13, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x34, 0x52, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x41, 0x6d,
	0x62, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x5f, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x41, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x28, 0x0a, 0x09, 0x66, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x65, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x34, 0x52, 0x08, 0x66, 0x6f, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x6f, 0x67, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x66, 0x6f, 0x67, 0x4e, 0x65, 0x61, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x6f, 0x67, 0x5f, 0x66,
	0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x66, 0x6f, 0x67, 0x46, 0x61, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6f, 0x67, 0x44, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x22, 0xe0, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x72, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x4e, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x4c, 0x4f, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41,
	0x49, 0x4c, 0x42, 0x4f, 0x58, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x4f, 0x50, 0x48,
	0x59, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x52, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x52, 0x44, 0x53, 0x43, 0x41, 0x50,
	0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x59, 0x50, 0x45, 0x52, 0x4c, 0x4f, 0x4f, 0x50,
	0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x50, 0x4f, 0x54, 0x10, 0x08, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x41, 0x42, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x41, 0x54, 0x43, 0x48, 0x45,
	0x52, 0x59, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4f, 0x41, 0x10, 0x0b, 0x12, 0x13, 0x0a,
	0x0f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c,
	0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x54, 0x41, 0x4e, 0x4b, 0x10,
	0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x63, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x6f,
	0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x69,
	0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x76, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69,
	0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x90, 0x03, 0x0a, 0x0f, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a,
	0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65,
	0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x75, 0x62, 0x49,
	0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0b, 0x66, 0x61, 0x72, 0x6d, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x61, 0x72, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x66, 0x61, 0x72, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x67, 0x6f, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a,
	0x1a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x77,
	0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x69, 0x2e, 0x53,
	0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66, 0x61, 0x72, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xad, 0x01, 0x0a, 0x0d, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x74, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x03, 0x74, 0x6f, 0x70, 0x12, 0x38, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x05, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x22, 0xc4, 0x04, 0x0a, 0x18, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x68,
	0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65,
	0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x61, 0x72,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x44, 0x42, 0x2e, 0x46, 0x61, 0x72, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x66,
	0x61, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x71, 0x75, 0x69, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x71, 0x75,
	0x69, 0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x55,
	0x72, 0x6c, 0x22, 0x67, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x4c, 0x55, 0x4d, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x22, 0x7b, 0x0a, 0x23, 0x53,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x17, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x53, 0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6e, 0x0a,
	0x11, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2d,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x69, 0x2e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x98, 0x0f,
	0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x50, 0x72, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x6c, 0x5f, 0x65, 0x67, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x6c, 0x45, 0x67, 0x67, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x65, 0x67, 0x67, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x68,
	0x65, 0x63, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x67, 0x67, 0x73, 0x4f,
	0x66, 0x50, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x69, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a,
	0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x70, 0x69, 0x67, 0x67, 0x79, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x50, 0x69, 0x67, 0x67, 0x79, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x69, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x61, 0x70, 0x12,
	0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x49, 0x61, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x67, 0x6f, 0x6c,
	0x64, 0x45, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x5f, 0x69, 0x61, 0x70, 0x5f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x49, 0x61, 0x70, 0x42, 0x75,
	0x79, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x69,
	0x61, 0x70, 0x5f, 0x63, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x49, 0x61, 0x70, 0x43, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x72, 0x61, 0x72, 0x65,
	0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x72,
	0x61, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x61, 0x72, 0x65, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x72, 0x61, 0x72, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x20, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1d, 0x6c, 0x65, 0x67, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x49, 0x6e,
	0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x41, 0x0a, 0x1d, 0x6c, 0x65, 0x67,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1a, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x67, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x61, 0x66, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x67, 0x6f, 0x6c, 0x64, 0x53,
	0x70, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x61, 0x66, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x12,
	0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x65,
	0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x76, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6f,
	0x70, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6f, 0x70, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6f, 0x70, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x45,
	0x6f, 0x70, 0x12, 0x3e, 0x0a, 0x1b, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x76, 0x65, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x33, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0x85, 0x08, 0x0a, 0x14, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x11, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x56, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3f, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x65, 0x69,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x36, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x61, 0x6e, 0x64,
	0x62, 0x6f, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x69, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x1a, 0x65, 0x0a, 0x0c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x1e, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x52, 0x4f, 0x10,
	0x01, 0x22, 0x5d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x52, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x05,
	0x22, 0xdb, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x65, 0x69, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x36,
	0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x17, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x65, 0x69, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x56,
	0x0a, 0x12, 0x43, 0x58, 0x50, 0x45, 0x76, 0x61, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x73,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0x34, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4f, 0x53, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x3d, 0x0a, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x09, 0x41,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x55, 0x4e, 0x47,
	0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x52, 0x54, 0x42, 0x4f, 0x4f,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4c, 0x4f, 0x4e,
	0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x59, 0x50, 0x45, 0x52, 0x5f, 0x4d, 0x58, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x41, 0x43, 0x45, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50,
	0x50, 0x4c, 0x4f, 0x56, 0x49, 0x4e, 0x10, 0x06, 0x2a, 0xff, 0x02, 0x0a, 0x03, 0x45, 0x67, 0x67,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x45, 0x44, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x43, 0x4b,
	0x45, 0x54, 0x5f, 0x46, 0x55, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x55, 0x4d, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4d, 0x4d, 0x4f, 0x52, 0x54,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x41, 0x43, 0x48, 0x59,
	0x4f, 0x4e, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54, 0x4f, 0x4e,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x4c, 0x49, 0x54, 0x48, 0x49, 0x55, 0x4d, 0x10,
	0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x44, 0x49, 0x47, 0x59, 0x10, 0x0c, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x45, 0x52, 0x52, 0x41, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x0d, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x4e, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x0f, 0x0a,
	0x0b, 0x44, 0x41, 0x52, 0x4b, 0x5f, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x06,
	0x0a, 0x02, 0x41, 0x49, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x42, 0x55, 0x4c, 0x41,
	0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x12,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x4e, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x45, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x48, 0x4f, 0x43, 0x4f, 0x4c, 0x41, 0x54, 0x45,
	0x10, 0x64, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x65, 0x12, 0x10,
	0x0a, 0x0c, 0x57, 0x41, 0x54, 0x45, 0x52, 0x42, 0x41, 0x4c, 0x4c, 0x4f, 0x4f, 0x4e, 0x10, 0x66,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x52, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x67, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x55, 0x4d, 0x50, 0x4b, 0x49, 0x4e, 0x10, 0x68, 0x12, 0x0f, 0x0a, 0x0a, 0x43,
	0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x45, 0x47, 0x47, 0x10, 0xc8, 0x01, 0x12, 0x0c, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe8, 0x07, 0x2a, 0x2d, 0x0a, 0x08, 0x46, 0x61,
	0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x2b, 0x0a, 0x08, 0x47, 0x6f, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x47, 0x47, 0x53, 0x5f, 0x4c, 0x41,
	0x49, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x47, 0x4f, 0x41, 0x4c, 0x10, 0x64, 0x2a, 0x89, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x48, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4f, 0x55,
	0x4c, 0x5f, 0x45, 0x47, 0x47, 0x53, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x47, 0x47, 0x53,
	0x5f, 0x4f, 0x46, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x48, 0x45, 0x43, 0x59, 0x10, 0x04, 0x12, 0x16,
	0x0a, 0x12, 0x45, 0x50, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x49, 0x47, 0x47, 0x59, 0x5f,
	0x46, 0x49, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x49, 0x47, 0x47, 0x59, 0x5f,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x49, 0x47, 0x47, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x42, 0x55, 0x4d, 0x50,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x0a, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x10, 0x0c, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10, 0x0e, 0x12, 0x12,
	0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44,
	0x10, 0x64, 0x2a, 0xe7, 0x01, 0x0a, 0x0a, 0x55, 0x49, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x48, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x5f, 0x53,
	0x48, 0x4f, 0x50, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x47, 0x47, 0x59, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x53, 0x48, 0x4f, 0x50, 0x10, 0x0a,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x45, 0x54, 0x53, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x48, 0x45, 0x4c, 0x4c, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x43, 0x41, 0x53, 0x45, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x07, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x48, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x5f, 0x48, 0x41, 0x54, 0x53, 0x10,
	0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x50, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53,
	0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x45, 0x4c, 0x50, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x49, 0x54, 0x59, 0x10, 0x0e, 0x2a, 0xd3, 0x02, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x4c,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x47, 0x47, 0x45,
	0x44, 0x5f, 0x55, 0x50, 0x10, 0x0f, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x4c, 0x4f,
	0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x54,
	0x41, 0x4e, 0x4b, 0x5f, 0x55, 0x4e, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x52, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x50, 0x52,
	0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f,
	0x5f, 0x55, 0x4c, 0x54, 0x52, 0x41, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x45, 0x53, 0x54, 0x49, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0e, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x49, 0x47, 0x47, 0x59, 0x5f, 0x48, 0x45, 0x53, 0x49, 0x54, 0x41, 0x4e, 0x54,
	0x10, 0x10, 0x2a, 0x34, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x67, 0x72, 0x61, 0x6e, 0x6a, 0x65, 0x72,
	0x6f, 0x2f, 0x45, 0x67, 0x67, 0x55, 0x74, 0x69, 0x6c, 0x73, 0x2f, 0x65, 0x69,
}

var (
	file_go_ei_proto_rawDescOnce sync.Once
	file_go_ei_proto_rawDescData = file_go_ei_proto_rawDesc
)

func file_go_ei_proto_rawDescGZIP() []byte {
	file_go_ei_proto_rawDescOnce.Do(func() {
		file_go_ei_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_ei_proto_rawDescData)
	})
	return file_go_ei_proto_rawDescData
}

var file_go_ei_proto_enumTypes = make([]protoimpl.EnumInfo, 37)
var file_go_ei_proto_msgTypes = make([]protoimpl.MessageInfo, 207)
var file_go_ei_proto_goTypes = []any{
	(Platform)(0),         // 0: ei.Platform
	(DeviceFormFactor)(0), // 1: ei.DeviceFormFactor
	(AdNetwork)(0),        // 2: ei.AdNetwork
	(Egg)(0),              // 3: ei.Egg
	(FarmType)(0),         // 4: ei.FarmType
	(GoalType)(0),         // 5: ei.GoalType
	(RewardType)(0),       // 6: ei.RewardType
	(UILocation)(0),       // 7: ei.UILocation
	(UserType)(0),         // 8: ei.UserType
	(LeaderboardScope)(0), // 9: ei.LeaderboardScope
	(EggIncFirstContactResponse_ErrorCodes)(0),                        // 10: ei.EggIncFirstContactResponse.ErrorCodes
	(GameModifier_GameDimension)(0),                                   // 11: ei.GameModifier.GameDimension
	(Contract_PlayerGrade)(0),                                         // 12: ei.Contract.PlayerGrade
	(ContractPlayerInfo_Status)(0),                                    // 13: ei.ContractPlayerInfo.Status
	(ContractEvaluation_PoorBehavior)(0),                              // 14: ei.ContractEvaluation.PoorBehavior
	(ContractEvaluation_Status)(0),                                    // 15: ei.ContractEvaluation.Status
	(ContractCoopStatusResponse_ResponseStatus)(0),                    // 16: ei.ContractCoopStatusResponse.ResponseStatus
	(ContractCoopStatusResponse_MemberStatus)(0),                      // 17: ei.ContractCoopStatusResponse.MemberStatus
	(ContractCoopStatusResponse_Status)(0),                            // 18: ei.ContractCoopStatusResponse.Status
	(ReportPlayerCoopRequest_Reason)(0),                               // 19: ei.ReportPlayerCoopRequest.Reason
	(KickPlayerCoopRequest_Reason)(0),                                 // 20: ei.KickPlayerCoopRequest.Reason
	(LiveConfig_HelpConfig_HowToVideoInfo_Type)(0),                    // 21: ei.LiveConfig.HelpConfig.HowToVideoInfo.Type
	(MissionInfo_Spaceship)(0),                                        // 22: ei.MissionInfo.Spaceship
	(MissionInfo_Status)(0),                                           // 23: ei.MissionInfo.Status
	(MissionInfo_DurationType)(0),                                     // 24: ei.MissionInfo.DurationType
	(ArtifactSpec_Name)(0),                                            // 25: ei.ArtifactSpec.Name
	(ArtifactSpec_Level)(0),                                           // 26: ei.ArtifactSpec.Level
	(ArtifactSpec_Rarity)(0),                                          // 27: ei.ArtifactSpec.Rarity
	(ArtifactSpec_Type)(0),                                            // 28: ei.ArtifactSpec.Type
	(SaveBackupResponse_ErrorCodes)(0),                                // 29: ei.SaveBackupResponse.ErrorCodes
	(ShellSpec_AssetType)(0),                                          // 30: ei.ShellSpec.AssetType
	(ShellObjectSpec_ChickenAnimation)(0),                             // 31: ei.ShellObjectSpec.ChickenAnimation
	(ShellDB_FarmElement)(0),                                          // 32: ei.ShellDB.FarmElement
	(ShellShowcaseListingInfo_Status)(0),                              // 33: ei.ShellShowcaseListingInfo.Status
	(UserVerificationAnalysis_Status)(0),                              // 34: ei.UserVerificationAnalysis.Status
	(UserSubscriptionInfo_Level)(0),                                   // 35: ei.UserSubscriptionInfo.Level
	(UserSubscriptionInfo_Status)(0),                                  // 36: ei.UserSubscriptionInfo.Status
	(*Vector3)(nil),                                                   // 37: ei.Vector3
	(*Vector4)(nil),                                                   // 38: ei.Vector4
	(*Backup)(nil),                                                    // 39: ei.Backup
	(*EggIncFirstContactRequest)(nil),                                 // 40: ei.EggIncFirstContactRequest
	(*EggIncFirstContactResponse)(nil),                                // 41: ei.EggIncFirstContactResponse
	(*EggIncAdConfig)(nil),                                            // 42: ei.EggIncAdConfig
	(*DailyGiftInfo)(nil),                                             // 43: ei.DailyGiftInfo
	(*SalesInfoRequest)(nil),                                          // 44: ei.SalesInfoRequest
	(*IAPSaleEntry)(nil),                                              // 45: ei.IAPSaleEntry
	(*SalesInfo)(nil),                                                 // 46: ei.SalesInfo
	(*EggIncEvent)(nil),                                               // 47: ei.EggIncEvent
	(*EggIncCurrentEvents)(nil),                                       // 48: ei.EggIncCurrentEvents
	(*DeviceInfo)(nil),                                                // 49: ei.DeviceInfo
	(*AppInfo)(nil),                                                   // 50: ei.AppInfo
	(*ActionKeyValuePair)(nil),                                        // 51: ei.ActionKeyValuePair
	(*GenericAction)(nil),                                             // 52: ei.GenericAction
	(*GenericActionBatchRequest)(nil),                                 // 53: ei.GenericActionBatchRequest
	(*VerifyPurchaseRequest)(nil),                                     // 54: ei.VerifyPurchaseRequest
	(*VerifyPurchaseResponse)(nil),                                    // 55: ei.VerifyPurchaseResponse
	(*CurrencyFlowLog)(nil),                                           // 56: ei.CurrencyFlowLog
	(*CurrencyFlowBatchRequest)(nil),                                  // 57: ei.CurrencyFlowBatchRequest
	(*Reward)(nil),                                                    // 58: ei.Reward
	(*GameModifier)(nil),                                              // 59: ei.GameModifier
	(*CustomEgg)(nil),                                                 // 60: ei.CustomEgg
	(*Contract)(nil),                                                  // 61: ei.Contract
	(*ContractSeasonGoal)(nil),                                        // 62: ei.ContractSeasonGoal
	(*ContractSeasonRewardConfirmationRequest)(nil),                   // 63: ei.ContractSeasonRewardConfirmationRequest
	(*ContractSeasonInfo)(nil),                                        // 64: ei.ContractSeasonInfo
	(*ContractSeasonInfos)(nil),                                       // 65: ei.ContractSeasonInfos
	(*ContractPlayerInfo)(nil),                                        // 66: ei.ContractPlayerInfo
	(*ContractEvaluation)(nil),                                        // 67: ei.ContractEvaluation
	(*ContractCitation)(nil),                                          // 68: ei.ContractCitation
	(*ContractEvaluationBatch)(nil),                                   // 69: ei.ContractEvaluationBatch
	(*CoopCompletionSnapshot)(nil),                                    // 70: ei.CoopCompletionSnapshot
	(*BasicRequestInfo)(nil),                                          // 71: ei.BasicRequestInfo
	(*ContractSimConfig)(nil),                                         // 72: ei.ContractSimConfig
	(*ContractSimPoll)(nil),                                           // 73: ei.ContractSimPoll
	(*ContractSimPollResponse)(nil),                                   // 74: ei.ContractSimPollResponse
	(*ContractSimResultUpdate)(nil),                                   // 75: ei.ContractSimResultUpdate
	(*ContractsRequest)(nil),                                          // 76: ei.ContractsRequest
	(*ContractsResponse)(nil),                                         // 77: ei.ContractsResponse
	(*ContractCoopStatusRequest)(nil),                                 // 78: ei.ContractCoopStatusRequest
	(*FarmProductionParams)(nil),                                      // 79: ei.FarmProductionParams
	(*PlayerFarmInfo)(nil),                                            // 80: ei.PlayerFarmInfo
	(*ContractCoopStatusResponse)(nil),                                // 81: ei.ContractCoopStatusResponse
	(*LocalContract)(nil),                                             // 82: ei.LocalContract
	(*MyContracts)(nil),                                               // 83: ei.MyContracts
	(*QueryCoopRequest)(nil),                                          // 84: ei.QueryCoopRequest
	(*QueryCoopResponse)(nil),                                         // 85: ei.QueryCoopResponse
	(*CreateCoopRequest)(nil),                                         // 86: ei.CreateCoopRequest
	(*CreateCoopResponse)(nil),                                        // 87: ei.CreateCoopResponse
	(*JoinCoopRequest)(nil),                                           // 88: ei.JoinCoopRequest
	(*JoinCoopResponse)(nil),                                          // 89: ei.JoinCoopResponse
	(*AutoJoinCoopRequest)(nil),                                       // 90: ei.AutoJoinCoopRequest
	(*UpdateCoopPermissionsRequest)(nil),                              // 91: ei.UpdateCoopPermissionsRequest
	(*UpdateCoopPermissionsResponse)(nil),                             // 92: ei.UpdateCoopPermissionsResponse
	(*LeaveCoopRequest)(nil),                                          // 93: ei.LeaveCoopRequest
	(*GiftPlayerCoopRequest)(nil),                                     // 94: ei.GiftPlayerCoopRequest
	(*SendChickenRunCoopRequest)(nil),                                 // 95: ei.SendChickenRunCoopRequest
	(*ReportPlayerCoopRequest)(nil),                                   // 96: ei.ReportPlayerCoopRequest
	(*KickPlayerCoopRequest)(nil),                                     // 97: ei.KickPlayerCoopRequest
	(*IdleSessionSummary)(nil),                                        // 98: ei.IdleSessionSummary
	(*ContractCoopStatusUpdateRequest)(nil),                           // 99: ei.ContractCoopStatusUpdateRequest
	(*ContractCoopStatusUpdateResponse)(nil),                          // 100: ei.ContractCoopStatusUpdateResponse
	(*CoopBuffState)(nil),                                             // 101: ei.CoopBuffState
	(*CoopBuffHistory)(nil),                                           // 102: ei.CoopBuffHistory
	(*CoopChickenRunEntry)(nil),                                       // 103: ei.CoopChickenRunEntry
	(*CoopLastChickenRunTimes)(nil),                                   // 104: ei.CoopLastChickenRunTimes
	(*LeaderboardAnalysis)(nil),                                       // 105: ei.LeaderboardAnalysis
	(*LeaderboardInfo)(nil),                                           // 106: ei.LeaderboardInfo
	(*LeaderboardRequest)(nil),                                        // 107: ei.LeaderboardRequest
	(*LeaderboardResponse)(nil),                                       // 108: ei.LeaderboardResponse
	(*ContractsArchive)(nil),                                          // 109: ei.ContractsArchive
	(*ContractAction)(nil),                                            // 110: ei.ContractAction
	(*UserDataInfoRequest)(nil),                                       // 111: ei.UserDataInfoRequest
	(*UserDataInfoResponse)(nil),                                      // 112: ei.UserDataInfoResponse
	(*ClearAllUserDataRequest)(nil),                                   // 113: ei.ClearAllUserDataRequest
	(*ServerGift)(nil),                                                // 114: ei.ServerGift
	(*LiveConfig)(nil),                                                // 115: ei.LiveConfig
	(*InGameMail)(nil),                                                // 116: ei.InGameMail
	(*MailDB)(nil),                                                    // 117: ei.MailDB
	(*TipsDB)(nil),                                                    // 118: ei.TipsDB
	(*MailState)(nil),                                                 // 119: ei.MailState
	(*PeriodicalsResponse)(nil),                                       // 120: ei.PeriodicalsResponse
	(*GetPeriodicalsRequest)(nil),                                     // 121: ei.GetPeriodicalsRequest
	(*ConfigRequest)(nil),                                             // 122: ei.ConfigRequest
	(*ConfigResponse)(nil),                                            // 123: ei.ConfigResponse
	(*AdAttributionRawData)(nil),                                      // 124: ei.AdAttributionRawData
	(*AdAttributionRow)(nil),                                          // 125: ei.AdAttributionRow
	(*AdAttributionInfo)(nil),                                         // 126: ei.AdAttributionInfo
	(*ArtifactsClientInfo)(nil),                                       // 127: ei.ArtifactsClientInfo
	(*MissionInfo)(nil),                                               // 128: ei.MissionInfo
	(*ArtifactSpec)(nil),                                              // 129: ei.ArtifactSpec
	(*CompleteArtifact)(nil),                                          // 130: ei.CompleteArtifact
	(*ArtifactInventoryItem)(nil),                                     // 131: ei.ArtifactInventoryItem
	(*InventorySlot)(nil),                                             // 132: ei.InventorySlot
	(*ArtifactsConfigurationRequest)(nil),                             // 133: ei.ArtifactsConfigurationRequest
	(*ArtifactsConfigurationResponse)(nil),                            // 134: ei.ArtifactsConfigurationResponse
	(*MissionRequest)(nil),                                            // 135: ei.MissionRequest
	(*MissionResponse)(nil),                                           // 136: ei.MissionResponse
	(*GetActiveMissionsResponse)(nil),                                 // 137: ei.GetActiveMissionsResponse
	(*CompleteMissionResponse)(nil),                                   // 138: ei.CompleteMissionResponse
	(*CollectContractArtifactRewardsRequest)(nil),                     // 139: ei.CollectContractArtifactRewardsRequest
	(*CollectSeasonArtifactRewardsRequest)(nil),                       // 140: ei.CollectSeasonArtifactRewardsRequest
	(*CraftArtifactRequest)(nil),                                      // 141: ei.CraftArtifactRequest
	(*CraftArtifactResponse)(nil),                                     // 142: ei.CraftArtifactResponse
	(*ConsumeArtifactRequest)(nil),                                    // 143: ei.ConsumeArtifactRequest
	(*ConsumeArtifactResponse)(nil),                                   // 144: ei.ConsumeArtifactResponse
	(*AuthenticateArtifactResponse)(nil),                              // 145: ei.AuthenticateArtifactResponse
	(*SetArtifactRequest)(nil),                                        // 146: ei.SetArtifactRequest
	(*SetArtifactResponse)(nil),                                       // 147: ei.SetArtifactResponse
	(*ArtifactsDB)(nil),                                               // 148: ei.ArtifactsDB
	(*AuthenticatedMessage)(nil),                                      // 149: ei.AuthenticatedMessage
	(*LogCompleteMissionPayload)(nil),                                 // 150: ei.LogCompleteMissionPayload
	(*LogCraftArtifactPayload)(nil),                                   // 151: ei.LogCraftArtifactPayload
	(*LogConsumeArtifactPayload)(nil),                                 // 152: ei.LogConsumeArtifactPayload
	(*LogSetArtifactPayload)(nil),                                     // 153: ei.LogSetArtifactPayload
	(*AccountTransferPayload)(nil),                                    // 154: ei.AccountTransferPayload
	(*SaveBackupResponse)(nil),                                        // 155: ei.SaveBackupResponse
	(*CleanAccountRequest)(nil),                                       // 156: ei.CleanAccountRequest
	(*ReturnEDTPayload)(nil),                                          // 157: ei.ReturnEDTPayload
	(*DLCItem)(nil),                                                   // 158: ei.DLCItem
	(*ShellSpec)(nil),                                                 // 159: ei.ShellSpec
	(*ShellSetSpec)(nil),                                              // 160: ei.ShellSetSpec
	(*ShellObjectSpec)(nil),                                           // 161: ei.ShellObjectSpec
	(*ShellGroupSpec)(nil),                                            // 162: ei.ShellGroupSpec
	(*DLCCatalog)(nil),                                                // 163: ei.DLCCatalog
	(*ShellDB)(nil),                                                   // 164: ei.ShellDB
	(*ShellPopularityStats)(nil),                                      // 165: ei.ShellPopularityStats
	(*ShellsActionLog)(nil),                                           // 166: ei.ShellsActionLog
	(*SubmitShellShowcaseRequest)(nil),                                // 167: ei.SubmitShellShowcaseRequest
	(*ShellShowcase)(nil),                                             // 168: ei.ShellShowcase
	(*ShellShowcaseListingInfo)(nil),                                  // 169: ei.ShellShowcaseListingInfo
	(*ShowcaseRoyaltyDeliveryConfirmation)(nil),                       // 170: ei.ShowcaseRoyaltyDeliveryConfirmation
	(*ShellShowcaseListingSet)(nil),                                   // 171: ei.ShellShowcaseListingSet
	(*ShellsActionBatch)(nil),                                         // 172: ei.ShellsActionBatch
	(*UserVerificationAnalysis)(nil),                                  // 173: ei.UserVerificationAnalysis
	(*UserSubscriptionInfo)(nil),                                      // 174: ei.UserSubscriptionInfo
	(*SubscriptionChangeHintRequest)(nil),                             // 175: ei.SubscriptionChangeHintRequest
	(*CXPEvalRolloutInfo)(nil),                                        // 176: ei.CXPEvalRolloutInfo
	(*Backup_Settings)(nil),                                           // 177: ei.Backup.Settings
	(*Backup_Tutorial)(nil),                                           // 178: ei.Backup.Tutorial
	(*Backup_Stats)(nil),                                              // 179: ei.Backup.Stats
	(*Backup_Game)(nil),                                               // 180: ei.Backup.Game
	(*Backup_Artifacts)(nil),                                          // 181: ei.Backup.Artifacts
	(*Backup_Shells)(nil),                                             // 182: ei.Backup.Shells
	(*Backup_Simulation)(nil),                                         // 183: ei.Backup.Simulation
	(*Backup_Mission)(nil),                                            // 184: ei.Backup.Mission
	(*Backup_Misc)(nil),                                               // 185: ei.Backup.Misc
	(*Backup_ResearchItem)(nil),                                       // 186: ei.Backup.ResearchItem
	(*Backup_NewsHeadline)(nil),                                       // 187: ei.Backup.NewsHeadline
	(*Backup_AchievementInfo)(nil),                                    // 188: ei.Backup.AchievementInfo
	(*Backup_ActiveBoost)(nil),                                        // 189: ei.Backup.ActiveBoost
	(*Backup_OwnedBoost)(nil),                                         // 190: ei.Backup.OwnedBoost
	(*Backup_MissionInfo)(nil),                                        // 191: ei.Backup.MissionInfo
	(*Contract_Goal)(nil),                                             // 192: ei.Contract.Goal
	(*Contract_GoalSet)(nil),                                          // 193: ei.Contract.GoalSet
	(*Contract_GradeSpec)(nil),                                        // 194: ei.Contract.GradeSpec
	(*ContractSeasonInfo_GoalSet)(nil),                                // 195: ei.ContractSeasonInfo.GoalSet
	(*ContractPlayerInfo_SeasonProgress)(nil),                         // 196: ei.ContractPlayerInfo.SeasonProgress
	(*ContractEvaluationBatch_Pair)(nil),                              // 197: ei.ContractEvaluationBatch.Pair
	(*CoopCompletionSnapshot_ContributorSnapshot)(nil),                // 198: ei.CoopCompletionSnapshot.ContributorSnapshot
	(*ContractSimConfig_ContractGradeSimConfig)(nil),                  // 199: ei.ContractSimConfig.ContractGradeSimConfig
	(*ContractSimConfig_ContractGradeSimConfig_GoalParams)(nil),       // 200: ei.ContractSimConfig.ContractGradeSimConfig.GoalParams
	(*ContractSimResultUpdate_GoalInfo)(nil),                          // 201: ei.ContractSimResultUpdate.GoalInfo
	(*ContractCoopStatusResponse_ContributionInfo)(nil),               // 202: ei.ContractCoopStatusResponse.ContributionInfo
	(*ContractCoopStatusResponse_CoopGift)(nil),                       // 203: ei.ContractCoopStatusResponse.CoopGift
	(*ContractCoopStatusResponse_ChickenRun)(nil),                     // 204: ei.ContractCoopStatusResponse.ChickenRun
	(*IdleSessionSummary_Stat)(nil),                                   // 205: ei.IdleSessionSummary.Stat
	(*LeaderboardAnalysis_Chunk)(nil),                                 // 206: ei.LeaderboardAnalysis.Chunk
	(*LeaderboardInfo_Season)(nil),                                    // 207: ei.LeaderboardInfo.Season
	(*LeaderboardResponse_Entry)(nil),                                 // 208: ei.LeaderboardResponse.Entry
	(*LiveConfig_BoostsConfig)(nil),                                   // 209: ei.LiveConfig.BoostsConfig
	(*LiveConfig_GiftConfig)(nil),                                     // 210: ei.LiveConfig.GiftConfig
	(*LiveConfig_MiscConfig)(nil),                                     // 211: ei.LiveConfig.MiscConfig
	(*LiveConfig_HelpConfig)(nil),                                     // 212: ei.LiveConfig.HelpConfig
	(*LiveConfig_BoostsConfig_ItemConfig)(nil),                        // 213: ei.LiveConfig.BoostsConfig.ItemConfig
	(*LiveConfig_GiftConfig_GiftValueConfig)(nil),                     // 214: ei.LiveConfig.GiftConfig.GiftValueConfig
	(*LiveConfig_GiftConfig_GiftMuConfig)(nil),                        // 215: ei.LiveConfig.GiftConfig.GiftMuConfig
	(*LiveConfig_HelpConfig_HowToVideoInfo)(nil),                      // 216: ei.LiveConfig.HelpConfig.HowToVideoInfo
	(*MailState_TipState)(nil),                                        // 217: ei.MailState.TipState
	(*PeriodicalsResponse_RoyaltyInfo)(nil),                           // 218: ei.PeriodicalsResponse.RoyaltyInfo
	(*ArtifactsClientInfo_LaunchCount)(nil),                           // 219: ei.ArtifactsClientInfo.LaunchCount
	(*MissionInfo_Fuel)(nil),                                          // 220: ei.MissionInfo.Fuel
	(*ArtifactsConfigurationResponse_MissionParameters)(nil),          // 221: ei.ArtifactsConfigurationResponse.MissionParameters
	(*ArtifactsConfigurationResponse_ArtifactParameters)(nil),         // 222: ei.ArtifactsConfigurationResponse.ArtifactParameters
	(*ArtifactsConfigurationResponse_CraftingLevelInfo)(nil),          // 223: ei.ArtifactsConfigurationResponse.CraftingLevelInfo
	(*ArtifactsConfigurationResponse_MissionParameters_Duration)(nil), // 224: ei.ArtifactsConfigurationResponse.MissionParameters.Duration
	(*CompleteMissionResponse_SecureArtifactSpec)(nil),                // 225: ei.CompleteMissionResponse.SecureArtifactSpec
	(*ArtifactsDB_ActiveArtifactSlot)(nil),                            // 226: ei.ArtifactsDB.ActiveArtifactSlot
	(*ArtifactsDB_ActiveArtifactSet)(nil),                             // 227: ei.ArtifactsDB.ActiveArtifactSet
	(*ArtifactsDB_CraftableArtifact)(nil),                             // 228: ei.ArtifactsDB.CraftableArtifact
	(*ShellSpec_ShellPiece)(nil),                                      // 229: ei.ShellSpec.ShellPiece
	(*ShellSetSpec_VariationSpec)(nil),                                // 230: ei.ShellSetSpec.VariationSpec
	(*ShellObjectSpec_LODPiece)(nil),                                  // 231: ei.ShellObjectSpec.LODPiece
	(*ShellDB_ShellStatus)(nil),                                       // 232: ei.ShellDB.ShellStatus
	(*ShellDB_ShellElementStatus)(nil),                                // 233: ei.ShellDB.ShellElementStatus
	(*ShellDB_ShellSetVariationStatus)(nil),                           // 234: ei.ShellDB.ShellSetVariationStatus
	(*ShellDB_FarmConfiguration)(nil),                                 // 235: ei.ShellDB.FarmConfiguration
	(*ShellDB_SavedFarmConfiguration)(nil),                            // 236: ei.ShellDB.SavedFarmConfiguration
	(*ShellDB_ShellConfiguration)(nil),                                // 237: ei.ShellDB.ShellConfiguration
	(*ShellDB_ShellSetConfiguration)(nil),                             // 238: ei.ShellDB.ShellSetConfiguration
	(*ShellDB_ShellGroupConfiguration)(nil),                           // 239: ei.ShellDB.ShellGroupConfiguration
	(*ShellDB_ChickenConfig)(nil),                                     // 240: ei.ShellDB.ChickenConfig
	(*ShellDB_LightingConfig)(nil),                                    // 241: ei.ShellDB.LightingConfig
	(*ShellPopularityStats_Entry)(nil),                                // 242: ei.ShellPopularityStats.Entry
	(*UserSubscriptionInfo_HistoryEntry)(nil),                         // 243: ei.UserSubscriptionInfo.HistoryEntry
}
var file_go_ei_proto_depIdxs = []int32{
	177, // 0: ei.Backup.settings:type_name -> ei.Backup.Settings
	178, // 1: ei.Backup.tutorial:type_name -> ei.Backup.Tutorial
	179, // 2: ei.Backup.stats:type_name -> ei.Backup.Stats
	180, // 3: ei.Backup.game:type_name -> ei.Backup.Game
	181, // 4: ei.Backup.artifacts:type_name -> ei.Backup.Artifacts
	182, // 5: ei.Backup.shells:type_name -> ei.Backup.Shells
	183, // 6: ei.Backup.sim:type_name -> ei.Backup.Simulation
	183, // 7: ei.Backup.farms:type_name -> ei.Backup.Simulation
	184, // 8: ei.Backup.mission:type_name -> ei.Backup.Mission
	185, // 9: ei.Backup.misc:type_name -> ei.Backup.Misc
	83,  // 10: ei.Backup.contracts:type_name -> ei.MyContracts
	148, // 11: ei.Backup.artifacts_db:type_name -> ei.ArtifactsDB
	164, // 12: ei.Backup.shell_db:type_name -> ei.ShellDB
	119, // 13: ei.Backup.mail_state:type_name -> ei.MailState
	71,  // 14: ei.EggIncFirstContactRequest.rinfo:type_name -> ei.BasicRequestInfo
	0,   // 15: ei.EggIncFirstContactRequest.platform:type_name -> ei.Platform
	39,  // 16: ei.EggIncFirstContactResponse.backup:type_name -> ei.Backup
	2,   // 17: ei.EggIncAdConfig.network_priority:type_name -> ei.AdNetwork
	45,  // 18: ei.SalesInfo.sales:type_name -> ei.IAPSaleEntry
	47,  // 19: ei.EggIncCurrentEvents.events:type_name -> ei.EggIncEvent
	51,  // 20: ei.GenericAction.data:type_name -> ei.ActionKeyValuePair
	50,  // 21: ei.GenericAction.app:type_name -> ei.AppInfo
	49,  // 22: ei.GenericAction.device:type_name -> ei.DeviceInfo
	71,  // 23: ei.GenericActionBatchRequest.rinfo:type_name -> ei.BasicRequestInfo
	52,  // 24: ei.GenericActionBatchRequest.actions:type_name -> ei.GenericAction
	71,  // 25: ei.VerifyPurchaseRequest.rinfo:type_name -> ei.BasicRequestInfo
	52,  // 26: ei.VerifyPurchaseRequest.log:type_name -> ei.GenericAction
	6,   // 27: ei.CurrencyFlowLog.currency:type_name -> ei.RewardType
	71,  // 28: ei.CurrencyFlowBatchRequest.rinfo:type_name -> ei.BasicRequestInfo
	56,  // 29: ei.CurrencyFlowBatchRequest.logs:type_name -> ei.CurrencyFlowLog
	6,   // 30: ei.Reward.reward_type:type_name -> ei.RewardType
	11,  // 31: ei.GameModifier.dimension:type_name -> ei.GameModifier.GameDimension
	158, // 32: ei.CustomEgg.icon:type_name -> ei.DLCItem
	59,  // 33: ei.CustomEgg.buffs:type_name -> ei.GameModifier
	3,   // 34: ei.Contract.egg:type_name -> ei.Egg
	192, // 35: ei.Contract.goals:type_name -> ei.Contract.Goal
	193, // 36: ei.Contract.goal_sets:type_name -> ei.Contract.GoalSet
	194, // 37: ei.Contract.grade_specs:type_name -> ei.Contract.GradeSpec
	6,   // 38: ei.ContractSeasonGoal.reward_type:type_name -> ei.RewardType
	71,  // 39: ei.ContractSeasonRewardConfirmationRequest.rinfo:type_name -> ei.BasicRequestInfo
	62,  // 40: ei.ContractSeasonRewardConfirmationRequest.goal:type_name -> ei.ContractSeasonGoal
	195, // 41: ei.ContractSeasonInfo.grade_goals:type_name -> ei.ContractSeasonInfo.GoalSet
	64,  // 42: ei.ContractSeasonInfos.infos:type_name -> ei.ContractSeasonInfo
	12,  // 43: ei.ContractPlayerInfo.grade:type_name -> ei.Contract.PlayerGrade
	14,  // 44: ei.ContractPlayerInfo.issues:type_name -> ei.ContractEvaluation.PoorBehavior
	13,  // 45: ei.ContractPlayerInfo.status:type_name -> ei.ContractPlayerInfo.Status
	67,  // 46: ei.ContractPlayerInfo.unread_evaluations:type_name -> ei.ContractEvaluation
	196, // 47: ei.ContractPlayerInfo.season_progress:type_name -> ei.ContractPlayerInfo.SeasonProgress
	12,  // 48: ei.ContractEvaluation.grade:type_name -> ei.Contract.PlayerGrade
	14,  // 49: ei.ContractEvaluation.issues:type_name -> ei.ContractEvaluation.PoorBehavior
	15,  // 50: ei.ContractEvaluation.status:type_name -> ei.ContractEvaluation.Status
	14,  // 51: ei.ContractCitation.issue:type_name -> ei.ContractEvaluation.PoorBehavior
	12,  // 52: ei.ContractCitation.grade:type_name -> ei.Contract.PlayerGrade
	197, // 53: ei.ContractEvaluationBatch.evals:type_name -> ei.ContractEvaluationBatch.Pair
	198, // 54: ei.CoopCompletionSnapshot.contributors:type_name -> ei.CoopCompletionSnapshot.ContributorSnapshot
	199, // 55: ei.ContractSimConfig.grade_configs:type_name -> ei.ContractSimConfig.ContractGradeSimConfig
	61,  // 56: ei.ContractSimPollResponse.contract_to_simulate:type_name -> ei.Contract
	72,  // 57: ei.ContractSimPollResponse.sim_config:type_name -> ei.ContractSimConfig
	201, // 58: ei.ContractSimResultUpdate.goal_infos:type_name -> ei.ContractSimResultUpdate.GoalInfo
	61,  // 59: ei.ContractsResponse.contracts:type_name -> ei.Contract
	60,  // 60: ei.ContractsResponse.custom_eggs:type_name -> ei.CustomEgg
	64,  // 61: ei.ContractsResponse.current_season:type_name -> ei.ContractSeasonInfo
	71,  // 62: ei.ContractCoopStatusRequest.rinfo:type_name -> ei.BasicRequestInfo
	186, // 63: ei.PlayerFarmInfo.epic_research:type_name -> ei.Backup.ResearchItem
	3,   // 64: ei.PlayerFarmInfo.egg_type:type_name -> ei.Egg
	186, // 65: ei.PlayerFarmInfo.common_research:type_name -> ei.Backup.ResearchItem
	189, // 66: ei.PlayerFarmInfo.active_boosts:type_name -> ei.Backup.ActiveBoost
	130, // 67: ei.PlayerFarmInfo.equipped_artifacts:type_name -> ei.CompleteArtifact
	235, // 68: ei.PlayerFarmInfo.farm_appearance:type_name -> ei.ShellDB.FarmConfiguration
	16,  // 69: ei.ContractCoopStatusResponse.response_status:type_name -> ei.ContractCoopStatusResponse.ResponseStatus
	12,  // 70: ei.ContractCoopStatusResponse.grade:type_name -> ei.Contract.PlayerGrade
	202, // 71: ei.ContractCoopStatusResponse.contributors:type_name -> ei.ContractCoopStatusResponse.ContributionInfo
	203, // 72: ei.ContractCoopStatusResponse.gifts:type_name -> ei.ContractCoopStatusResponse.CoopGift
	204, // 73: ei.ContractCoopStatusResponse.chicken_runs:type_name -> ei.ContractCoopStatusResponse.ChickenRun
	61,  // 74: ei.LocalContract.contract:type_name -> ei.Contract
	12,  // 75: ei.LocalContract.grade:type_name -> ei.Contract.PlayerGrade
	67,  // 76: ei.LocalContract.evaluation:type_name -> ei.ContractEvaluation
	82,  // 77: ei.MyContracts.contracts:type_name -> ei.LocalContract
	82,  // 78: ei.MyContracts.archive:type_name -> ei.LocalContract
	81,  // 79: ei.MyContracts.current_coop_statuses:type_name -> ei.ContractCoopStatusResponse
	66,  // 80: ei.MyContracts.last_cpi:type_name -> ei.ContractPlayerInfo
	60,  // 81: ei.MyContracts.custom_egg_info:type_name -> ei.CustomEgg
	71,  // 82: ei.QueryCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	12,  // 83: ei.QueryCoopRequest.grade:type_name -> ei.Contract.PlayerGrade
	71,  // 84: ei.CreateCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	12,  // 85: ei.CreateCoopRequest.grade:type_name -> ei.Contract.PlayerGrade
	0,   // 86: ei.CreateCoopRequest.platform:type_name -> ei.Platform
	71,  // 87: ei.JoinCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	12,  // 88: ei.JoinCoopRequest.grade:type_name -> ei.Contract.PlayerGrade
	0,   // 89: ei.JoinCoopRequest.platform:type_name -> ei.Platform
	18,  // 90: ei.JoinCoopResponse.status:type_name -> ei.ContractCoopStatusResponse.Status
	12,  // 91: ei.JoinCoopResponse.grade:type_name -> ei.Contract.PlayerGrade
	71,  // 92: ei.AutoJoinCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	12,  // 93: ei.AutoJoinCoopRequest.grade:type_name -> ei.Contract.PlayerGrade
	0,   // 94: ei.AutoJoinCoopRequest.platform:type_name -> ei.Platform
	71,  // 95: ei.UpdateCoopPermissionsRequest.rinfo:type_name -> ei.BasicRequestInfo
	71,  // 96: ei.LeaveCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	71,  // 97: ei.GiftPlayerCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	71,  // 98: ei.SendChickenRunCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	71,  // 99: ei.ReportPlayerCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	19,  // 100: ei.ReportPlayerCoopRequest.reason:type_name -> ei.ReportPlayerCoopRequest.Reason
	71,  // 101: ei.KickPlayerCoopRequest.rinfo:type_name -> ei.BasicRequestInfo
	20,  // 102: ei.KickPlayerCoopRequest.reason:type_name -> ei.KickPlayerCoopRequest.Reason
	205, // 103: ei.IdleSessionSummary.stats:type_name -> ei.IdleSessionSummary.Stat
	71,  // 104: ei.ContractCoopStatusUpdateRequest.rinfo:type_name -> ei.BasicRequestInfo
	79,  // 105: ei.ContractCoopStatusUpdateRequest.production_params:type_name -> ei.FarmProductionParams
	80,  // 106: ei.ContractCoopStatusUpdateRequest.farm_info:type_name -> ei.PlayerFarmInfo
	98,  // 107: ei.ContractCoopStatusUpdateRequest.last_idle_summary:type_name -> ei.IdleSessionSummary
	17,  // 108: ei.ContractCoopStatusUpdateResponse.status:type_name -> ei.ContractCoopStatusResponse.MemberStatus
	101, // 109: ei.CoopBuffHistory.history:type_name -> ei.CoopBuffState
	103, // 110: ei.CoopLastChickenRunTimes.entries:type_name -> ei.CoopChickenRunEntry
	206, // 111: ei.LeaderboardAnalysis.chunks:type_name -> ei.LeaderboardAnalysis.Chunk
	207, // 112: ei.LeaderboardInfo.seasons:type_name -> ei.LeaderboardInfo.Season
	71,  // 113: ei.LeaderboardRequest.rinfo:type_name -> ei.BasicRequestInfo
	12,  // 114: ei.LeaderboardRequest.grade:type_name -> ei.Contract.PlayerGrade
	12,  // 115: ei.LeaderboardResponse.grade:type_name -> ei.Contract.PlayerGrade
	208, // 116: ei.LeaderboardResponse.top_entries:type_name -> ei.LeaderboardResponse.Entry
	82,  // 117: ei.ContractsArchive.archive:type_name -> ei.LocalContract
	71,  // 118: ei.UserDataInfoRequest.rinfo:type_name -> ei.BasicRequestInfo
	71,  // 119: ei.ClearAllUserDataRequest.rinfo:type_name -> ei.BasicRequestInfo
	6,   // 120: ei.ServerGift.reward_type:type_name -> ei.RewardType
	209, // 121: ei.LiveConfig.boosts_config:type_name -> ei.LiveConfig.BoostsConfig
	210, // 122: ei.LiveConfig.gift_config:type_name -> ei.LiveConfig.GiftConfig
	211, // 123: ei.LiveConfig.misc_config:type_name -> ei.LiveConfig.MiscConfig
	212, // 124: ei.LiveConfig.help_config:type_name -> ei.LiveConfig.HelpConfig
	7,   // 125: ei.InGameMail.app_link:type_name -> ei.UILocation
	158, // 126: ei.InGameMail.image:type_name -> ei.DLCItem
	8,   // 127: ei.InGameMail.user_type:type_name -> ei.UserType
	116, // 128: ei.MailDB.mail:type_name -> ei.InGameMail
	116, // 129: ei.TipsDB.tips:type_name -> ei.InGameMail
	217, // 130: ei.MailState.tips_states:type_name -> ei.MailState.TipState
	46,  // 131: ei.PeriodicalsResponse.sales:type_name -> ei.SalesInfo
	48,  // 132: ei.PeriodicalsResponse.events:type_name -> ei.EggIncCurrentEvents
	77,  // 133: ei.PeriodicalsResponse.contracts:type_name -> ei.ContractsResponse
	67,  // 134: ei.PeriodicalsResponse.evaluations:type_name -> ei.ContractEvaluation
	114, // 135: ei.PeriodicalsResponse.gifts:type_name -> ei.ServerGift
	138, // 136: ei.PeriodicalsResponse.artifact_cases:type_name -> ei.CompleteMissionResponse
	115, // 137: ei.PeriodicalsResponse.live_config:type_name -> ei.LiveConfig
	117, // 138: ei.PeriodicalsResponse.mail_bag:type_name -> ei.MailDB
	66,  // 139: ei.PeriodicalsResponse.contract_player_info:type_name -> ei.ContractPlayerInfo
	218, // 140: ei.PeriodicalsResponse.showcase_royalties:type_name -> ei.PeriodicalsResponse.RoyaltyInfo
	71,  // 141: ei.GetPeriodicalsRequest.rinfo:type_name -> ei.BasicRequestInfo
	71,  // 142: ei.ConfigRequest.rinfo:type_name -> ei.BasicRequestInfo
	115, // 143: ei.ConfigResponse.live_config:type_name -> ei.LiveConfig
	117, // 144: ei.ConfigResponse.mail_bag:type_name -> ei.MailDB
	163, // 145: ei.ConfigResponse.dlc_catalog:type_name -> ei.DLCCatalog
	219, // 146: ei.ArtifactsClientInfo.launch_counts:type_name -> ei.ArtifactsClientInfo.LaunchCount
	22,  // 147: ei.MissionInfo.ship:type_name -> ei.MissionInfo.Spaceship
	23,  // 148: ei.MissionInfo.status:type_name -> ei.MissionInfo.Status
	24,  // 149: ei.MissionInfo.duration_type:type_name -> ei.MissionInfo.DurationType
	220, // 150: ei.MissionInfo.fuel:type_name -> ei.MissionInfo.Fuel
	25,  // 151: ei.MissionInfo.target_artifact:type_name -> ei.ArtifactSpec.Name
	25,  // 152: ei.ArtifactSpec.name:type_name -> ei.ArtifactSpec.Name
	26,  // 153: ei.ArtifactSpec.level:type_name -> ei.ArtifactSpec.Level
	27,  // 154: ei.ArtifactSpec.rarity:type_name -> ei.ArtifactSpec.Rarity
	3,   // 155: ei.ArtifactSpec.egg:type_name -> ei.Egg
	129, // 156: ei.CompleteArtifact.spec:type_name -> ei.ArtifactSpec
	129, // 157: ei.CompleteArtifact.stones:type_name -> ei.ArtifactSpec
	130, // 158: ei.ArtifactInventoryItem.artifact:type_name -> ei.CompleteArtifact
	71,  // 159: ei.ArtifactsConfigurationRequest.rinfo:type_name -> ei.BasicRequestInfo
	221, // 160: ei.ArtifactsConfigurationResponse.mission_parameters:type_name -> ei.ArtifactsConfigurationResponse.MissionParameters
	222, // 161: ei.ArtifactsConfigurationResponse.artifact_parameters:type_name -> ei.ArtifactsConfigurationResponse.ArtifactParameters
	223, // 162: ei.ArtifactsConfigurationResponse.crafting_level_infos:type_name -> ei.ArtifactsConfigurationResponse.CraftingLevelInfo
	71,  // 163: ei.MissionRequest.rinfo:type_name -> ei.BasicRequestInfo
	128, // 164: ei.MissionRequest.info:type_name -> ei.MissionInfo
	127, // 165: ei.MissionRequest.client_info:type_name -> ei.ArtifactsClientInfo
	128, // 166: ei.MissionResponse.info:type_name -> ei.MissionInfo
	128, // 167: ei.GetActiveMissionsResponse.active_missions:type_name -> ei.MissionInfo
	128, // 168: ei.CompleteMissionResponse.info:type_name -> ei.MissionInfo
	225, // 169: ei.CompleteMissionResponse.artifacts:type_name -> ei.CompleteMissionResponse.SecureArtifactSpec
	58,  // 170: ei.CompleteMissionResponse.other_rewards:type_name -> ei.Reward
	71,  // 171: ei.CollectContractArtifactRewardsRequest.rinfo:type_name -> ei.BasicRequestInfo
	12,  // 172: ei.CollectContractArtifactRewardsRequest.grade:type_name -> ei.Contract.PlayerGrade
	22,  // 173: ei.CollectContractArtifactRewardsRequest.best_ship:type_name -> ei.MissionInfo.Spaceship
	71,  // 174: ei.CollectSeasonArtifactRewardsRequest.rinfo:type_name -> ei.BasicRequestInfo
	22,  // 175: ei.CollectSeasonArtifactRewardsRequest.best_ship:type_name -> ei.MissionInfo.Spaceship
	71,  // 176: ei.CraftArtifactRequest.rinfo:type_name -> ei.BasicRequestInfo
	129, // 177: ei.CraftArtifactRequest.spec:type_name -> ei.ArtifactSpec
	131, // 178: ei.CraftArtifactRequest.ingredients:type_name -> ei.ArtifactInventoryItem
	27,  // 179: ei.CraftArtifactResponse.rarity_achieved:type_name -> ei.ArtifactSpec.Rarity
	71,  // 180: ei.ConsumeArtifactRequest.rinfo:type_name -> ei.BasicRequestInfo
	129, // 181: ei.ConsumeArtifactRequest.spec:type_name -> ei.ArtifactSpec
	129, // 182: ei.ConsumeArtifactResponse.byproducts:type_name -> ei.ArtifactSpec
	58,  // 183: ei.ConsumeArtifactResponse.other_rewards:type_name -> ei.Reward
	71,  // 184: ei.SetArtifactRequest.rinfo:type_name -> ei.BasicRequestInfo
	131, // 185: ei.SetArtifactRequest.artifact:type_name -> ei.ArtifactInventoryItem
	129, // 186: ei.SetArtifactRequest.stones:type_name -> ei.ArtifactSpec
	131, // 187: ei.ArtifactsDB.inventory_items:type_name -> ei.ArtifactInventoryItem
	132, // 188: ei.ArtifactsDB.inventory_slots:type_name -> ei.InventorySlot
	226, // 189: ei.ArtifactsDB.active_artifacts_DEPRECATED:type_name -> ei.ArtifactsDB.ActiveArtifactSlot
	227, // 190: ei.ArtifactsDB.active_artifact_sets:type_name -> ei.ArtifactsDB.ActiveArtifactSet
	227, // 191: ei.ArtifactsDB.saved_artifact_sets:type_name -> ei.ArtifactsDB.ActiveArtifactSet
	228, // 192: ei.ArtifactsDB.artifact_status:type_name -> ei.ArtifactsDB.CraftableArtifact
	128, // 193: ei.ArtifactsDB.fueling_mission:type_name -> ei.MissionInfo
	128, // 194: ei.ArtifactsDB.mission_infos:type_name -> ei.MissionInfo
	128, // 195: ei.ArtifactsDB.mission_archive:type_name -> ei.MissionInfo
	129, // 196: ei.ArtifactsDB.discovered_artifacts_DEPRECATED:type_name -> ei.ArtifactSpec
	228, // 197: ei.ArtifactsDB.craftable_artifacts_DEPRECATED:type_name -> ei.ArtifactsDB.CraftableArtifact
	228, // 198: ei.ArtifactsDB.crafting_counts_DEPRECATED:type_name -> ei.ArtifactsDB.CraftableArtifact
	135, // 199: ei.LogCompleteMissionPayload.req:type_name -> ei.MissionRequest
	138, // 200: ei.LogCompleteMissionPayload.res:type_name -> ei.CompleteMissionResponse
	141, // 201: ei.LogCraftArtifactPayload.req:type_name -> ei.CraftArtifactRequest
	142, // 202: ei.LogCraftArtifactPayload.res:type_name -> ei.CraftArtifactResponse
	143, // 203: ei.LogConsumeArtifactPayload.req:type_name -> ei.ConsumeArtifactRequest
	144, // 204: ei.LogConsumeArtifactPayload.res:type_name -> ei.ConsumeArtifactResponse
	146, // 205: ei.LogSetArtifactPayload.req:type_name -> ei.SetArtifactRequest
	147, // 206: ei.LogSetArtifactPayload.res:type_name -> ei.SetArtifactResponse
	39,  // 207: ei.SaveBackupResponse.existing_backup:type_name -> ei.Backup
	229, // 208: ei.ShellSpec.primary_piece:type_name -> ei.ShellSpec.ShellPiece
	229, // 209: ei.ShellSpec.pieces:type_name -> ei.ShellSpec.ShellPiece
	158, // 210: ei.ShellSpec.alt_assets:type_name -> ei.DLCItem
	230, // 211: ei.ShellSetSpec.variations:type_name -> ei.ShellSetSpec.VariationSpec
	158, // 212: ei.ShellSetSpec.icon:type_name -> ei.DLCItem
	30,  // 213: ei.ShellObjectSpec.asset_type:type_name -> ei.ShellSpec.AssetType
	31,  // 214: ei.ShellObjectSpec.chicken_animation:type_name -> ei.ShellObjectSpec.ChickenAnimation
	231, // 215: ei.ShellObjectSpec.pieces:type_name -> ei.ShellObjectSpec.LODPiece
	30,  // 216: ei.ShellGroupSpec.asset_type:type_name -> ei.ShellSpec.AssetType
	158, // 217: ei.DLCCatalog.items:type_name -> ei.DLCItem
	159, // 218: ei.DLCCatalog.shells:type_name -> ei.ShellSpec
	160, // 219: ei.DLCCatalog.shell_sets:type_name -> ei.ShellSetSpec
	160, // 220: ei.DLCCatalog.decorators:type_name -> ei.ShellSetSpec
	161, // 221: ei.DLCCatalog.shell_objects:type_name -> ei.ShellObjectSpec
	162, // 222: ei.DLCCatalog.shell_groups:type_name -> ei.ShellGroupSpec
	232, // 223: ei.ShellDB.shell_inventory:type_name -> ei.ShellDB.ShellStatus
	233, // 224: ei.ShellDB.shell_element_inventory:type_name -> ei.ShellDB.ShellElementStatus
	234, // 225: ei.ShellDB.shell_variation_inventory:type_name -> ei.ShellDB.ShellSetVariationStatus
	232, // 226: ei.ShellDB.shell_set_inventory:type_name -> ei.ShellDB.ShellStatus
	232, // 227: ei.ShellDB.shell_object_inventory:type_name -> ei.ShellDB.ShellStatus
	235, // 228: ei.ShellDB.farm_configs:type_name -> ei.ShellDB.FarmConfiguration
	236, // 229: ei.ShellDB.saved_configs:type_name -> ei.ShellDB.SavedFarmConfiguration
	242, // 230: ei.ShellPopularityStats.data:type_name -> ei.ShellPopularityStats.Entry
	71,  // 231: ei.ShellsActionLog.rinfo:type_name -> ei.BasicRequestInfo
	32,  // 232: ei.ShellsActionLog.farm_element:type_name -> ei.ShellDB.FarmElement
	71,  // 233: ei.SubmitShellShowcaseRequest.rinfo:type_name -> ei.BasicRequestInfo
	235, // 234: ei.SubmitShellShowcaseRequest.farm_config:type_name -> ei.ShellDB.FarmConfiguration
	169, // 235: ei.ShellShowcase.top:type_name -> ei.ShellShowcaseListingInfo
	169, // 236: ei.ShellShowcase.featured:type_name -> ei.ShellShowcaseListingInfo
	169, // 237: ei.ShellShowcase.fresh:type_name -> ei.ShellShowcaseListingInfo
	33,  // 238: ei.ShellShowcaseListingInfo.status:type_name -> ei.ShellShowcaseListingInfo.Status
	235, // 239: ei.ShellShowcaseListingInfo.farm_config:type_name -> ei.ShellDB.FarmConfiguration
	71,  // 240: ei.ShowcaseRoyaltyDeliveryConfirmation.rinfo:type_name -> ei.BasicRequestInfo
	169, // 241: ei.ShellShowcaseListingSet.listings:type_name -> ei.ShellShowcaseListingInfo
	71,  // 242: ei.ShellsActionBatch.rinfo:type_name -> ei.BasicRequestInfo
	166, // 243: ei.ShellsActionBatch.actions:type_name -> ei.ShellsActionLog
	34,  // 244: ei.UserVerificationAnalysis.overall_status:type_name -> ei.UserVerificationAnalysis.Status
	34,  // 245: ei.UserVerificationAnalysis.iap_status:type_name -> ei.UserVerificationAnalysis.Status
	34,  // 246: ei.UserVerificationAnalysis.artifacts_status:type_name -> ei.UserVerificationAnalysis.Status
	34,  // 247: ei.UserVerificationAnalysis.contracts_status:type_name -> ei.UserVerificationAnalysis.Status
	35,  // 248: ei.UserSubscriptionInfo.subscription_level:type_name -> ei.UserSubscriptionInfo.Level
	35,  // 249: ei.UserSubscriptionInfo.next_subscription_level:type_name -> ei.UserSubscriptionInfo.Level
	0,   // 250: ei.UserSubscriptionInfo.platform:type_name -> ei.Platform
	36,  // 251: ei.UserSubscriptionInfo.status:type_name -> ei.UserSubscriptionInfo.Status
	243, // 252: ei.UserSubscriptionInfo.history:type_name -> ei.UserSubscriptionInfo.HistoryEntry
	71,  // 253: ei.SubscriptionChangeHintRequest.rinfo:type_name -> ei.BasicRequestInfo
	35,  // 254: ei.SubscriptionChangeHintRequest.next_subscription_level:type_name -> ei.UserSubscriptionInfo.Level
	3,   // 255: ei.Backup.Game.max_egg_reached:type_name -> ei.Egg
	186, // 256: ei.Backup.Game.epic_research:type_name -> ei.Backup.ResearchItem
	187, // 257: ei.Backup.Game.news:type_name -> ei.Backup.NewsHeadline
	188, // 258: ei.Backup.Game.achievements:type_name -> ei.Backup.AchievementInfo
	190, // 259: ei.Backup.Game.boosts:type_name -> ei.Backup.OwnedBoost
	131, // 260: ei.Backup.Artifacts.item_being_infused:type_name -> ei.ArtifactInventoryItem
	129, // 261: ei.Backup.Artifacts.spec_being_infused:type_name -> ei.ArtifactSpec
	3,   // 262: ei.Backup.Artifacts.egg_type_infusing:type_name -> ei.Egg
	22,  // 263: ei.Backup.Artifacts.last_fueled_ship:type_name -> ei.MissionInfo.Spaceship
	3,   // 264: ei.Backup.Simulation.egg_type:type_name -> ei.Egg
	4,   // 265: ei.Backup.Simulation.farm_type:type_name -> ei.FarmType
	186, // 266: ei.Backup.Simulation.common_research:type_name -> ei.Backup.ResearchItem
	189, // 267: ei.Backup.Simulation.active_boosts:type_name -> ei.Backup.ActiveBoost
	191, // 268: ei.Backup.Mission.missions:type_name -> ei.Backup.MissionInfo
	5,   // 269: ei.Contract.Goal.type:type_name -> ei.GoalType
	6,   // 270: ei.Contract.Goal.reward_type:type_name -> ei.RewardType
	192, // 271: ei.Contract.GoalSet.goals:type_name -> ei.Contract.Goal
	12,  // 272: ei.Contract.GradeSpec.grade:type_name -> ei.Contract.PlayerGrade
	192, // 273: ei.Contract.GradeSpec.goals:type_name -> ei.Contract.Goal
	59,  // 274: ei.Contract.GradeSpec.modifiers:type_name -> ei.GameModifier
	12,  // 275: ei.ContractSeasonInfo.GoalSet.grade:type_name -> ei.Contract.PlayerGrade
	62,  // 276: ei.ContractSeasonInfo.GoalSet.goals:type_name -> ei.ContractSeasonGoal
	12,  // 277: ei.ContractPlayerInfo.SeasonProgress.starting_grade:type_name -> ei.Contract.PlayerGrade
	67,  // 278: ei.ContractEvaluationBatch.Pair.cev:type_name -> ei.ContractEvaluation
	12,  // 279: ei.ContractSimConfig.ContractGradeSimConfig.grade:type_name -> ei.Contract.PlayerGrade
	200, // 280: ei.ContractSimConfig.ContractGradeSimConfig.goal_params:type_name -> ei.ContractSimConfig.ContractGradeSimConfig.GoalParams
	12,  // 281: ei.ContractSimResultUpdate.GoalInfo.grade:type_name -> ei.Contract.PlayerGrade
	79,  // 282: ei.ContractCoopStatusResponse.ContributionInfo.production_params:type_name -> ei.FarmProductionParams
	80,  // 283: ei.ContractCoopStatusResponse.ContributionInfo.farm_info:type_name -> ei.PlayerFarmInfo
	0,   // 284: ei.ContractCoopStatusResponse.ContributionInfo.platform:type_name -> ei.Platform
	101, // 285: ei.ContractCoopStatusResponse.ContributionInfo.buff_history:type_name -> ei.CoopBuffState
	213, // 286: ei.LiveConfig.BoostsConfig.item_configs:type_name -> ei.LiveConfig.BoostsConfig.ItemConfig
	214, // 287: ei.LiveConfig.GiftConfig.gift_configs:type_name -> ei.LiveConfig.GiftConfig.GiftValueConfig
	215, // 288: ei.LiveConfig.GiftConfig.random_gift_mu_config:type_name -> ei.LiveConfig.GiftConfig.GiftMuConfig
	215, // 289: ei.LiveConfig.GiftConfig.video_gift_mu_config:type_name -> ei.LiveConfig.GiftConfig.GiftMuConfig
	216, // 290: ei.LiveConfig.HelpConfig.video_infos:type_name -> ei.LiveConfig.HelpConfig.HowToVideoInfo
	21,  // 291: ei.LiveConfig.HelpConfig.HowToVideoInfo.type:type_name -> ei.LiveConfig.HelpConfig.HowToVideoInfo.Type
	22,  // 292: ei.ArtifactsClientInfo.LaunchCount.ship:type_name -> ei.MissionInfo.Spaceship
	3,   // 293: ei.MissionInfo.Fuel.egg:type_name -> ei.Egg
	22,  // 294: ei.ArtifactsConfigurationResponse.MissionParameters.ship:type_name -> ei.MissionInfo.Spaceship
	224, // 295: ei.ArtifactsConfigurationResponse.MissionParameters.durations:type_name -> ei.ArtifactsConfigurationResponse.MissionParameters.Duration
	129, // 296: ei.ArtifactsConfigurationResponse.ArtifactParameters.spec:type_name -> ei.ArtifactSpec
	24,  // 297: ei.ArtifactsConfigurationResponse.MissionParameters.Duration.duration_type:type_name -> ei.MissionInfo.DurationType
	129, // 298: ei.CompleteMissionResponse.SecureArtifactSpec.spec:type_name -> ei.ArtifactSpec
	226, // 299: ei.ArtifactsDB.ActiveArtifactSet.slots:type_name -> ei.ArtifactsDB.ActiveArtifactSlot
	129, // 300: ei.ArtifactsDB.CraftableArtifact.spec:type_name -> ei.ArtifactSpec
	30,  // 301: ei.ShellSpec.ShellPiece.asset_type:type_name -> ei.ShellSpec.AssetType
	158, // 302: ei.ShellSpec.ShellPiece.dlc:type_name -> ei.DLCItem
	158, // 303: ei.ShellObjectSpec.LODPiece.dlc:type_name -> ei.DLCItem
	32,  // 304: ei.ShellDB.ShellElementStatus.element:type_name -> ei.ShellDB.FarmElement
	32,  // 305: ei.ShellDB.FarmConfiguration.locked_elements:type_name -> ei.ShellDB.FarmElement
	237, // 306: ei.ShellDB.FarmConfiguration.shell_configs:type_name -> ei.ShellDB.ShellConfiguration
	238, // 307: ei.ShellDB.FarmConfiguration.shell_set_configs:type_name -> ei.ShellDB.ShellSetConfiguration
	239, // 308: ei.ShellDB.FarmConfiguration.group_configs:type_name -> ei.ShellDB.ShellGroupConfiguration
	240, // 309: ei.ShellDB.FarmConfiguration.chicken_configs:type_name -> ei.ShellDB.ChickenConfig
	241, // 310: ei.ShellDB.FarmConfiguration.lighting_config:type_name -> ei.ShellDB.LightingConfig
	235, // 311: ei.ShellDB.SavedFarmConfiguration.config:type_name -> ei.ShellDB.FarmConfiguration
	30,  // 312: ei.ShellDB.ShellConfiguration.asset_type:type_name -> ei.ShellSpec.AssetType
	32,  // 313: ei.ShellDB.ShellSetConfiguration.element:type_name -> ei.ShellDB.FarmElement
	30,  // 314: ei.ShellDB.ShellGroupConfiguration.asset_type:type_name -> ei.ShellSpec.AssetType
	37,  // 315: ei.ShellDB.LightingConfig.light_dir:type_name -> ei.Vector3
	38,  // 316: ei.ShellDB.LightingConfig.light_direct_color:type_name -> ei.Vector4
	38,  // 317: ei.ShellDB.LightingConfig.light_ambient_color:type_name -> ei.Vector4
	38,  // 318: ei.ShellDB.LightingConfig.fog_color:type_name -> ei.Vector4
	32,  // 319: ei.ShellPopularityStats.Entry.element:type_name -> ei.ShellDB.FarmElement
	320, // [320:320] is the sub-list for method output_type
	320, // [320:320] is the sub-list for method input_type
	320, // [320:320] is the sub-list for extension type_name
	320, // [320:320] is the sub-list for extension extendee
	0,   // [0:320] is the sub-list for field type_name
}

func init() { file_go_ei_proto_init() }
func file_go_ei_proto_init() {
	if File_go_ei_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_ei_proto_rawDesc,
			NumEnums:      37,
			NumMessages:   207,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_ei_proto_goTypes,
		DependencyIndexes: file_go_ei_proto_depIdxs,
		EnumInfos:         file_go_ei_proto_enumTypes,
		MessageInfos:      file_go_ei_proto_msgTypes,
	}.Build()
	File_go_ei_proto = out.File
	file_go_ei_proto_rawDesc = nil
	file_go_ei_proto_goTypes = nil
	file_go_ei_proto_depIdxs = nil
}
